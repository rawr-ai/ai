[
	{
	  "codeTitle": "Asserting Exact Exception Type (Python)",
	  "codeDescription": "Demonstrates how to check for an exact exception type rather than allowing subclasses.",
	  "codeLanguage": "python",
	  "codeTokens": 64,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#2025-04-08_snippet_4",
	  "pageTitle": "Writing and Reporting Assertions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_foo_not_implemented():\n    def foo():\n        raise NotImplementedError\n\n    with pytest.raises(RuntimeError) as excinfo:\n        foo()\n    assert excinfo.type is RuntimeError"
		}
	  ],
	  "relevance": 0.995
	},
	{
	  "codeTitle": "Basic Assertion in pytest (Python)",
	  "codeDescription": "Demonstrates a simple test function using an assert statement to verify the return value of a function.",
	  "codeLanguage": "python",
	  "codeTokens": 58,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#2025-04-08_snippet_0",
	  "pageTitle": "Writing and Reporting Assertions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_assert1.py\ndef f():\n    return 3\n\n\ndef test_function():\n    assert f() == 4"
		}
	  ],
	  "relevance": 0.995
	},
	{
	  "codeTitle": "Running pytest with test class isolation demonstration",
	  "codeDescription": "Command and output showing how pytest isolates test methods in classes by creating a new instance for each test, resulting in the second test failing because it doesn't share the instance attribute value.",
	  "codeLanguage": "pytest",
	  "codeTokens": 205,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#2025-04-08_snippet_9",
	  "pageTitle": "Getting Started with pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest -k TestClassDemoInstance -q\n.F                                                                   [100%]\n================================= FAILURES =================================\n______________________ TestClassDemoInstance.test_two ______________________\n\nself = <test_class_demo.TestClassDemoInstance object at 0xdeadbeef0002>\n\n    def test_two(self):\n>       assert self.value == 1\nE       assert 0 == 1\nE        +  where 0 = <test_class_demo.TestClassDemoInstance object at 0xdeadbeef0002>.value\n\ntest_class_demo.py:9: AssertionError\n========================= short test summary info ==========================\nFAILED test_class_demo.py::TestClassDemoInstance::test_two - assert 0 == 1\n1 failed, 1 passed in 0.12s"
		}
	  ],
	  "relevance": 0.99
	},
	{
	  "codeTitle": "Basic Test Parametrization in Python using pytest.mark.parametrize",
	  "codeDescription": "Demonstrates how to parametrize a test function using @pytest.mark.parametrize decorator to run multiple test cases with different input-output pairs.",
	  "codeLanguage": "python",
	  "codeTokens": 99,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/parametrize.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest Test Parametrization Guide",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_expectation.py\nimport pytest\n\n@pytest.mark.parametrize(\"test_input,expected\", [(\"3+5\", 8), (\"2+4\", 6), (\"6*9\", 42)])\ndef test_eval(test_input, expected):\n    assert eval(test_input) == expected"
		}
	  ],
	  "relevance": 0.99
	},
	{
	  "codeTitle": "Hello World Pytest Plugin Implementation",
	  "codeDescription": "Complete example of a pytest plugin that provides a 'hello' fixture with configurable name parameter",
	  "codeLanguage": "python",
	  "codeTokens": 138,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#2025-04-08_snippet_3",
	  "pageTitle": "Writing and Testing Pytest Plugins Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n\ndef pytest_addoption(parser):\n    group = parser.getgroup(\"helloworld\")\n    group.addoption(\n        \"--name\",\n        action=\"store\",\n        dest=\"name\",\n        default=\"World\",\n        help='Default \"name\" for hello().',\n    )\n\n\n@pytest.fixture\ndef hello(request):\n    name = request.config.getoption(\"name\")\n\n    def _hello(name=None):\n        if not name:\n            name = request.config.getoption(\"name\")\n        return f\"Hello {name}!\"\n\n    return _hello"
		}
	  ],
	  "relevance": 0.988
	},
	{
	  "codeTitle": "Creating a basic test function in Python",
	  "codeDescription": "Sample Python test file with a function to test and a test function that uses an assertion to validate the function's output.",
	  "codeLanguage": "python",
	  "codeTokens": 65,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#2025-04-08_snippet_2",
	  "pageTitle": "Getting Started with pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_sample.py\ndef func(x):\n    return x + 1\n\n\ndef test_answer():\n    assert func(3) == 5"
		}
	  ],
	  "relevance": 0.985
	},
	{
	  "codeTitle": "Implementing Basic pytest Collection Hook",
	  "codeDescription": "Example of implementing the pytest_collection_modifyitems hook to modify test items after collection is completed. Shows how pytest dynamically prunes arguments based on the function signature.",
	  "codeLanguage": "python",
	  "codeTokens": 72,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#2025-04-08_snippet_0",
	  "pageTitle": "Writing Hook Functions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def pytest_collection_modifyitems(config, items):\n    # called after collection is completed\n    # you can modify the ``items`` list\n    ..."
		}
	  ],
	  "relevance": 0.985
	},
	{
	  "codeTitle": "Basic Python Test Example with pytest",
	  "codeDescription": "A simple example demonstrating how to write a test function in pytest. The example includes a function 'inc' that increments a value, and a test function that asserts an expected result which will fail to demonstrate pytest's assertion introspection feature.",
	  "codeLanguage": "python",
	  "codeTokens": 90,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/index.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest: A Python Testing Framework",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_sample.py\ndef inc(x):\n    return x + 1\n\n\ndef test_answer():\n    assert inc(3) == 5"
		}
	  ],
	  "relevance": 0.985
	},
	{
	  "codeTitle": "Demonstrating Fixture Dependencies and Execution Order in pytest",
	  "codeDescription": "Illustrates how fixtures can depend on each other and how pytest manages their execution order. The example shows a sequence of fixtures that append numbers to a list, demonstrating the linear execution of fixtures and potential error propagation.",
	  "codeLanguage": "python",
	  "codeTokens": 134,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/fixtures.rst#2025-04-08_snippet_1",
	  "pageTitle": "pytest Fixtures Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n\n@pytest.fixture\ndef order():\n    return []\n\n\n@pytest.fixture\ndef append_first(order):\n    order.append(1)\n\n\n@pytest.fixture\ndef append_second(order, append_first):\n    order.extend([2])\n\n\n@pytest.fixture(autouse=True)\ndef append_third(order, append_second):\n    order += [3]\n\n\ndef test_order(order):\n    assert order == [1, 2, 3]"
		}
	  ],
	  "relevance": 0.985
	},
	{
	  "codeTitle": "Accessing Exception Info with pytest.raises (Python)",
	  "codeDescription": "Shows how to access and assert against the details of a raised exception using pytest.raises.",
	  "codeLanguage": "python",
	  "codeTokens": 68,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#2025-04-08_snippet_3",
	  "pageTitle": "Writing and Reporting Assertions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_recursion_depth():\n    with pytest.raises(RuntimeError) as excinfo:\n\n        def f():\n            f()\n\n        f()\n    assert \"maximum recursion\" in str(excinfo.value)"
		}
	  ],
	  "relevance": 0.985
	},
	{
	  "codeTitle": "Creating a Reusable Mock Response Fixture in pytest",
	  "codeDescription": "This example demonstrates how to create a fixture for a mock response that can be shared across multiple tests, improving code reusability.",
	  "codeLanguage": "python",
	  "codeTokens": 222,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#2025-04-08_snippet_2",
	  "pageTitle": "Monkeypatching and Mocking in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of test_app.py, a simple test for our API retrieval\nimport pytest\nimport requests\n\n# app.py that includes the get_json() function\nimport app\n\n\n# custom class to be the mock return value of requests.get()\nclass MockResponse:\n    @staticmethod\n    def json():\n        return {\"mock_key\": \"mock_response\"}\n\n\n# monkeypatched requests.get moved to a fixture\n@pytest.fixture\ndef mock_response(monkeypatch):\n    \"\"\"Requests.get() mocked to return {'mock_key':'mock_response'}.\"\"\"\n\n    def mock_get(*args, **kwargs):\n        return MockResponse()\n\n    monkeypatch.setattr(requests, \"get\", mock_get)\n\n\n# notice our test uses the custom fixture instead of monkeypatch directly\ndef test_get_json(mock_response):\n    result = app.get_json(\"https://fakeurl\")\n    assert result[\"mock_key\"] == \"mock_response\""
		}
	  ],
	  "relevance": 0.985
	},
	{
	  "codeTitle": "Implementing Incremental Testing in pytest",
	  "codeDescription": "Shows how to implement incremental testing using custom markers and hooks in pytest, allowing tests to be skipped if a previous test in the sequence fails.",
	  "codeLanguage": "python",
	  "codeTokens": 456,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_17",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\n\nfrom typing import Dict, Tuple\n\nimport pytest\n\n# store history of failures per test class name and per index in parametrize (if parametrize used)\n_test_failed_incremental: Dict[str, Dict[Tuple[int, ...], str]] = {}\n\n\ndef pytest_runtest_makereport(item, call):\n    if \"incremental\" in item.keywords:\n        # incremental marker is used\n        if call.excinfo is not None:\n            # the test has failed\n            # retrieve the class name of the test\n            cls_name = str(item.cls)\n            # retrieve the index of the test (if parametrize is used in combination with incremental)\n            parametrize_index = (\n                tuple(item.callspec.indices.values())\n                if hasattr(item, \"callspec\")\n                else ()\n            )\n            # retrieve the name of the test function\n            test_name = item.originalname or item.name\n            # store in _test_failed_incremental the original name of the failed test\n            _test_failed_incremental.setdefault(cls_name, {}).setdefault(\n                parametrize_index, test_name\n            )\n\n\ndef pytest_runtest_setup(item):\n    if \"incremental\" in item.keywords:\n        # retrieve the class name of the test\n        cls_name = str(item.cls)\n        # check if a previous test has failed for this class\n        if cls_name in _test_failed_incremental:\n            # retrieve the index of the test (if parametrize is used in combination with incremental)\n            parametrize_index = (\n                tuple(item.callspec.indices.values())\n                if hasattr(item, \"callspec\")\n                else ()\n            )\n            # retrieve the name of the first test function to fail for this class name and index\n            test_name = _test_failed_incremental[cls_name].get(parametrize_index, None)\n            # if name found, test has failed for the combination of class name & test name\n            if test_name is not None:\n                pytest.xfail(f\"previous test failed ({test_name})\")"
		}
	  ],
	  "relevance": 0.982
	},
	{
	  "codeTitle": "Running pytest from Command Line",
	  "codeDescription": "Shows how to execute pytest from the command line and displays the output of a failing test. The output demonstrates pytest's detailed assertion introspection, showing the actual and expected values.",
	  "codeLanguage": "pytest",
	  "codeTokens": 198,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/index.rst#2025-04-08_snippet_1",
	  "pageTitle": "pytest: A Python Testing Framework",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 1 item\n\ntest_sample.py F                                                     [100%]\n\n================================= FAILURES =================================\n_______________________________ test_answer ________________________________\n\n    def test_answer():\n>       assert inc(3) == 5\nE       assert 4 == 5\nE        +  where 4 = inc(3)\n\ntest_sample.py:6: AssertionError\n========================= short test summary info ==========================\nFAILED test_sample.py::test_answer - assert 4 == 5\n============================ 1 failed in 0.12s ============================="
		}
	  ],
	  "relevance": 0.982
	},
	{
	  "codeTitle": "Context-Sensitive Set Comparison in pytest",
	  "codeDescription": "Shows how pytest provides detailed information when comparing sets, highlighting differences between expected and actual values.",
	  "codeLanguage": "python",
	  "codeTokens": 68,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#2025-04-08_snippet_14",
	  "pageTitle": "Writing and Reporting Assertions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_assert2.py\ndef test_set_comparison():\n    set1 = set(\"1308\")\n    set2 = set(\"8035\")\n    assert set1 == set2"
		}
	  ],
	  "relevance": 0.98
	},
	{
	  "codeTitle": "Creating a DB Fixture with Package Scope in pytest",
	  "codeDescription": "Defines a DB class and creates a package-scoped fixture that returns an instance of this class. Package-scoped fixtures are shared among test modules within the same directory structure.",
	  "codeLanguage": "python",
	  "codeTokens": 77,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_20",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of a/conftest.py\nimport pytest\n\n\nclass DB:\n    pass\n\n\n@pytest.fixture(scope=\"package\")\ndef db():\n    return DB()"
		}
	  ],
	  "relevance": 0.98
	},
	{
	  "codeTitle": "Applying Markers with Parametrized Tests in Pytest",
	  "codeDescription": "Demonstrates how to apply markers when using parametrize, including marking individual test instances within a parametrized test using pytest.param.",
	  "codeLanguage": "python",
	  "codeTokens": 99,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_11",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n\n@pytest.mark.foo\n@pytest.mark.parametrize(\n    (\"n\", \"expected\"), [(1, 2), pytest.param(1, 3, marks=pytest.mark.bar), (2, 3)]\n)\ndef test_increment(n, expected):\n    assert n + 1 == expected"
		}
	  ],
	  "relevance": 0.979
	},
	{
	  "codeTitle": "Custom Comparison Test Class Implementation",
	  "codeDescription": "Implements a custom class with __eq__ method and a test function that demonstrates the custom assertion explanation feature.",
	  "codeLanguage": "python",
	  "codeTokens": 105,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#2025-04-08_snippet_16",
	  "pageTitle": "Writing and Reporting Assertions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_foocompare.py\nclass Foo:\n    def __init__(self, val):\n        self.val = val\n\n    def __eq__(self, other):\n        return self.val == other.val\n\n\ndef test_compare():\n    f1 = Foo(1)\n    f2 = Foo(2)\n    assert f1 == f2"
		}
	  ],
	  "relevance": 0.976
	},
	{
	  "codeTitle": "Registering Custom Markers in Pytest",
	  "codeDescription": "Demonstrates how to register custom pytest markers using pytest_configure hook to add them to help text and prevent warnings",
	  "codeLanguage": "python",
	  "codeTokens": 87,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#2025-04-08_snippet_1",
	  "pageTitle": "Writing and Testing Pytest Plugins Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def pytest_configure(config):\n    config.addinivalue_line(\"markers\", \"cool_marker: this one is for cool tests.\")\n    config.addinivalue_line(\n        \"markers\", \"mark_with(arg, arg2): this marker takes arguments.\"\n    )"
		}
	  ],
	  "relevance": 0.975
	},
	{
	  "codeTitle": "Installing pytest with pip",
	  "codeDescription": "Command to install the latest version of pytest using pip. Requires Python 3.8+ or PyPy3.",
	  "codeLanguage": "bash",
	  "codeTokens": 38,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#2025-04-08_snippet_0",
	  "pageTitle": "Getting Started with pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.975
	},
	{
	  "codeTitle": "Mocking API Responses in Python with pytest",
	  "codeDescription": "This snippet shows how to mock the requests.get function to return a custom MockResponse object for testing API calls without making actual network requests.",
	  "codeLanguage": "python",
	  "codeTokens": 271,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#2025-04-08_snippet_1",
	  "pageTitle": "Monkeypatching and Mocking in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of test_app.py, a simple test for our API retrieval\n# import requests for the purposes of monkeypatching\nimport requests\n\n# our app.py that includes the get_json() function\n# this is the previous code block example\nimport app\n\n\n# custom class to be the mock return value\n# will override the requests.Response returned from requests.get\nclass MockResponse:\n    # mock json() method always returns a specific testing dictionary\n    @staticmethod\n    def json():\n        return {\"mock_key\": \"mock_response\"}\n\n\ndef test_get_json(monkeypatch):\n    # Any arguments may be passed and mock_get() will always return our\n    # mocked object, which only has the .json() method.\n    def mock_get(*args, **kwargs):\n        return MockResponse()\n\n    # apply the monkeypatch for requests.get to mock_get\n    monkeypatch.setattr(requests, \"get\", mock_get)\n\n    # app.get_json, which contains requests.get, uses the monkeypatch\n    result = app.get_json(\"https://fakeurl\")\n    assert result[\"mock_key\"] == \"mock_response\""
		}
	  ],
	  "relevance": 0.975
	},
	{
	  "codeTitle": "Setting log level for specific logger using caplog",
	  "codeDescription": "Shows how to set the log level for a specific logger using the caplog fixture in a test function.",
	  "codeLanguage": "python",
	  "codeTokens": 53,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#2025-04-08_snippet_6",
	  "pageTitle": "Managing Logging in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_foo(caplog):\n    caplog.set_level(logging.CRITICAL, logger=\"root.baz\")"
		}
	  ],
	  "relevance": 0.975
	},
	{
	  "codeTitle": "Global Patch to Prevent HTTP Requests in pytest",
	  "codeDescription": "This snippet shows how to create an autouse fixture that globally prevents the 'requests' library from performing HTTP requests in all tests.",
	  "codeLanguage": "python",
	  "codeTokens": 87,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#2025-04-08_snippet_3",
	  "pageTitle": "Monkeypatching and Mocking in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of conftest.py\nimport pytest\n\n\n@pytest.fixture(autouse=True)\ndef no_requests(monkeypatch):\n    \"\"\"Remove requests.sessions.Session.request for all tests.\"\"\"\n    monkeypatch.delattr(\"requests.sessions.Session.request\")"
		}
	  ],
	  "relevance": 0.973
	},
	{
	  "codeTitle": "Creating Custom Environment Markers in Pytest with Plugin",
	  "codeDescription": "A complete plugin implementation in conftest.py that adds a custom 'env' marker and a command-line option to control test execution based on named environments.",
	  "codeLanguage": "python",
	  "codeTokens": 193,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_12",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\n\nimport pytest\n\n\ndef pytest_addoption(parser):\n    parser.addoption(\n        \"-E\",\n        action=\"store\",\n        metavar=\"NAME\",\n        help=\"only run tests matching the environment NAME.\",\n    )\n\n\ndef pytest_configure(config):\n    # register an additional marker\n    config.addinivalue_line(\n        \"markers\", \"env(name): mark test to run only on named environment\"\n    )\n\n\ndef pytest_runtest_setup(item):\n    envnames = [mark.args[0] for mark in item.iter_markers(name=\"env\")]\n    if envnames:\n        if item.config.getoption(\"-E\") not in envnames:\n            pytest.skip(f\"test requires env in {envnames!r}\")"
		}
	  ],
	  "relevance": 0.97
	},
	{
	  "codeTitle": "Defining Custom Markers in pytest",
	  "codeDescription": "Allows listing additional markers to be used with strict marker checking. This is useful when using --strict-markers or --strict command-line arguments to ensure only known markers are used.",
	  "codeLanguage": "ini",
	  "codeTokens": 63,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_35",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\naddopts = --strict-markers\nmarkers =\n    slow\n    serial"
		}
	  ],
	  "relevance": 0.97
	},
	{
	  "codeTitle": "Testing for raised exceptions with pytest.raises",
	  "codeDescription": "Demonstrates how to test that a function raises a specific exception using pytest's raises helper, which creates a context manager for exception verification.",
	  "codeLanguage": "python",
	  "codeTokens": 74,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#2025-04-08_snippet_4",
	  "pageTitle": "Getting Started with pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_sysexit.py\nimport pytest\n\n\ndef f():\n    raise SystemExit(1)\n\n\ndef test_mytest():\n    with pytest.raises(SystemExit):\n        f()"
		}
	  ],
	  "relevance": 0.97
	},
	{
	  "codeTitle": "Monkeypatching a Function in Python with pytest",
	  "codeDescription": "This example demonstrates how to use monkeypatch.setattr to patch the Path.home function for testing purposes, removing dependency on the running user.",
	  "codeLanguage": "python",
	  "codeTokens": 199,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#2025-04-08_snippet_0",
	  "pageTitle": "Monkeypatching and Mocking in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of test_module.py with source code and the test\nfrom pathlib import Path\n\n\ndef getssh():\n    \"\"\"Simple function to return expanded homedir ssh path.\"\"\"\n    return Path.home() / \".ssh\"\n\n\ndef test_getssh(monkeypatch):\n    # mocked return function to replace Path.home\n    # always return '/abc'\n    def mockreturn():\n        return Path(\"/abc\")\n\n    # Application of the monkeypatch to replace Path.home\n    # with the behavior of mockreturn defined above.\n    monkeypatch.setattr(Path, \"home\", mockreturn)\n\n    # Calling getssh() will use mockreturn in place of Path.home\n    # for this test with the monkeypatch.\n    x = getssh()\n    assert x == Path(\"/abc/.ssh\")"
		}
	  ],
	  "relevance": 0.97
	},
	{
	  "codeTitle": "Platform-Specific Test Marking in pytest",
	  "codeDescription": "This snippet shows how to mark tests for specific platforms (darwin, linux, win32) and create a plugin that skips tests not meant for the current platform. It includes a conftest file with the plugin implementation and a test file with platform-specific tests.",
	  "codeLanguage": "python",
	  "codeTokens": 145,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_17",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\n#\nimport sys\n\nimport pytest\n\nALL = set(\"darwin linux win32\".split())\n\n\ndef pytest_runtest_setup(item):\n    supported_platforms = ALL.intersection(mark.name for mark in item.iter_markers())\n    plat = sys.platform\n    if supported_platforms and plat not in supported_platforms:\n        pytest.skip(f\"cannot run on platform {plat}\")"
		},
		{
		  "language": "python",
		  "code": "# content of test_plat.py\n\nimport pytest\n\n\n@pytest.mark.darwin\ndef test_if_apple_is_evil():\n    pass\n\n\n@pytest.mark.linux\ndef test_if_linux_works():\n    pass\n\n\n@pytest.mark.win32\ndef test_if_win32_crashes():\n    pass\n\n\ndef test_runs_everywhere():\n    pass"
		}
	  ],
	  "relevance": 0.97
	},
	{
	  "codeTitle": "Pytest Test Session Output",
	  "codeDescription": "Shows a complete test session output with multiple test failures demonstrating pytest's failure reporting capabilities including parametrized tests, assertion comparisons, and specialized explanations for different data types.",
	  "codeLanguage": "pytest",
	  "codeTokens": 208,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_0",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "assertion $ pytest failure_demo.py\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project/assertion\ncollected 44 items\n\nfailure_demo.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF         [100%]\n\n================================= FAILURES =================================\n___________________________ test_generative[3-6] ___________________________\n\nparam1 = 3, param2 = 6\n\n    @pytest.mark.parametrize(\"param1, param2\", [(3, 6)])\n    def test_generative(param1, param2):\n>       assert param1 * 2 < param2\nE       assert (3 * 2) < 6\n\nfailure_demo.py:21: AssertionError"
		}
	  ],
	  "relevance": 0.967
	},
	{
	  "codeTitle": "Pytest Configuration Options",
	  "codeDescription": "Core configuration options for pytest including path settings, timeout configurations, version requirements and plugin management. Each option controls different aspects of pytest's behavior during test execution.",
	  "codeLanguage": "plaintext",
	  "codeTokens": 120,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_53",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "plaintext",
		  "code": "pythonpath (paths):   Add paths to sys.path\nfaulthandler_timeout (string):\n                        Dump the traceback of all threads if a test takes\n                        more than TIMEOUT seconds to finish\naddopts (args):       Extra command line options\nminversion (string):  Minimally required pytest version\nrequired_plugins (args):\n                        Plugins that must be present for pytest to run"
		}
	  ],
	  "relevance": 0.965
	},
	{
	  "codeTitle": "Using temporary directory fixtures in pytest",
	  "codeDescription": "Example of using the built-in tmp_path fixture to request a unique temporary directory for a test. The fixture is automatically injected as a parameter to the test function.",
	  "codeLanguage": "python",
	  "codeTokens": 67,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#2025-04-08_snippet_10",
	  "pageTitle": "Getting Started with pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_tmp_path.py\ndef test_needsfiles(tmp_path):\n    print(tmp_path)\n    assert 0"
		}
	  ],
	  "relevance": 0.965
	},
	{
	  "codeTitle": "Matching Exception Messages with pytest.raises (Python)",
	  "codeDescription": "Shows how to use the match parameter to check the exception message against a regular expression.",
	  "codeLanguage": "python",
	  "codeTokens": 67,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#2025-04-08_snippet_5",
	  "pageTitle": "Writing and Reporting Assertions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n\ndef myfunc():\n    raise ValueError(\"Exception 123 raised\")\n\n\ndef test_match():\n    with pytest.raises(ValueError, match=r\".* 123 .*\"):\n        myfunc()"
		}
	  ],
	  "relevance": 0.965
	},
	{
	  "codeTitle": "Generating Parameter Combinations in pytest",
	  "codeDescription": "This snippet demonstrates how to generate test parameter combinations based on a command line argument in pytest. It uses pytest_addoption to add a custom option and pytest_generate_tests to parametrize the tests.",
	  "codeLanguage": "python",
	  "codeTokens": 70,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_0",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_compute.py\n\n\ndef test_compute(param1):\n    assert param1 < 4"
		},
		{
		  "language": "python",
		  "code": "# content of conftest.py\n\n\ndef pytest_addoption(parser):\n    parser.addoption(\"--all\", action=\"store_true\", help=\"run all combinations\")\n\n\ndef pytest_generate_tests(metafunc):\n    if \"param1\" in metafunc.fixturenames:\n        if metafunc.config.getoption(\"all\"):\n            end = 5\n        else:\n            end = 2\n        metafunc.parametrize(\"param1\", range(end))"
		}
	  ],
	  "relevance": 0.965
	},
	{
	  "codeTitle": "Running a Specific Parameterized Test with Pytest",
	  "codeDescription": "Command to run a specific parameterization of a test using square brackets to specify parameter values.",
	  "codeLanguage": "bash",
	  "codeTokens": 46,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_6",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest tests/test_mod.py::test_func[x1,y2]"
		}
	  ],
	  "relevance": 0.965
	},
	{
	  "codeTitle": "Marking Tests as Expected to Fail in Python",
	  "codeDescription": "Examples of using xfail marker to indicate tests expected to fail.",
	  "codeLanguage": "python",
	  "codeTokens": 37,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_9",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.xfail\ndef test_function(): ..."
		},
		{
		  "language": "python",
		  "code": "def test_function():\n    if not valid_config():\n        pytest.xfail(\"failing configuration (but should work)\")"
		},
		{
		  "language": "python",
		  "code": "def test_function2():\n    import slow_module\n\n    if slow_module.slow_function():\n        pytest.xfail(\"slow_module taking too long\")"
		}
	  ],
	  "relevance": 0.965
	},
	{
	  "codeTitle": "Running Basic Parametrized Tests in Pytest",
	  "codeDescription": "Shows the output when running a parametrized test with two parameters, where one test passes and one deliberately fails for demonstration purposes.",
	  "codeLanguage": "pytest",
	  "codeTokens": 186,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_4",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest -q test_backends.py\n.F                                                                   [100%]\n================================= FAILURES =================================\n_________________________ test_db_initialized[d2] __________________________\n\ndb = <conftest.DB2 object at 0xdeadbeef0001>\n\n    def test_db_initialized(db):\n        # a dummy test\n        if db.__class__.__name__ == \"DB2\":\n>           pytest.fail(\"deliberately failing for demo purposes\")\nE           Failed: deliberately failing for demo purposes\n\ntest_backends.py:8: Failed\n========================= short test summary info ==========================\nFAILED test_backends.py::test_db_initialized[d2] - Failed: deliberately f...\n1 failed, 1 passed in 0.12s"
		}
	  ],
	  "relevance": 0.964
	},
	{
	  "codeTitle": "Accessing Captured Output in Pytest Tests",
	  "codeDescription": "Example of how to access captured stdout/stderr output within a test function using the capsys fixture. This snippet demonstrates capturing print statements and assertions on the captured output.",
	  "codeLanguage": "python",
	  "codeTokens": 131,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-stdout-stderr.rst#2025-04-08_snippet_2",
	  "pageTitle": "Capturing stdout/stderr Output in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_myoutput(capsys):  # or use \"capfd\" for fd-level\n    print(\"hello\")\n    sys.stderr.write(\"world\\n\")\n    captured = capsys.readouterr()\n    assert captured.out == \"hello\\n\"\n    assert captured.err == \"world\\n\"\n    print(\"next\")\n    captured = capsys.readouterr()\n    assert captured.out == \"next\\n\""
		}
	  ],
	  "relevance": 0.961
	},
	{
	  "codeTitle": "Configuring pytest.ini to Change Test Naming Conventions",
	  "codeDescription": "Configuration example showing how to modify pytest's naming conventions to look for 'check' instead of 'test' in files, classes, and functions. This changes the patterns pytest uses to identify test modules and functions.",
	  "codeLanguage": "ini",
	  "codeTokens": 97,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#2025-04-08_snippet_1",
	  "pageTitle": "Pytest Test Discovery Configuration",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# content of pytest.ini\n# Example 1: have pytest look for \"check\" instead of \"test\"\n[pytest]\npython_files = check_*.py\npython_classes = Check\npython_functions = *_check"
		}
	  ],
	  "relevance": 0.96
	},
	{
	  "codeTitle": "Basic Warning Testing with pytest.warns",
	  "codeDescription": "Basic example showing how to test that a specific warning is raised using pytest.warns context manager.",
	  "codeLanguage": "python",
	  "codeTokens": 63,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_11",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import warnings\n\nimport pytest\n\n\ndef test_warning():\n    with pytest.warns(UserWarning):\n        warnings.warn(\"my warning\", UserWarning)"
		}
	  ],
	  "relevance": 0.96
	},
	{
	  "codeTitle": "Running a Specific Test Method with Pytest",
	  "codeDescription": "Command to run a specific test method within a test class using the nodeid format with double :: separators.",
	  "codeLanguage": "bash",
	  "codeTokens": 46,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_5",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest tests/test_mod.py::TestClass::test_method"
		}
	  ],
	  "relevance": 0.96
	},
	{
	  "codeTitle": "Demonstrating Automatic Warning Capture in Python Tests",
	  "codeDescription": "A simple example showing how pytest automatically captures warnings during test execution. The code defines a function that emits a UserWarning and a test that calls this function.",
	  "codeLanguage": "python",
	  "codeTokens": 98,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_0",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_show_warnings.py\nimport warnings\n\n\ndef api_v1():\n    warnings.warn(UserWarning(\"api v1, should use functions from v2\"))\n    return 1\n\n\ndef test_one():\n    assert api_v1() == 1"
		}
	  ],
	  "relevance": 0.958
	},
	{
	  "codeTitle": "Different Options for Test IDs in pytest",
	  "codeDescription": "This snippet shows various ways to specify test IDs for parametrized tests in pytest. It demonstrates using default IDs, custom string IDs, a function to generate IDs, and inline IDs with pytest.param.",
	  "codeLanguage": "python",
	  "codeTokens": 406,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_1",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_time.py\n\nfrom datetime import datetime, timedelta\n\nimport pytest\n\ntestdata = [\n    (datetime(2001, 12, 12), datetime(2001, 12, 11), timedelta(1)),\n    (datetime(2001, 12, 11), datetime(2001, 12, 12), timedelta(-1)),\n]\n\n\n@pytest.mark.parametrize(\"a,b,expected\", testdata)\ndef test_timedistance_v0(a, b, expected):\n    diff = a - b\n    assert diff == expected\n\n\n@pytest.mark.parametrize(\"a,b,expected\", testdata, ids=[\"forward\", \"backward\"])\ndef test_timedistance_v1(a, b, expected):\n    diff = a - b\n    assert diff == expected\n\n\ndef idfn(val):\n    if isinstance(val, (datetime,)):\n        # note this wouldn't show any hours/minutes/seconds\n        return val.strftime(\"%Y%m%d\")\n\n\n@pytest.mark.parametrize(\"a,b,expected\", testdata, ids=idfn)\ndef test_timedistance_v2(a, b, expected):\n    diff = a - b\n    assert diff == expected\n\n\n@pytest.mark.parametrize(\n    \"a,b,expected\",\n    [\n        pytest.param(\n            datetime(2001, 12, 12), datetime(2001, 12, 11), timedelta(1), id=\"forward\"\n        ),\n        pytest.param(\n            datetime(2001, 12, 11), datetime(2001, 12, 12), timedelta(-1), id=\"backward\"\n        ),\n    ],\n)\ndef test_timedistance_v3(a, b, expected):\n    diff = a - b\n    assert diff == expected"
		}
	  ],
	  "relevance": 0.958
	},
	{
	  "codeTitle": "Marking Test Functions with Custom Metadata in Python",
	  "codeDescription": "This snippet demonstrates how to apply custom markers to test functions in pytest. It shows examples of using @pytest.mark.webtest and @pytest.mark.device with parameters.",
	  "codeLanguage": "python",
	  "codeTokens": 121,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_0",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_server.py\n\nimport pytest\n\n\n@pytest.mark.webtest\ndef test_send_http():\n    pass  # perform some webtest test for your app\n\n\n@pytest.mark.device(serial=\"123\")\ndef test_something_quick():\n    pass\n\n\n@pytest.mark.device(serial=\"abc\")\ndef test_another():\n    pass\n\n\nclass TestClass:\n    def test_method(self):\n        pass"
		}
	  ],
	  "relevance": 0.955
	},
	{
	  "codeTitle": "Using pytest.RaisesGroup for Exception Groups (Python)",
	  "codeDescription": "Demonstrates asserting against exception groups using pytest.RaisesGroup.",
	  "codeLanguage": "python",
	  "codeTokens": 82,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#2025-04-08_snippet_6",
	  "pageTitle": "Writing and Reporting Assertions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_exception_in_group():\n    with pytest.RaisesGroup(ValueError):\n        raise ExceptionGroup(\"group msg\", [ValueError(\"value msg\")])\n    with pytest.RaisesGroup(ValueError, TypeError):\n        raise ExceptionGroup(\"msg\", [ValueError(\"foo\"), TypeError(\"bar\")])"
		}
	  ],
	  "relevance": 0.955
	},
	{
	  "codeTitle": "Recording and Analyzing Warnings",
	  "codeDescription": "Example showing how to record and analyze warning details using pytest.warns context manager.",
	  "codeLanguage": "python",
	  "codeTokens": 91,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_13",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "with pytest.warns(RuntimeWarning) as record:\n    warnings.warn(\"another warning\", RuntimeWarning)\n\n# check that only one warning was raised\nassert len(record) == 1\n# check that the message matches\nassert record[0].message.args[0] == \"another warning\""
		}
	  ],
	  "relevance": 0.955
	},
	{
	  "codeTitle": "Defining and Using pytest Fixtures in Python",
	  "codeDescription": "Demonstrates how to define pytest fixtures using the @pytest.fixture decorator and use them in test functions. The example shows fixtures for creating fruit objects and a fruit basket, which are then used in a test function.",
	  "codeLanguage": "python",
	  "codeTokens": 152,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/fixtures.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest Fixtures Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n\nclass Fruit:\n    def __init__(self, name):\n        self.name = name\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n\n@pytest.fixture\ndef my_fruit():\n    return Fruit(\"apple\")\n\n\n@pytest.fixture\ndef fruit_basket(my_fruit):\n    return [Fruit(\"banana\"), my_fruit]\n\n\ndef test_my_fruit_in_basket(my_fruit, fruit_basket):\n    assert my_fruit in fruit_basket"
		}
	  ],
	  "relevance": 0.955
	},
	{
	  "codeTitle": "Using PDB Debugger with pytest on Test Failures",
	  "codeDescription": "Command line options for dropping into the Python debugger (pdb) on test failures. The --pdb option invokes the debugger on every failure.",
	  "codeLanguage": "bash",
	  "codeTokens": 42,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/failures.rst#2025-04-08_snippet_1",
	  "pageTitle": "Handling Test Failures in pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --pdb"
		}
	  ],
	  "relevance": 0.955
	},
	{
	  "codeTitle": "Using Hooks in Fixtures",
	  "codeDescription": "Example of calling hooks from within a pytest fixture using the pytestconfig fixture.",
	  "codeLanguage": "python",
	  "codeTokens": 81,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#2025-04-08_snippet_5",
	  "pageTitle": "Writing Hook Functions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.fixture()\ndef my_fixture(pytestconfig):\n    # call the hook called \"pytest_my_hook\"\n    # 'result' will be a list of return values from all registered functions.\n    result = pytestconfig.hook.pytest_my_hook(config=pytestconfig)"
		}
	  ],
	  "relevance": 0.955
	},
	{
	  "codeTitle": "Capturing File Descriptor Output in Pytest (Python)",
	  "codeDescription": "This example shows how to use the capfd fixture to capture text output from file descriptors 1 and 2 in a test function.",
	  "codeLanguage": "python",
	  "codeTokens": 76,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#2025-04-08_snippet_2",
	  "pageTitle": "Pytest API and Builtin Fixtures Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_system_echo(capfd):\n    os.system('echo \"hello\"')\n    captured = capfd.readouterr()\n    assert captured.out == \"hello\\n\""
		}
	  ],
	  "relevance": 0.952
	},
	{
	  "codeTitle": "Creating a Fixture that Requires Another Fixture",
	  "codeDescription": "Demonstrates how to create a fixture that depends on another fixture by declaring the dependency as an argument. This example creates a db_session fixture that depends on tmp_path.",
	  "codeLanguage": "python",
	  "codeTokens": 68,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_7",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.fixture\ndef db_session(tmp_path):\n    fn = tmp_path / \"db.file\"\n    return connect(fn)"
		}
	  ],
	  "relevance": 0.95
	},
	{
	  "codeTitle": "Using recwarn Fixture",
	  "codeDescription": "Example demonstrating warning testing using the recwarn fixture which records warnings for an entire test function.",
	  "codeLanguage": "python",
	  "codeTokens": 101,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_15",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import warnings\n\n\ndef test_hello(recwarn):\n    warnings.warn(\"hello\", UserWarning)\n    assert len(recwarn) == 1\n    w = recwarn.pop(UserWarning)\n    assert issubclass(w.category, UserWarning)\n    assert str(w.message) == \"hello\"\n    assert w.filename\n    assert w.lineno"
		}
	  ],
	  "relevance": 0.95
	},
	{
	  "codeTitle": "Applying skip and xfail markers with parametrize in Python",
	  "codeDescription": "This code snippet demonstrates how to apply skip and xfail markers to individual test instances when using pytest's parametrize feature. It includes examples of xfail with and without reasons, and skipif with a condition.",
	  "codeLanguage": "python",
	  "codeTokens": 191,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_17",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import sys\n\nimport pytest\n\n\n@pytest.mark.parametrize(\n    (\"n\", \"expected\"),\n    [\n        (1, 2),\n        pytest.param(1, 0, marks=pytest.mark.xfail),\n        pytest.param(1, 3, marks=pytest.mark.xfail(reason=\"some bug\")),\n        (2, 3),\n        (3, 4),\n        (4, 5),\n        pytest.param(\n            10, 11, marks=pytest.mark.skipif(sys.version_info >= (3, 0), reason=\"py2k\")\n        ),\n    ],\n)\ndef test_increment(n, expected):\n    assert n + 1 == expected"
		}
	  ],
	  "relevance": 0.95
	},
	{
	  "codeTitle": "Simple pytest Example in Python",
	  "codeDescription": "A minimal example showing how to write a test with pytest. It demonstrates a simple increment function and a test that fails because the assertion is incorrect (expecting 5 instead of 4).",
	  "codeLanguage": "python",
	  "codeTokens": 81,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/README.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest: A Python Testing Framework",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_sample.py\ndef inc(x):\n    return x + 1\n\n\ndef test_answer():\n    assert inc(3) == 5"
		}
	  ],
	  "relevance": 0.95
	},
	{
	  "codeTitle": "Using Trace Option to Start Tests in Debugger",
	  "codeDescription": "Command line option for dropping into the Python debugger at the start of every test, enabling step-by-step debugging from the beginning of each test function.",
	  "codeLanguage": "bash",
	  "codeTokens": 44,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/failures.rst#2025-04-08_snippet_4",
	  "pageTitle": "Handling Test Failures in pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --trace"
		}
	  ],
	  "relevance": 0.95
	},
	{
	  "codeTitle": "Asserting a condition in Python",
	  "codeDescription": "An example of how to use an assert statement in a test to check if a condition is met. This snippet demonstrates checking if a variable 'thing' is equal to the string 'green'.",
	  "codeLanguage": "python",
	  "codeTokens": 56,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/anatomy.rst#2025-04-08_snippet_0",
	  "pageTitle": "Anatomy of a Test in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "assert thing == \"green\""
		}
	  ],
	  "relevance": 0.95
	},
	{
	  "codeTitle": "Defining a Class-scoped Fixture for unittest.TestCase (Python)",
	  "codeDescription": "Example of defining a pytest fixture function 'db_class' that sets a class-level 'db' attribute on the invoking test context. This fixture is scoped to the class level.",
	  "codeLanguage": "python",
	  "codeTokens": 89,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/unittest.rst#2025-04-08_snippet_1",
	  "pageTitle": "Running unittest-based Tests with pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n@pytest.fixture(scope=\"class\")\ndef db_class(request):\n    class DummyDB:\n        pass\n\n    # set a class attribute on the invoking test context\n    request.cls.db = DummyDB()"
		}
	  ],
	  "relevance": 0.946
	},
	{
	  "codeTitle": "Injecting Objects into Doctest Namespace",
	  "codeDescription": "Demonstrates how to use the doctest_namespace fixture to inject objects into the doctest namespace.",
	  "codeLanguage": "python",
	  "codeTokens": 69,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#2025-04-08_snippet_10",
	  "pageTitle": "Running Doctests with pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\nimport pytest\nimport numpy\n\n\n@pytest.fixture(autouse=True)\ndef add_np(doctest_namespace):\n    doctest_namespace[\"np\"] = numpy"
		}
	  ],
	  "relevance": 0.945
	},
	{
	  "codeTitle": "Dictionary Monkeypatching Test Example",
	  "codeDescription": "Shows how to test dictionary-based configuration using monkeypatch.setitem to modify dictionary values.",
	  "codeLanguage": "python",
	  "codeTokens": 161,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#2025-04-08_snippet_9",
	  "pageTitle": "Monkeypatching and Mocking in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of test_app.py\n# app.py with the connection string function (prior code block)\nimport app\n\n\ndef test_connection(monkeypatch):\n    # Patch the values of DEFAULT_CONFIG to specific\n    # testing values only for this test.\n    monkeypatch.setitem(app.DEFAULT_CONFIG, \"user\", \"test_user\")\n    monkeypatch.setitem(app.DEFAULT_CONFIG, \"database\", \"test_db\")\n\n    # expected result based on the mocks\n    expected = \"User Id=test_user; Location=test_db;\"\n\n    # the test uses the monkeypatched dictionary settings\n    result = app.create_connection_string()\n    assert result == expected"
		}
	  ],
	  "relevance": 0.945
	},
	{
	  "codeTitle": "Using Third-Party Plugin Fixtures in Pytest",
	  "codeDescription": "Example demonstrating how fixtures from third-party plugins are integrated with local fixtures. Shows the search order for fixtures across different scopes including plugins.",
	  "codeLanguage": "python",
	  "codeTokens": 58,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#2025-04-08_snippet_1",
	  "pageTitle": "Pytest Fixtures Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of tests/conftest.py\nimport pytest\n\n@pytest.fixture\ndef order():\n    return []"
		},
		{
		  "language": "python",
		  "code": "# content of tests/subpackage/conftest.py\nimport pytest\n\n@pytest.fixture(autouse=True)\ndef mid(order, b_fix):\n    order.append(\"mid subpackage\")"
		},
		{
		  "language": "python",
		  "code": "# content of tests/subpackage/test_subpackage.py\nimport pytest\n\n@pytest.fixture\ndef inner(order, mid, a_fix):\n    order.append(\"inner subpackage\")\n\ndef test_order(order, inner):\n    assert order == [\"b_fix\", \"mid subpackage\", \"a_fix\", \"inner subpackage\"]"
		}
	  ],
	  "relevance": 0.945
	},
	{
	  "codeTitle": "Running XFail Tests in pytest",
	  "codeDescription": "Command to run pytest including tests marked as xfail.",
	  "codeLanguage": "bash",
	  "codeTokens": 29,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_15",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --runxfail"
		}
	  ],
	  "relevance": 0.945
	},
	{
	  "codeTitle": "Disabling pytest Plugin Autoloading Using Environment Variables",
	  "codeDescription": "Commands to disable plugin autoloading using environment variables. This allows you to specify exactly which plugins to load while preventing automatic loading of other plugins.",
	  "codeLanguage": "bash",
	  "codeTokens": 62,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/plugins.rst#2025-04-08_snippet_5",
	  "pageTitle": "Installing and Using pytest Plugins",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "export PYTEST_DISABLE_PLUGIN_AUTOLOAD=1\nexport PYTEST_PLUGINS=NAME,NAME2\npytest"
		}
	  ],
	  "relevance": 0.945
	},
	{
	  "codeTitle": "Creating Test Suite for Profiling in Python",
	  "codeDescription": "Shows how to create a simple test suite with artificial delays for profiling test duration using pytest.",
	  "codeLanguage": "python",
	  "codeTokens": 83,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_15",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_some_are_slow.py\nimport time\n\n\ndef test_funcfast():\n    time.sleep(0.1)\n\n\ndef test_funcslow1():\n    time.sleep(0.2)\n\n\ndef test_funcslow2():\n    time.sleep(0.3)"
		}
	  ],
	  "relevance": 0.943
	},
	{
	  "codeTitle": "Creating and Testing Temporary Files with tmp_path in Python",
	  "codeDescription": "Example demonstrating how to create and verify temporary directories and files using the tmp_path fixture in Pytest. Shows file creation, writing content, and directory verification.",
	  "codeLanguage": "python",
	  "codeTokens": 129,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/tmp_path.rst#2025-04-08_snippet_0",
	  "pageTitle": "Temporary Directory Management in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_tmp_path.py\nCONTENT = \"content\"\n\n\ndef test_create_file(tmp_path):\n    d = tmp_path / \"sub\"\n    d.mkdir()\n    p = d / \"hello.txt\"\n    p.write_text(CONTENT, encoding=\"utf-8\")\n    assert p.read_text(encoding=\"utf-8\") == CONTENT\n    assert len(list(tmp_path.iterdir())) == 1\n    assert 0"
		}
	  ],
	  "relevance": 0.94
	},
	{
	  "codeTitle": "Using Fixtures in Doctests",
	  "codeDescription": "Shows how to use pytest fixtures within a doctest using the getfixture helper.",
	  "codeLanguage": "text",
	  "codeTokens": 47,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#2025-04-08_snippet_9",
	  "pageTitle": "Running Doctests with pytest",
	  "codeList": [
		{
		  "language": "text",
		  "code": "# content of example.rst\n>>> tmp = getfixture('tmp_path')\n>>> ...\n>>>"
		}
	  ],
	  "relevance": 0.94
	},
	{
	  "codeTitle": "Class-level Test Parametrization in Pytest",
	  "codeDescription": "Shows how to apply parametrization at the class level to affect multiple test methods.",
	  "codeLanguage": "python",
	  "codeTokens": 103,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/parametrize.rst#2025-04-08_snippet_2",
	  "pageTitle": "Pytest Test Parametrization Guide",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n@pytest.mark.parametrize(\"n,expected\", [(1, 2), (3, 4)])\nclass TestClass:\n    def test_simple_case(self, n, expected):\n        assert n + 1 == expected\n\n    def test_weird_simple_case(self, n, expected):\n        assert (n * 1) + 1 == expected"
		}
	  ],
	  "relevance": 0.94
	},
	{
	  "codeTitle": "Environment Variable Monkeypatch Test Examples",
	  "codeDescription": "Demonstrates testing both successful and error cases for environment variable access using monkeypatch's setenv and delenv methods.",
	  "codeLanguage": "python",
	  "codeTokens": 145,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#2025-04-08_snippet_6",
	  "pageTitle": "Monkeypatching and Mocking in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of our test file e.g. test_code.py\nimport pytest\n\n\ndef test_upper_to_lower(monkeypatch):\n    \"\"\"Set the USER env var to assert the behavior.\"\"\"\n    monkeypatch.setenv(\"USER\", \"TestingUser\")\n    assert get_os_user_lower() == \"testinguser\"\n\n\ndef test_raise_exception(monkeypatch):\n    \"\"\"Remove the USER env var and assert OSError is raised.\"\"\"\n    monkeypatch.delenv(\"USER\", raising=False)\n\n    with pytest.raises(OSError):\n        _ = get_os_user_lower()"
		}
	  ],
	  "relevance": 0.94
	},
	{
	  "codeTitle": "Skipping All Tests in a Module in Python",
	  "codeDescription": "Example of using pytestmark to skip all tests in a module.",
	  "codeLanguage": "python",
	  "codeTokens": 39,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_7",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# test_module.py\npytestmark = pytest.mark.skipif(...)"
		}
	  ],
	  "relevance": 0.94
	},
	{
	  "codeTitle": "Verbose pytest Output Example",
	  "codeDescription": "Example of pytest output with increased verbosity (-v flag), showing more detailed failure information including fuller diffs and less truncation of output. Tests are now individually listed with their status.",
	  "codeLanguage": "pytest",
	  "codeTokens": 719,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_4",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest --no-header -v\n=========================== test session starts ============================\ncollecting ... collected 4 items\n\ntest_verbosity_example.py::test_ok PASSED                            [ 25%]\ntest_verbosity_example.py::test_words_fail FAILED                    [ 50%]\ntest_verbosity_example.py::test_numbers_fail FAILED                  [ 75%]\ntest_verbosity_example.py::test_long_text_fail FAILED                [100%]\n\n================================= FAILURES =================================\n_____________________________ test_words_fail ______________________________\n\n    def test_words_fail():\n        fruits1 = [\"banana\", \"apple\", \"grapes\", \"melon\", \"kiwi\"]\n        fruits2 = [\"banana\", \"apple\", \"orange\", \"melon\", \"kiwi\"]\n>       assert fruits1 == fruits2\nE       AssertionError: assert ['banana', 'a...elon', 'kiwi'] == ['banana', 'a...elon', 'kiwi']\nE\nE         At index 2 diff: 'grapes' != 'orange'\nE\nE         Full diff:\nE           [\nE               'banana',\nE               'apple',...\nE\nE         ...Full output truncated (7 lines hidden), use '-vv' to show\n\ntest_verbosity_example.py:8: AssertionError\n____________________________ test_numbers_fail _____________________________\n\n    def test_numbers_fail():\n        number_to_text1 = {str(x): x for x in range(5)}\n        number_to_text2 = {str(x * 10): x * 10 for x in range(5)}\n>       assert number_to_text1 == number_to_text2\nE       AssertionError: assert {'0': 0, '1':..., '3': 3, ...} == {'0': 0, '10'...'30': 30, ...}\nE\nE         Omitting 1 identical items, use -vv to show\nE         Left contains 4 more items:\nE         {'1': 1, '2': 2, '3': 3, '4': 4}\nE         Right contains 4 more items:\nE         {'10': 10, '20': 20, '30': 30, '40': 40}\nE         ...\nE\nE         ...Full output truncated (16 lines hidden), use '-vv' to show\n\ntest_verbosity_example.py:14: AssertionError\n___________________________ test_long_text_fail ____________________________\n\n    def test_long_text_fail():\n        long_text = \"Lorem ipsum dolor sit amet \" * 10\n>       assert \"hello world\" in long_text\nE       AssertionError: assert 'hello world' in 'Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet '\n\ntest_verbosity_example.py:19: AssertionError\n========================= short test summary info ==========================\nFAILED test_verbosity_example.py::test_words_fail - AssertionError: asser...\nFAILED test_verbosity_example.py::test_numbers_fail - AssertionError: ass...\nFAILED test_verbosity_example.py::test_long_text_fail - AssertionError: a...\n======================= 3 failed, 1 passed in 0.12s ========================"
		}
	  ],
	  "relevance": 0.94
	},
	{
	  "codeTitle": "Demonstrating test isolation in pytest classes",
	  "codeDescription": "Example showing how pytest creates a new instance of the test class for each test method, ensuring test isolation. Class attributes are shared between tests while instance attributes are not.",
	  "codeLanguage": "python",
	  "codeTokens": 97,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#2025-04-08_snippet_8",
	  "pageTitle": "Getting Started with pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_class_demo.py\nclass TestClassDemoInstance:\n    value = 0\n\n    def test_one(self):\n        self.value = 1\n        assert self.value == 1\n\n    def test_two(self):\n        assert self.value == 1"
		}
	  ],
	  "relevance": 0.937
	},
	{
	  "codeTitle": "Accessing logs from different test phases in pytest",
	  "codeDescription": "Shows how to access logs from different test phases (setup, call, teardown) using the caplog fixture in a test function.",
	  "codeLanguage": "python",
	  "codeTokens": 110,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#2025-04-08_snippet_12",
	  "pageTitle": "Managing Logging in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.fixture\ndef window(caplog):\n    window = create_window()\n    yield window\n    for when in (\"setup\", \"call\"):\n        messages = [\n            x.message for x in caplog.get_records(when) if x.levelno == logging.WARNING\n        ]\n        if messages:\n            pytest.fail(f\"warning messages encountered during testing: {messages}\")"
		}
	  ],
	  "relevance": 0.937
	},
	{
	  "codeTitle": "Demonstrating Fixture Requests Across Different Scopes in Pytest",
	  "codeDescription": "Example pytest file showing how fixtures can request other fixtures from different scopes. This demonstrates that a fixture (outer) can request another fixture (inner) even if it's defined in a scope the requesting fixture wasn't defined in.",
	  "codeLanguage": "python",
	  "codeTokens": 93,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest Fixtures Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of tests/conftest.py\nimport pytest\n\n@pytest.fixture\ndef order():\n    return []\n\n@pytest.fixture\ndef top(order, innermost):\n    order.append(\"top\")"
		},
		{
		  "language": "python",
		  "code": "# content of tests/test_top.py\nimport pytest\n\n@pytest.fixture\ndef innermost(order):\n    order.append(\"innermost top\")\n\ndef test_order(order, top):\n    assert order == [\"innermost top\", \"top\"]"
		},
		{
		  "language": "python",
		  "code": "# content of tests/subpackage/conftest.py\nimport pytest\n\n@pytest.fixture\ndef mid(order):\n    order.append(\"mid subpackage\")"
		},
		{
		  "language": "python",
		  "code": "# content of tests/subpackage/test_subpackage.py\nimport pytest\n\n@pytest.fixture\ndef innermost(order, mid):\n    order.append(\"innermost subpackage\")\n\ndef test_order(order, top):\n    assert order == [\"mid subpackage\", \"innermost subpackage\", \"top\"]"
		}
	  ],
	  "relevance": 0.935
	},
	{
	  "codeTitle": "Parametrization with Expected Failures in Pytest",
	  "codeDescription": "Shows how to mark specific parameter sets as expected to fail using pytest.mark.xfail.",
	  "codeLanguage": "python",
	  "codeTokens": 103,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/parametrize.rst#2025-04-08_snippet_4",
	  "pageTitle": "Pytest Test Parametrization Guide",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_expectation.py\nimport pytest\n\n@pytest.mark.parametrize(\n    \"test_input,expected\",\n    [(\"3+5\", 8), (\"2+4\", 6), pytest.param(\"6*9\", 42, marks=pytest.mark.xfail)],\n)\ndef test_eval(test_input, expected):\n    assert eval(test_input) == expected"
		}
	  ],
	  "relevance": 0.935
	},
	{
	  "codeTitle": "Generating JUnitXML reports with pytest",
	  "codeDescription": "Command to create XML result files in JUnit format for use with CI servers like Jenkins. The files are written to the specified path.",
	  "codeLanguage": "bash",
	  "codeTokens": 44,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_12",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --junit-xml=path"
		}
	  ],
	  "relevance": 0.935
	},
	{
	  "codeTitle": "Implementing Indirect Parametrization in Pytest",
	  "codeDescription": "Demonstrates how to use the indirect=True parameter to pass values to a fixture before they reach the test. This allows for more expensive setup at test runtime rather than collection time.",
	  "codeLanguage": "python",
	  "codeTokens": 100,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_5",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n\n@pytest.fixture\ndef fixt(request):\n    return request.param * 3\n\n\n@pytest.mark.parametrize(\"fixt\", [\"a\", \"b\"], indirect=True)\ndef test_indirect(fixt):\n    assert len(fixt) == 3"
		}
	  ],
	  "relevance": 0.935
	},
	{
	  "codeTitle": "Testing Dictionary Equality with pytest",
	  "codeDescription": "A test function that compares two dictionaries with different construction patterns, showing how pytest displays common items and differences between dictionaries.",
	  "codeLanguage": "python",
	  "codeTokens": 91,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_6",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_numbers_fail():\n    number_to_text1 = {str(x): x for x in range(5)}\n    number_to_text2 = {str(x * 10): x * 10 for x in range(5)}\n    assert number_to_text1 == number_to_text2"
		}
	  ],
	  "relevance": 0.934
	},
	{
	  "codeTitle": "Post-Processing Test Reports Using pytest Hooks",
	  "codeDescription": "Implements a pytest hook to post-process test reports. This example writes information about failing tests to a file, including the fixture state if available. The hook uses the pytest_runtest_makereport hook with a wrapper to access the report object.",
	  "codeLanguage": "python",
	  "codeTokens": 243,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_24",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\n\nimport os.path\n\nimport pytest\n\n\n@pytest.hookimpl(wrapper=True, tryfirst=True)\ndef pytest_runtest_makereport(item, call):\n    # execute all other hooks to obtain the report object\n    rep = yield\n\n    # we only look at actual failing test calls, not setup/teardown\n    if rep.when == \"call\" and rep.failed:\n        mode = \"a\" if os.path.exists(\"failures\") else \"w\"\n        with open(\"failures\", mode, encoding=\"utf-8\") as f:\n            # let's also access a fixture for the fun of it\n            if \"tmp_path\" in item.fixturenames:\n                extra = \" ({})\".format(item.funcargs[\"tmp_path\"])\n            else:\n                extra = \"\"\n\n            f.write(rep.nodeid + extra + \"\\n\")\n\n    return rep"
		}
	  ],
	  "relevance": 0.934
	},
	{
	  "codeTitle": "Using Incremental Testing in Python with pytest",
	  "codeDescription": "Demonstrates how to use the incremental marker in a test module to create a sequence of dependent tests that will be skipped if a previous test fails.",
	  "codeLanguage": "python",
	  "codeTokens": 98,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_18",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_step.py\n\nimport pytest\n\n\n@pytest.mark.incremental\nclass TestUserHandling:\n    def test_login(self):\n        pass\n\n    def test_modification(self):\n        assert 0\n\n    def test_deletion(self):\n        pass\n\n\ndef test_normal():\n    pass"
		}
	  ],
	  "relevance": 0.932
	},
	{
	  "codeTitle": "Using the DB Fixture in Test Module A1",
	  "codeDescription": "A test module that uses the package-scoped DB fixture defined in the conftest.py file. The fixture is accessible because the test module is in the same directory as the conftest.py file.",
	  "codeLanguage": "python",
	  "codeTokens": 78,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_21",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of a/test_db.py\ndef test_a1(db):\n    assert 0, db  # to show value"
		}
	  ],
	  "relevance": 0.931
	},
	{
	  "codeTitle": "Implementing Session-scoped Fixture in PyTest",
	  "codeDescription": "Creates a session-scoped fixture that automatically runs before all tests and calls the 'callme' method on test classes if it exists. The fixture walks through all collected test items and tracks which classes have been processed to avoid duplicate calls.",
	  "codeLanguage": "python",
	  "codeTokens": 161,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/special.rst#2025-04-08_snippet_0",
	  "pageTitle": "Session-scoped Fixture Example in PyTest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\n\nimport pytest\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef callattr_ahead_of_alltests(request):\n    print(\"callattr_ahead_of_alltests called\")\n    seen = {None}\n    session = request.node\n    for item in session.items:\n        cls = item.getparent(pytest.Class)\n        if cls not in seen:\n            if hasattr(cls.obj, \"callme\"):\n                cls.obj.callme()\n            seen.add(cls)"
		}
	  ],
	  "relevance": 0.93
	},
	{
	  "codeTitle": "Multiple Parametrize Decorators in Pytest",
	  "codeDescription": "Demonstrates how to stack multiple parametrize decorators to get all combinations of parameters.",
	  "codeLanguage": "python",
	  "codeTokens": 66,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/parametrize.rst#2025-04-08_snippet_5",
	  "pageTitle": "Pytest Test Parametrization Guide",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n@pytest.mark.parametrize(\"x\", [0, 1])\n@pytest.mark.parametrize(\"y\", [2, 3])\ndef test_foo(x, y):\n    pass"
		}
	  ],
	  "relevance": 0.93
	},
	{
	  "codeTitle": "Session-scoped Temporary File Management with tmp_path_factory",
	  "codeDescription": "Example showing how to use tmp_path_factory for creating session-scoped temporary directories and files, useful for sharing expensive resources across multiple tests.",
	  "codeLanguage": "python",
	  "codeTokens": 123,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/tmp_path.rst#2025-04-08_snippet_1",
	  "pageTitle": "Temporary Directory Management in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of conftest.py\nimport pytest\n\n\n@pytest.fixture(scope=\"session\")\ndef image_file(tmp_path_factory):\n    img = compute_expensive_image()\n    fn = tmp_path_factory.mktemp(\"data\") / \"img.png\"\n    img.save(fn)\n    return fn\n\n\n# contents of test_image.py\ndef test_histogram(image_file):\n    img = load_image(image_file)\n    # compute and test histogram"
		}
	  ],
	  "relevance": 0.93
	},
	{
	  "codeTitle": "Requiring Plugins in Test Module or Conftest File",
	  "codeDescription": "Example of requiring plugins in a test module or conftest file using pytest_plugins variable. Note that requiring plugins in non-root conftest.py files is deprecated.",
	  "codeLanguage": "python",
	  "codeTokens": 56,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/plugins.rst#2025-04-08_snippet_1",
	  "pageTitle": "Installing and Using pytest Plugins",
	  "codeList": [
		{
		  "language": "python",
		  "code": "pytest_plugins = (\"myapp.testsupport.myplugin\",)"
		}
	  ],
	  "relevance": 0.93
	},
	{
	  "codeTitle": "Registering Custom Markers in pyproject.toml",
	  "codeDescription": "This snippet shows how to register custom markers in the pyproject.toml file. It defines the same two markers as in the pytest.ini example: 'slow' and 'serial'.",
	  "codeLanguage": "toml",
	  "codeTokens": 85,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/mark.rst#2025-04-08_snippet_1",
	  "pageTitle": "Marking Test Functions with Attributes in pytest",
	  "codeList": [
		{
		  "language": "toml",
		  "code": "[tool.pytest.ini_options]\nmarkers = [\n    \"slow: marks tests as slow (deselect with '-m \\\"not slow\\\"')\",\n    \"serial\",\n]"
		}
	  ],
	  "relevance": 0.93
	},
	{
	  "codeTitle": "Executing pytest with Custom Directory Collection",
	  "codeDescription": "This command-line snippet demonstrates how to run pytest with the custom directory collection implementation. It shows the output of running the tests specified in the manifest.json file.",
	  "codeLanguage": "Shell",
	  "codeTokens": 133,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/customdirectory.rst#2025-04-08_snippet_3",
	  "pageTitle": "Custom Directory Collection in pytest",
	  "codeList": [
		{
		  "language": "Shell",
		  "code": "customdirectory $ pytest\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project/customdirectory\nconfigfile: pytest.ini\ncollected 2 items\n\ntests/test_first.py .                                                [ 50%]\ntests/test_second.py .                                               [100%]\n\n============================ 2 passed in 0.12s ============================="
		}
	  ],
	  "relevance": 0.928
	},
	{
	  "codeTitle": "Defining pytest Fixtures, Tests and Special Test Cases",
	  "codeDescription": "A comprehensive example showing various pytest features including fixtures, passing tests, failing tests, errors, skipped tests, and expected failures (xfail/xpass).",
	  "codeLanguage": "python",
	  "codeTokens": 134,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_8",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_example.py\nimport pytest\n\n\n@pytest.fixture\ndef error_fixture():\n    assert 0\n\n\ndef test_ok():\n    print(\"ok\")\n\n\ndef test_fail():\n    assert 0\n\n\ndef test_error(error_fixture):\n    pass\n\n\ndef test_skip():\n    pytest.skip(\"skipping this test\")\n\n\ndef test_xfail():\n    pytest.xfail(\"xfailing this test\")\n\n\n@pytest.mark.xfail(reason=\"always xfail\")\ndef test_xpass():\n    pass"
		}
	  ],
	  "relevance": 0.925
	},
	{
	  "codeTitle": "Example Copy Test Configuration",
	  "codeDescription": "Configuration for copying test examples using pytester, including pytest.ini setup and test example implementation",
	  "codeLanguage": "python",
	  "codeTokens": 45,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#2025-04-08_snippet_5",
	  "pageTitle": "Writing and Testing Pytest Plugins Documentation",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# content of pytest.ini\n[pytest]\npytester_example_dir = ."
		},
		{
		  "language": "python",
		  "code": "# content of test_example.py\n\n\ndef test_plugin(pytester):\n    pytester.copy_example(\"test_example.py\")\n    pytester.runpytest(\"-k\", \"test_example\")\n\n\ndef test_example():\n    pass"
		}
	  ],
	  "relevance": 0.925
	},
	{
	  "codeTitle": "Using pytest.raises for Exception Assertions (Python)",
	  "codeDescription": "Demonstrates using pytest.raises as a context manager to assert that a specific exception is raised.",
	  "codeLanguage": "python",
	  "codeTokens": 54,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#2025-04-08_snippet_2",
	  "pageTitle": "Writing and Reporting Assertions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n\ndef test_zero_division():\n    with pytest.raises(ZeroDivisionError):\n        1 / 0"
		}
	  ],
	  "relevance": 0.925
	},
	{
	  "codeTitle": "Deferring Setup of Parametrized Resources in pytest",
	  "codeDescription": "This snippet shows how to defer the setup of expensive resources in parametrized tests. It uses indirect parametrization to create database objects only when the actual test is run.",
	  "codeLanguage": "python",
	  "codeTokens": 95,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_3",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_backends.py\n\nimport pytest\n\n\ndef test_db_initialized(db):\n    # a dummy test\n    if db.__class__.__name__ == \"DB2\":\n        pytest.fail(\"deliberately failing for demo purposes\")"
		},
		{
		  "language": "python",
		  "code": "# content of conftest.py\nimport pytest\n\n\ndef pytest_generate_tests(metafunc):\n    if \"db\" in metafunc.fixturenames:\n        metafunc.parametrize(\"db\", [\"d1\", \"d2\"], indirect=True)\n\n\nclass DB1:\n    \"one database object\"\n\n\nclass DB2:\n    \"alternative database object\"\n\n\n@pytest.fixture\ndef db(request):\n    if request.param == \"d1\":\n        return DB1()\n    elif request.param == \"d2\":\n        return DB2()\n    else:\n        raise ValueError(\"invalid internal test config\")"
		}
	  ],
	  "relevance": 0.925
	},
	{
	  "codeTitle": "Testing Autouse Fixtures Across Multiple Scopes",
	  "codeDescription": "Demonstrates how autouse fixtures affect tests across different scopes and classes, even when not explicitly requested.",
	  "codeLanguage": "python",
	  "codeTokens": 88,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#2025-04-08_snippet_5",
	  "pageTitle": "Pytest Fixtures Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.fixture\ndef c2():\n    pass\n\nclass TestClassWithoutC1Request:\n    @pytest.fixture(autouse=True)\n    def c1(self, c2):\n        pass\n\n    def test1(self):\n        pass\n\n    def test2(self):\n        pass"
		}
	  ],
	  "relevance": 0.925
	},
	{
	  "codeTitle": "Combining PDB with Test Execution Control Options",
	  "codeDescription": "Command line examples showing how to combine the Python debugger with options to control test execution flow, such as stopping after the first failure or after a specific number of failures.",
	  "codeLanguage": "bash",
	  "codeTokens": 83,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/failures.rst#2025-04-08_snippet_2",
	  "pageTitle": "Handling Test Failures in pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest -x --pdb   # drop to PDB on first failure, then end test session\npytest --pdb --maxfail=3  # drop to PDB for first three failures"
		}
	  ],
	  "relevance": 0.925
	},
	{
	  "codeTitle": "Using Injected Namespace in Doctests",
	  "codeDescription": "Shows how to use objects injected into the doctest namespace within a doctest.",
	  "codeLanguage": "python",
	  "codeTokens": 60,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#2025-04-08_snippet_11",
	  "pageTitle": "Running Doctests with pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of numpy.py\ndef arange():\n    \"\"\"\n    >>> a = np.arange(10)\n    >>> len(a)\n    10\n    \"\"\""
		}
	  ],
	  "relevance": 0.925
	},
	{
	  "codeTitle": "Calling Pytest from Python Code",
	  "codeDescription": "Example of invoking pytest programmatically from Python code using pytest.main(), which returns the exit code instead of raising SystemExit.",
	  "codeLanguage": "python",
	  "codeTokens": 45,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_14",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "python",
		  "code": "retcode = pytest.main()"
		}
	  ],
	  "relevance": 0.925
	},
	{
	  "codeTitle": "Using Multiple Custom Marks",
	  "codeDescription": "Demonstrates how to apply multiple custom marks to a single test function. The marks will be processed in reverse order of application when accessed with iter_markers.",
	  "codeLanguage": "python",
	  "codeTokens": 64,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_5",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.timeout(10, \"slow\", method=\"thread\")\n@pytest.mark.slow\ndef test_function(): ..."
		}
	  ],
	  "relevance": 0.922
	},
	{
	  "codeTitle": "Selecting Tests by Node ID in pytest",
	  "codeDescription": "These examples demonstrate how to select and run specific tests or test classes using their node IDs in pytest. It shows various ways to specify test functions or classes.",
	  "codeLanguage": "pytest",
	  "codeTokens": 56,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_4",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest -v test_server.py::TestClass::test_method"
		},
		{
		  "language": "pytest",
		  "code": "$ pytest -v test_server.py::TestClass"
		},
		{
		  "language": "pytest",
		  "code": "$ pytest -v test_server.py::TestClass test_server.py::test_send_http"
		}
	  ],
	  "relevance": 0.92
	},
	{
	  "codeTitle": "Asserting on log records in pytest",
	  "codeDescription": "Demonstrates how to assert on the contents of log messages using the caplog fixture in a test function.",
	  "codeLanguage": "python",
	  "codeTokens": 72,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#2025-04-08_snippet_9",
	  "pageTitle": "Managing Logging in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_baz(caplog):\n    func_under_test()\n    for record in caplog.records:\n        assert record.levelname != \"CRITICAL\"\n    assert \"wally\" not in caplog.text"
		}
	  ],
	  "relevance": 0.92
	},
	{
	  "codeTitle": "Testing Optional Implementations with Parametrized Imports in Pytest",
	  "codeDescription": "Shows how to compare different implementations of an API by using fixtures to import modules, with tests being skipped if a module is not available.",
	  "codeLanguage": "python",
	  "codeTokens": 100,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_10",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\n\nimport pytest\n\n\n@pytest.fixture(scope=\"session\")\ndef basemod(request):\n    return pytest.importorskip(\"base\")\n\n\n@pytest.fixture(scope=\"session\", params=[\"opt1\", \"opt2\"])\ndef optmod(request):\n    return pytest.importorskip(request.param)"
		}
	  ],
	  "relevance": 0.92
	},
	{
	  "codeTitle": "Implementing Module-Level Setup and Teardown in pytest",
	  "codeDescription": "Code example showing how to implement setup_module and teardown_module functions that are called once for all test functions in a module. The module parameter is optional as of pytest-3.0.",
	  "codeLanguage": "python",
	  "codeTokens": 98,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/xunit_setup.rst#2025-04-08_snippet_0",
	  "pageTitle": "XUnit-Style Setup and Teardown in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def setup_module(module):\n    \"\"\"setup any state specific to the execution of the given module.\"\"\"\n\n\ndef teardown_module(module):\n    \"\"\"teardown any state that was previously setup with a setup_module\n    method.\n    \"\"\""
		}
	  ],
	  "relevance": 0.92
	},
	{
	  "codeTitle": "Using Inline Doctest Options",
	  "codeDescription": "Demonstrates how to use inline comments to enable doctest options for specific tests.",
	  "codeLanguage": "rst",
	  "codeTokens": 55,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#2025-04-08_snippet_8",
	  "pageTitle": "Running Doctests with pytest",
	  "codeList": [
		{
		  "language": "rst",
		  "code": ">>> something_that_raises()  # doctest: +IGNORE_EXCEPTION_DETAIL\nTraceback (most recent call last):\nValueError: ..."
		}
	  ],
	  "relevance": 0.92
	},
	{
	  "codeTitle": "Demonstrating pytest.approx Issue with Boolean Types in Python",
	  "codeDescription": "This code snippet shows the incorrect behavior of pytest.approx when comparing bool and numpy.bool_ types in versions 8.3.4 and 8.3.5.",
	  "codeLanguage": "python",
	  "codeTokens": 81,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/changelog/13047.bugfix.rst#2025-04-08_snippet_0",
	  "pageTitle": "Restoring pytest.approx Equality Handling for Boolean Types",
	  "codeList": [
		{
		  "language": "python",
		  "code": ">>> import numpy as np\n>>> from pytest import approx\n>>> [np.True_, np.True_] == pytest.approx([True, True])\nFalse"
		}
	  ],
	  "relevance": 0.92
	},
	{
	  "codeTitle": "Implementing Hook Wrapper in pytest",
	  "codeDescription": "Example of a hook wrapper implementation that can execute code before and after other hook implementations. Shows how to use the yield statement to control execution flow.",
	  "codeLanguage": "python",
	  "codeTokens": 112,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#2025-04-08_snippet_1",
	  "pageTitle": "Writing Hook Functions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n@pytest.hookimpl(wrapper=True)\ndef pytest_pyfunc_call(pyfuncitem):\n    do_something_before_next_hook_executes()\n\n    # If the outcome is an exception, will raise the exception.\n    res = yield\n\n    new_res = post_process_result(res)\n\n    # Override the return value to the plugin system.\n    return new_res"
		}
	  ],
	  "relevance": 0.919
	},
	{
	  "codeTitle": "Using Custom Marks with Parameters",
	  "codeDescription": "Demonstrates how to create and apply a custom mark with parameters to a test function. The mark can then be accessed by fixtures or hooks using Node.iter_markers.",
	  "codeLanguage": "python",
	  "codeTokens": 61,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_3",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.timeout(10, \"slow\", method=\"thread\")\ndef test_function(): ..."
		}
	  ],
	  "relevance": 0.916
	},
	{
	  "codeTitle": "Programmatically Registering Markers in pytest_configure",
	  "codeDescription": "This Python snippet demonstrates how to programmatically register a new marker in a pytest_configure hook. It adds an 'env' marker for running tests only on a named environment.",
	  "codeLanguage": "python",
	  "codeTokens": 80,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/mark.rst#2025-04-08_snippet_2",
	  "pageTitle": "Marking Test Functions with Attributes in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def pytest_configure(config):\n    config.addinivalue_line(\n        \"markers\", \"env(name): mark test to run only on named environment\"\n    )"
		}
	  ],
	  "relevance": 0.915
	},
	{
	  "codeTitle": "Configuring pytest using setup.cfg file in INI format",
	  "codeDescription": "Demonstrates how to configure pytest options in a setup.cfg file using the [tool:pytest] section, including minimum version, additional options, and test paths.",
	  "codeLanguage": "ini",
	  "codeTokens": 74,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/customize.rst#2025-04-08_snippet_4",
	  "pageTitle": "Configuring pytest",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# setup.cfg\n[tool:pytest]\nminversion = 6.0\naddopts = -ra -q\ntestpaths =\n    tests\n    integration"
		}
	  ],
	  "relevance": 0.915
	},
	{
	  "codeTitle": "Parametrizing Conditional Raising of Exceptions in Python with pytest",
	  "codeDescription": "This example demonstrates how to use pytest.mark.parametrize with pytest.raises and contextlib.nullcontext to create tests that conditionally raise exceptions. It tests division operations with different inputs, expecting some to succeed and one to raise a ZeroDivisionError.",
	  "codeLanguage": "python",
	  "codeTokens": 158,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_18",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "from contextlib import nullcontext\n\nimport pytest\n\n\n@pytest.mark.parametrize(\n    \"example_input,expectation\",\n    [\n        (3, nullcontext(2)),\n        (2, nullcontext(3)),\n        (1, nullcontext(6)),\n        (0, pytest.raises(ZeroDivisionError)),\n    ],\n)\ndef test_division(example_input, expectation):\n    \"\"\"Test how much I know division.\"\"\"\n    with expectation as e:\n        assert (6 / example_input) == e"
		}
	  ],
	  "relevance": 0.915
	},
	{
	  "codeTitle": "Implementing Class-Level Setup and Teardown in pytest",
	  "codeDescription": "Code example demonstrating class-level setup and teardown methods that are called before and after all test methods in a class are executed.",
	  "codeLanguage": "python",
	  "codeTokens": 101,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/xunit_setup.rst#2025-04-08_snippet_1",
	  "pageTitle": "XUnit-Style Setup and Teardown in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@classmethod\ndef setup_class(cls):\n    \"\"\"setup any state specific to the execution of the given class (which\n    usually contains tests).\n    \"\"\"\n\n\n@classmethod\ndef teardown_class(cls):\n    \"\"\"teardown any state that was previously setup with a call to\n    setup_class.\n    \"\"\""
		}
	  ],
	  "relevance": 0.915
	},
	{
	  "codeTitle": "Using the filterwarnings Mark to Control Warnings in Tests",
	  "codeDescription": "Demonstrates using the @pytest.mark.filterwarnings decorator to control warnings at the test level, allowing fine-grained control over which warnings are captured.",
	  "codeLanguage": "python",
	  "codeTokens": 99,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_5",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import warnings\n\n\ndef api_v1():\n    warnings.warn(UserWarning(\"api v1, should use functions from v2\"))\n    return 1\n\n\n@pytest.mark.filterwarnings(\"ignore:api v1\")\ndef test_one():\n    assert api_v1() == 1"
		}
	  ],
	  "relevance": 0.915
	},
	{
	  "codeTitle": "Configuring Pytest Capturing from Command Line",
	  "codeDescription": "Examples of how to configure Pytest's capturing behavior using command-line arguments. This includes disabling capturing, replacing sys.stdout/stderr, and using different capturing methods.",
	  "codeLanguage": "bash",
	  "codeTokens": 130,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-stdout-stderr.rst#2025-04-08_snippet_0",
	  "pageTitle": "Capturing stdout/stderr Output in Pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest -s                  # disable all capturing\npytest --capture=sys       # replace sys.stdout/stderr with in-mem files\npytest --capture=fd        # also point filedescriptors 1 and 2 to temp file\npytest --capture=tee-sys   # combines 'sys' and '-s', capturing sys.stdout/stderr\n                           # and passing it along to the actual sys.stdout/stderr"
		}
	  ],
	  "relevance": 0.915
	},
	{
	  "codeTitle": "PyTest Test Classes with Callable Methods",
	  "codeDescription": "Defines multiple test classes that implement the 'callme' classmethod which will be called by the session fixture. Includes examples using both pytest-style tests and unittest-style tests to demonstrate compatibility.",
	  "codeLanguage": "python",
	  "codeTokens": 194,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/special.rst#2025-04-08_snippet_1",
	  "pageTitle": "Session-scoped Fixture Example in PyTest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_module.py\n\n\nclass TestHello:\n    @classmethod\n    def callme(cls):\n        print(\"callme called!\")\n\n    def test_method1(self):\n        print(\"test_method1 called\")\n\n    def test_method2(self):\n        print(\"test_method2 called\")\n\n\nclass TestOther:\n    @classmethod\n    def callme(cls):\n        print(\"callme other called\")\n\n    def test_other(self):\n        print(\"test other\")\n\n\n# works with unittest as well ...\nimport unittest\n\n\nclass SomeTest(unittest.TestCase):\n    @classmethod\n    def callme(self):\n        print(\"SomeTest callme called\")\n\n    def test_unit1(self):\n        print(\"test_unit1 method called\")"
		}
	  ],
	  "relevance": 0.915
	},
	{
	  "codeTitle": "Selecting Tests with Specific Marker Arguments in pytest",
	  "codeDescription": "This example illustrates how to run tests with specific marker arguments using pytest. It shows how to select tests marked with 'device' and a specific serial number.",
	  "codeLanguage": "pytest",
	  "codeTokens": 56,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_3",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest -v -m \"device(serial='123')\""
		}
	  ],
	  "relevance": 0.913
	},
	{
	  "codeTitle": "Conditional Skipping with skipif in Python",
	  "codeDescription": "Example of using @pytest.mark.skipif to conditionally skip a test based on Python version.",
	  "codeLanguage": "python",
	  "codeTokens": 64,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_4",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import sys\n\n\n@pytest.mark.skipif(sys.version_info < (3, 10), reason=\"requires python3.10 or higher\")\ndef test_function(): ..."
		}
	  ],
	  "relevance": 0.913
	},
	{
	  "codeTitle": "Configuring Pytest Logging Options in INI File",
	  "codeDescription": "This snippet demonstrates how to enable logging for each test by setting log_cli and log_level options in the pytest configuration file. These settings help restore behavior similar to version 3.3 where logs are visible for each test without requiring additional command-line options.",
	  "codeLanguage": "ini",
	  "codeTokens": 72,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#2025-04-08_snippet_14",
	  "pageTitle": "Managing Logging in pytest",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nlog_cli=true\nlog_level=NOTSET"
		}
	  ],
	  "relevance": 0.91
	},
	{
	  "codeTitle": "Implementing Parametrized Tests with Failure Cases in Python",
	  "codeDescription": "Example showing how to create parametrized tests using pytest.mark.parametrize with intentional failures for demonstration purposes.",
	  "codeLanguage": "python",
	  "codeTokens": 74,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/cache.rst#2025-04-08_snippet_0",
	  "pageTitle": "PyTest Cache Plugin Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_50.py\nimport pytest\n\n\n@pytest.mark.parametrize(\"i\", range(50))\ndef test_num(i):\n    if i in (17, 25):\n        pytest.fail(\"bad luck\")"
		}
	  ],
	  "relevance": 0.91
	},
	{
	  "codeTitle": "Dictionary Testing with Fixtures",
	  "codeDescription": "Shows how to organize dictionary monkeypatching tests using pytest fixtures for better modularity and reuse.",
	  "codeLanguage": "python",
	  "codeTokens": 253,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#2025-04-08_snippet_11",
	  "pageTitle": "Monkeypatching and Mocking in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of test_app.py\nimport pytest\n\n# app.py with the connection string function\nimport app\n\n\n# all of the mocks are moved into separated fixtures\n@pytest.fixture\ndef mock_test_user(monkeypatch):\n    \"\"\"Set the DEFAULT_CONFIG user to test_user.\"\"\"\n    monkeypatch.setitem(app.DEFAULT_CONFIG, \"user\", \"test_user\")\n\n\n@pytest.fixture\ndef mock_test_database(monkeypatch):\n    \"\"\"Set the DEFAULT_CONFIG database to test_db.\"\"\"\n    monkeypatch.setitem(app.DEFAULT_CONFIG, \"database\", \"test_db\")\n\n\n@pytest.fixture\ndef mock_missing_default_user(monkeypatch):\n    \"\"\"Remove the user key from DEFAULT_CONFIG\"\"\"\n    monkeypatch.delitem(app.DEFAULT_CONFIG, \"user\", raising=False)\n\n\n# tests reference only the fixture mocks that are needed\ndef test_connection(mock_test_user, mock_test_database):\n    expected = \"User Id=test_user; Location=test_db;\"\n\n    result = app.create_connection_string()\n    assert result == expected\n\n\ndef test_missing_user(mock_missing_default_user):\n    with pytest.raises(KeyError):\n        _ = app.create_connection_string()"
		}
	  ],
	  "relevance": 0.91
	},
	{
	  "codeTitle": "Conditional XFail with Reason in Python",
	  "codeDescription": "Example of using xfail marker with a condition and reason.",
	  "codeLanguage": "python",
	  "codeTokens": 53,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_10",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.xfail(sys.platform == \"win32\", reason=\"bug in a 3rd party library\")\ndef test_function(): ..."
		}
	  ],
	  "relevance": 0.91
	},
	{
	  "codeTitle": "Skipping Tests with Decorator in Python",
	  "codeDescription": "Example of using the @pytest.mark.skip decorator to skip a test function, optionally providing a reason.",
	  "codeLanguage": "python",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_1",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.skip(reason=\"no way of currently testing this\")\ndef test_the_unknown(): ..."
		}
	  ],
	  "relevance": 0.91
	},
	{
	  "codeTitle": "Getting Help and Version Information with Pytest",
	  "codeDescription": "Commands to display pytest version, available fixtures, and help on command line and configuration options.",
	  "codeLanguage": "bash",
	  "codeTokens": 72,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_12",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --version   # shows where pytest was imported from\npytest --fixtures  # show available builtin function arguments\npytest -h | --help # show help on command line and config file options"
		}
	  ],
	  "relevance": 0.91
	},
	{
	  "codeTitle": "Directory Structure Example for Import Modes without Packages",
	  "codeDescription": "A sample directory structure showing standalone test modules and conftest.py files without __init__.py files, where modules are not part of proper Python packages.",
	  "codeLanguage": "text",
	  "codeTokens": 71,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/pythonpath.rst#2025-04-08_snippet_2",
	  "pageTitle": "Understanding pytest Import Mechanisms and Path Configuration",
	  "codeList": [
		{
		  "language": "text",
		  "code": "root/\n|- foo/\n   |- conftest.py\n   |- bar/\n      |- tests/\n         |- test_foo.py"
		}
	  ],
	  "relevance": 0.91
	},
	{
	  "codeTitle": "Writing a Test Function Requiring a Fixture",
	  "codeDescription": "Shows how to write a test function that requires a fixture by declaring the fixture name as an argument. This example uses the capsys fixture to capture stdout.",
	  "codeLanguage": "python",
	  "codeTokens": 72,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_6",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_output(capsys):\n    print(\"hello\")\n    out, err = capsys.readouterr()\n    assert out == \"hello\\n\""
		}
	  ],
	  "relevance": 0.908
	},
	{
	  "codeTitle": "Running pytest with Doctest Output",
	  "codeDescription": "Shows the command to run pytest and its output when executing a doctest file.",
	  "codeLanguage": "pytest",
	  "codeTokens": 97,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#2025-04-08_snippet_2",
	  "pageTitle": "Running Doctests with pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 1 item\n\ntest_example.txt .                                                   [100%]\n\n============================ 1 passed in 0.12s ============================="
		}
	  ],
	  "relevance": 0.907
	},
	{
	  "codeTitle": "Using Print Statements for Debugging in Pytest",
	  "codeDescription": "Demonstrates how to use print statements for debugging in Pytest. The example shows setup functions and test functions with print statements, illustrating how Pytest captures and displays output for failing tests.",
	  "codeLanguage": "python",
	  "codeTokens": 89,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-stdout-stderr.rst#2025-04-08_snippet_1",
	  "pageTitle": "Capturing stdout/stderr Output in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_module.py\n\n\ndef setup_function(function):\n    print(\"setting up\", function)\n\n\ndef test_func1():\n    assert True\n\n\ndef test_func2():\n    assert False"
		}
	  ],
	  "relevance": 0.905
	},
	{
	  "codeTitle": "Adding Custom Command Line Option in pytest",
	  "codeDescription": "This Python code demonstrates how to add a custom command line option to pytest using the pytest_addoption hook in a conftest.py file.",
	  "codeLanguage": "python",
	  "codeTokens": 107,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_3",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\nimport pytest\n\n\ndef pytest_addoption(parser):\n    parser.addoption(\n        \"--cmdopt\", action=\"store\", default=\"type1\", help=\"my option: type1 or type2\"\n    )\n\n\n@pytest.fixture\ndef cmdopt(request):\n    return request.config.getoption(\"--cmdopt\")"
		}
	  ],
	  "relevance": 0.905
	},
	{
	  "codeTitle": "Defining Custom Assertion Explanations with pytest_assertrepr_compare Hook",
	  "codeDescription": "Shows how to implement the pytest_assertrepr_compare hook to provide custom failure explanations for assertion errors.",
	  "codeLanguage": "python",
	  "codeTokens": 104,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#2025-04-08_snippet_15",
	  "pageTitle": "Writing and Reporting Assertions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\nfrom test_foocompare import Foo\n\n\ndef pytest_assertrepr_compare(op, left, right):\n    if isinstance(left, Foo) and isinstance(right, Foo) and op == \"==\":\n        return [\n            \"Comparing Foo instances:\",\n            f\"   vals: {left.val} != {right.val}\",\n        ]"
		}
	  ],
	  "relevance": 0.905
	},
	{
	  "codeTitle": "Reading Multiple Markers in pytest",
	  "codeDescription": "This snippet demonstrates how to read markers applied multiple times to a test function using pytest. It shows the application of the 'glob' marker at module, class, and function levels, and how to iterate over these markers in a conftest file.",
	  "codeLanguage": "python",
	  "codeTokens": 123,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_16",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_mark_three_times.py\nimport pytest\n\npytestmark = pytest.mark.glob(\"module\", x=1)\n\n\n@pytest.mark.glob(\"class\", x=2)\nclass TestClass:\n    @pytest.mark.glob(\"function\", x=3)\n    def test_something(self):\n        pass"
		},
		{
		  "language": "python",
		  "code": "# content of conftest.py\nimport sys\n\n\ndef pytest_runtest_setup(item):\n    for mark in item.iter_markers(name=\"glob\"):\n        print(f\"glob args={mark.args} kwargs={mark.kwargs}\")\n        sys.stdout.flush()"
		}
	  ],
	  "relevance": 0.905
	},
	{
	  "codeTitle": "Stopping pytest After Failures with Command Line Options",
	  "codeDescription": "Command line examples showing how to stop the testing process after the first failure (-x) or after a specific number of failures (--maxfail=N).",
	  "codeLanguage": "bash",
	  "codeTokens": 63,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/failures.rst#2025-04-08_snippet_0",
	  "pageTitle": "Handling Test Failures in pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest -x           # stop after first failure\npytest --maxfail=2  # stop after two failures"
		}
	  ],
	  "relevance": 0.905
	},
	{
	  "codeTitle": "Making Test Result Information Available in Fixtures",
	  "codeDescription": "Creates a local plugin that stores test result information during test execution using a hook and makes it available in fixtures. This allows fixtures to access information about test setup, call, and teardown phases.",
	  "codeLanguage": "python",
	  "codeTokens": 300,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_26",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\nfrom typing import Dict\nimport pytest\nfrom pytest import StashKey, CollectReport\n\nphase_report_key = StashKey[Dict[str, CollectReport]]()\n\n\n@pytest.hookimpl(wrapper=True, tryfirst=True)\ndef pytest_runtest_makereport(item, call):\n    # execute all other hooks to obtain the report object\n    rep = yield\n\n    # store test results for each phase of a call, which can\n    # be \"setup\", \"call\", \"teardown\"\n    item.stash.setdefault(phase_report_key, {})[rep.when] = rep\n\n    return rep\n\n\n@pytest.fixture\ndef something(request):\n    yield\n    # request.node is an \"item\" because we use the default\n    # \"function\" scope\n    report = request.node.stash[phase_report_key]\n    if report[\"setup\"].failed:\n        print(\"setting up a test failed\", request.node.nodeid)\n    elif report[\"setup\"].skipped:\n        print(\"setting up a test skipped\", request.node.nodeid)\n    elif (\"call\" not in report) or report[\"call\"].failed:\n        print(\"executing test failed or skipped\", request.node.nodeid)"
		}
	  ],
	  "relevance": 0.905
	},
	{
	  "codeTitle": "Accessing Pytest Configuration (Python)",
	  "codeDescription": "This example shows how to use the pytestconfig fixture to access the pytest configuration object in a test function.",
	  "codeLanguage": "python",
	  "codeTokens": 58,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#2025-04-08_snippet_6",
	  "pageTitle": "Pytest API and Builtin Fixtures Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_foo(pytestconfig):\n    if pytestconfig.get_verbosity() > 0:\n        ..."
		}
	  ],
	  "relevance": 0.904
	},
	{
	  "codeTitle": "Setting Default Strict XFail in pytest.ini",
	  "codeDescription": "Example of setting the default value for xfail_strict in pytest configuration file.",
	  "codeLanguage": "ini",
	  "codeTokens": 37,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_14",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nxfail_strict=true"
		}
	  ],
	  "relevance": 0.901
	},
	{
	  "codeTitle": "Applying Indirect Parametrization to Specific Arguments in Pytest",
	  "codeDescription": "Shows how to apply indirect parametrization to only specific arguments by passing a list of argument names to the indirect parameter. In this example, only the 'x' fixture receives the indirect parameter.",
	  "codeLanguage": "python",
	  "codeTokens": 140,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_6",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_indirect_list.py\n\nimport pytest\n\n\n@pytest.fixture(scope=\"function\")\ndef x(request):\n    return request.param * 3\n\n\n@pytest.fixture(scope=\"function\")\ndef y(request):\n    return request.param * 2\n\n\n@pytest.mark.parametrize(\"x, y\", [(\"a\", \"b\")], indirect=[\"x\"])\ndef test_indirect(x, y):\n    assert x == \"aaa\"\n    assert y == \"b\""
		}
	  ],
	  "relevance": 0.9
	},
	{
	  "codeTitle": "Registering Custom Markers in pytest.ini",
	  "codeDescription": "This snippet demonstrates how to register custom markers in the pytest.ini file. It defines two markers: 'slow' for marking slow tests, and 'serial'.",
	  "codeLanguage": "ini",
	  "codeTokens": 70,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/mark.rst#2025-04-08_snippet_0",
	  "pageTitle": "Marking Test Functions with Attributes in pytest",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nmarkers =\n    slow: marks tests as slow (deselect with '-m \"not slow\"')\n    serial"
		}
	  ],
	  "relevance": 0.9
	},
	{
	  "codeTitle": "Changing log level for specific logger using context manager",
	  "codeDescription": "Shows how to change the log level for a specific logger using a context manager in a test function.",
	  "codeLanguage": "python",
	  "codeTokens": 54,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#2025-04-08_snippet_8",
	  "pageTitle": "Managing Logging in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_bar(caplog):\n    with caplog.at_level(logging.CRITICAL, logger=\"root.baz\"):\n        pass"
		}
	  ],
	  "relevance": 0.9
	},
	{
	  "codeTitle": "Automatic Marker Addition Based on Test Names in pytest",
	  "codeDescription": "This snippet demonstrates how to automatically add markers to tests based on their names using a pytest hook. It includes a test module with differently named tests and a conftest file that adds 'interface' and 'event' markers based on the test names.",
	  "codeLanguage": "python",
	  "codeTokens": 110,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_18",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_module.py\n\n\ndef test_interface_simple():\n    assert 0\n\n\ndef test_interface_complex():\n    assert 0\n\n\ndef test_event_simple():\n    assert 0\n\n\ndef test_something_else():\n    assert 0"
		},
		{
		  "language": "python",
		  "code": "# content of conftest.py\n\nimport pytest\n\n\ndef pytest_collection_modifyitems(items):\n    for item in items:\n        if \"interface\" in item.nodeid:\n            item.add_marker(pytest.mark.interface)\n        elif \"event\" in item.nodeid:\n            item.add_marker(pytest.mark.event)"
		}
	  ],
	  "relevance": 0.9
	},
	{
	  "codeTitle": "Using collect_ignore_glob for Pattern-Based File Exclusion",
	  "codeDescription": "Advanced example of conftest.py using both collect_ignore for specific files and collect_ignore_glob for pattern-based exclusion. This allows more flexible exclusion rules based on file naming patterns.",
	  "codeLanguage": "python",
	  "codeTokens": 86,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#2025-04-08_snippet_10",
	  "pageTitle": "Pytest Test Discovery Configuration",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\nimport sys\n\ncollect_ignore = [\"setup.py\"]\nif sys.version_info[0] > 2:\n    collect_ignore_glob = [\"*_py2.py\"]"
		}
	  ],
	  "relevance": 0.9
	},
	{
	  "codeTitle": "Running Tests by Keyword Expressions with Pytest",
	  "codeDescription": "Command to run tests that match a specific string expression using Python operators. This example runs tests containing 'MyClass' but not 'method' in their names.",
	  "codeLanguage": "bash",
	  "codeTokens": 57,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_2",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest -k 'MyClass and not method'"
		}
	  ],
	  "relevance": 0.9
	},
	{
	  "codeTitle": "Environment Variable Access Function Implementation",
	  "codeDescription": "Shows the implementation of a function that retrieves and processes the USER environment variable, demonstrating a typical use case for environment variable testing.",
	  "codeLanguage": "python",
	  "codeTokens": 104,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#2025-04-08_snippet_5",
	  "pageTitle": "Monkeypatching and Mocking in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of our original code file e.g. code.py\nimport os\n\n\ndef get_os_user_lower():\n    \"\"\"Simple retrieval function.\n    Returns lowercase USER or raises OSError.\"\"\"\n    username = os.getenv(\"USER\")\n\n    if username is None:\n        raise OSError(\"USER environment is not set.\")\n\n    return username.lower()"
		}
	  ],
	  "relevance": 0.9
	},
	{
	  "codeTitle": "Comparing Attributes of Different Classes in Python with Pytest",
	  "codeDescription": "This test creates two classes 'Foo' and 'Bar' with different values for attribute 'b', then asserts that these attributes are equal. The assertion fails as the values are different.",
	  "codeLanguage": "python",
	  "codeTokens": 85,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_7",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_attribute_multiple():\n    class Foo:\n        b = 1\n\n    class Bar:\n        b = 2\n\n>   assert Foo().b == Bar().b"
		}
	  ],
	  "relevance": 0.898
	},
	{
	  "codeTitle": "Environment Variable Testing with Fixtures",
	  "codeDescription": "Shows how to use pytest fixtures to organize and reuse monkeypatch configurations for environment variable testing.",
	  "codeLanguage": "python",
	  "codeTokens": 147,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#2025-04-08_snippet_7",
	  "pageTitle": "Monkeypatching and Mocking in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of our test file e.g. test_code.py\nimport pytest\n\n\n@pytest.fixture\ndef mock_env_user(monkeypatch):\n    monkeypatch.setenv(\"USER\", \"TestingUser\")\n\n\n@pytest.fixture\ndef mock_env_missing(monkeypatch):\n    monkeypatch.delenv(\"USER\", raising=False)\n\n\n# notice the tests reference the fixtures for mocks\ndef test_upper_to_lower(mock_env_user):\n    assert get_os_user_lower() == \"testinguser\"\n\n\ndef test_raise_exception(mock_env_missing):\n    with pytest.raises(OSError):\n        _ = get_os_user_lower()"
		}
	  ],
	  "relevance": 0.895
	},
	{
	  "codeTitle": "Testing Attribute Access Failure in Python with Pytest",
	  "codeDescription": "This test creates a class 'Foo' with a property 'b' that raises an exception when accessed. The test attempts to access this property, which results in the expected exception being raised.",
	  "codeLanguage": "python",
	  "codeTokens": 97,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_6",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_attribute_failure():\n    class Foo:\n        def _get_b(self):\n            raise Exception(\"Failed to get attrib\")\n\n        b = property(_get_b)\n\n    i = Foo()\n>   assert i.b == 2"
		}
	  ],
	  "relevance": 0.895
	},
	{
	  "codeTitle": "Skipping Class Methods in Python",
	  "codeDescription": "Example of using skipif marker on a class to skip all its test methods on a specific platform.",
	  "codeLanguage": "python",
	  "codeTokens": 80,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_6",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.skipif(sys.platform == \"win32\", reason=\"does not run on windows\")\nclass TestPosixCalls:\n    def test_function(self):\n        \"will not be setup or run under 'win32' platform\""
		}
	  ],
	  "relevance": 0.895
	},
	{
	  "codeTitle": "Clearing Pytest Cache with --cache-clear Option",
	  "codeDescription": "This command instructs pytest to clear all cache files and values. It's particularly recommended for Continuous Integration environments where test isolation and correctness are prioritized over execution speed.",
	  "codeLanguage": "bash",
	  "codeTokens": 48,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/cache.rst#2025-04-08_snippet_2",
	  "pageTitle": "PyTest Cache Plugin Documentation",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --cache-clear"
		}
	  ],
	  "relevance": 0.895
	},
	{
	  "codeTitle": "Applying Module-Level Markers in Pytest",
	  "codeDescription": "Examples showing how to apply markers at the module level using the pytestmark global variable. Demonstrates both single and multiple marker application.",
	  "codeLanguage": "python",
	  "codeTokens": 49,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_9",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\npytestmark = pytest.mark.webtest"
		},
		{
		  "language": "python",
		  "code": "pytestmark = [pytest.mark.webtest, pytest.mark.slowtest]"
		}
	  ],
	  "relevance": 0.895
	},
	{
	  "codeTitle": "Controlling Test Skipping with Custom Command Line Option",
	  "codeDescription": "This Python code shows how to add a custom command line option to control skipping of tests marked with pytest.mark.slow, using various pytest hooks.",
	  "codeLanguage": "python",
	  "codeTokens": 184,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_6",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\n\nimport pytest\n\n\ndef pytest_addoption(parser):\n    parser.addoption(\n        \"--runslow\", action=\"store_true\", default=False, help=\"run slow tests\"\n    )\n\n\ndef pytest_configure(config):\n    config.addinivalue_line(\"markers\", \"slow: mark test as slow to run\")\n\n\ndef pytest_collection_modifyitems(config, items):\n    if config.getoption(\"--runslow\"):\n        # --runslow given in cli: do not skip slow tests\n        return\n    skip_slow = pytest.mark.skip(reason=\"need --runslow option to run\")\n    for item in items:\n        if \"slow\" in item.keywords:\n            item.add_marker(skip_slow)"
		}
	  ],
	  "relevance": 0.895
	},
	{
	  "codeTitle": "Configuring Test Collection Ignore Glob Pattern",
	  "codeDescription": "Configures test collection to ignore files matching Unix shell-style wildcards.",
	  "codeLanguage": "python",
	  "codeTokens": 33,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_11",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "collect_ignore_glob = [\"*_ignore.py\"]"
		}
	  ],
	  "relevance": 0.895
	},
	{
	  "codeTitle": "Demonstrating ValueError in Python with Pytest",
	  "codeDescription": "This test deliberately raises a ValueError with a custom message to demonstrate error handling in pytest.",
	  "codeLanguage": "python",
	  "codeTokens": 43,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_10",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_raise(self):\n>   raise ValueError(\"demo error\")"
		}
	  ],
	  "relevance": 0.892
	},
	{
	  "codeTitle": "Implementing Input Validation for Custom Command Line Option",
	  "codeDescription": "This Python code shows how to add input validation for a custom command line option in pytest using the choices parameter.",
	  "codeLanguage": "python",
	  "codeTokens": 96,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_4",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\nimport pytest\n\n\ndef pytest_addoption(parser):\n    parser.addoption(\n        \"--cmdopt\",\n        action=\"store\",\n        default=\"type1\",\n        help=\"my option: type1 or type2\",\n        choices=(\"type1\", \"type2\"),\n    )"
		}
	  ],
	  "relevance": 0.89
	},
	{
	  "codeTitle": "Using caplog fixture to set log level in pytest",
	  "codeDescription": "Demonstrates how to use the caplog fixture to change the log level for captured log messages in a test function.",
	  "codeLanguage": "python",
	  "codeTokens": 48,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#2025-04-08_snippet_5",
	  "pageTitle": "Managing Logging in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_foo(caplog):\n    caplog.set_level(logging.INFO)"
		}
	  ],
	  "relevance": 0.89
	},
	{
	  "codeTitle": "Configuring pytest for Doctests in pytest.ini",
	  "codeDescription": "Shows how to configure pytest to always run doctests from modules using a pytest.ini file.",
	  "codeLanguage": "ini",
	  "codeTokens": 47,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#2025-04-08_snippet_5",
	  "pageTitle": "Running Doctests with pytest",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# content of pytest.ini\n[pytest]\naddopts = --doctest-modules"
		}
	  ],
	  "relevance": 0.89
	},
	{
	  "codeTitle": "Grouping tests in a class with pytest",
	  "codeDescription": "Example of organizing multiple test methods within a TestClass. Tests are discovered by pytest's conventions, requiring the 'Test' prefix for the class and 'test_' prefix for methods.",
	  "codeLanguage": "python",
	  "codeTokens": 97,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#2025-04-08_snippet_6",
	  "pageTitle": "Getting Started with pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_class.py\nclass TestClass:\n    def test_one(self):\n        x = \"this\"\n        assert \"h\" in x\n\n    def test_two(self):\n        x = \"hello\"\n        assert hasattr(x, \"check\")"
		}
	  ],
	  "relevance": 0.89
	},
	{
	  "codeTitle": "Dynamically Adding Command Line Options in pytest",
	  "codeDescription": "This Python code demonstrates how to dynamically modify command line arguments for pytest before they are processed, using the pytest_load_initial_conftests hook.",
	  "codeLanguage": "python",
	  "codeTokens": 109,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_5",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# installable external plugin\nimport sys\n\n\ndef pytest_load_initial_conftests(args):\n    if \"xdist\" in sys.modules:  # pytest-xdist plugin\n        import multiprocessing\n\n        num = max(multiprocessing.cpu_count() / 2, 1)\n        args[:] = [\"-n\", str(num)] + args"
		}
	  ],
	  "relevance": 0.89
	},
	{
	  "codeTitle": "Testing Dynamically Compiled Code in Python with Pytest",
	  "codeDescription": "This test dynamically compiles and executes a Python function that contains a failing assertion. It demonstrates how pytest handles errors in dynamically generated code.",
	  "codeLanguage": "python",
	  "codeTokens": 142,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_14",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_dynamic_compile_shows_nicely():\n    import importlib.util\n    import sys\n\n    src = \"def foo():\\n assert 1 == 0\\n\"\n    name = \"abc-123\"\n    spec = importlib.util.spec_from_loader(name, loader=None)\n    module = importlib.util.module_from_spec(spec)\n    code = compile(src, name, \"exec\")\n    exec(code, module.__dict__)\n    sys.modules[name] = module\n>   module.foo()"
		}
	  ],
	  "relevance": 0.889
	},
	{
	  "codeTitle": "Testing Complex Error Scenario in Python with Pytest",
	  "codeDescription": "This test demonstrates a more complex error scenario involving multiple function calls. It shows how pytest provides a detailed traceback for nested function calls.",
	  "codeLanguage": "python",
	  "codeTokens": 71,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_15",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_complex_error(self):\n    def f():\n        return 44\n\n    def g():\n        return 43\n\n>   somefunc(f(), g())"
		}
	  ],
	  "relevance": 0.886
	},
	{
	  "codeTitle": "Skipping Tests on Missing Import in Python",
	  "codeDescription": "Examples of skipping tests when a required import is missing or doesn't meet version requirements.",
	  "codeLanguage": "python",
	  "codeTokens": 41,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_8",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "docutils = pytest.importorskip(\"docutils\")"
		},
		{
		  "language": "python",
		  "code": "docutils = pytest.importorskip(\"docutils\", minversion=\"0.3\")"
		}
	  ],
	  "relevance": 0.885
	},
	{
	  "codeTitle": "Temporarily Disabling Capture in Pytest Tests",
	  "codeDescription": "Shows how to temporarily disable output capturing within a test using the disabled() method of capture fixtures. This allows for selective capturing of output within a single test.",
	  "codeLanguage": "python",
	  "codeTokens": 93,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-stdout-stderr.rst#2025-04-08_snippet_3",
	  "pageTitle": "Capturing stdout/stderr Output in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_disabling_capturing(capsys):\n    print(\"this output is captured\")\n    with capsys.disabled():\n        print(\"output not captured, going directly to sys.stdout\")\n    print(\"this output is also captured\")"
		}
	  ],
	  "relevance": 0.885
	},
	{
	  "codeTitle": "Setting Doctest Encoding in pytest.ini",
	  "codeDescription": "Demonstrates how to specify a custom encoding for doctest files in the pytest.ini configuration.",
	  "codeLanguage": "ini",
	  "codeTokens": 45,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#2025-04-08_snippet_6",
	  "pageTitle": "Running Doctests with pytest",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# content of pytest.ini\n[pytest]\ndoctest_encoding = latin1"
		}
	  ],
	  "relevance": 0.885
	},
	{
	  "codeTitle": "Warning Pattern Matching Examples",
	  "codeDescription": "Examples of using pattern matching with pytest.warns to verify warning messages against literal strings and regular expressions.",
	  "codeLanguage": "python",
	  "codeTokens": 183,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_12",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": ">>> with warns(UserWarning, match=\"must be 0 or None\"):\n...     warnings.warn(\"value must be 0 or None\", UserWarning)\n...\n\n>>> with warns(UserWarning, match=r\"must be \\d+$\"):\n...     warnings.warn(\"value must be 42\", UserWarning)\n...\n\n>>> with warns(UserWarning, match=r\"must be \\d+$\"):\n...     warnings.warn(\"this is not here\", UserWarning)\n...\nTraceback (most recent call last):\n  ...\nFailed: DID NOT WARN. No warnings of type ...UserWarning... were emitted...\n\n>>> with warns(UserWarning, match=re.escape(\"issue with foo() func\")):\n...     warnings.warn(\"issue with foo() func\")\n..."
		}
	  ],
	  "relevance": 0.885
	},
	{
	  "codeTitle": "Example Python Function Documentation Format",
	  "codeDescription": "Demonstrates the Sphinx docstring format used in Pytest for documenting functions, including type hints, parameters, return values, and version information.",
	  "codeLanguage": "python",
	  "codeTokens": 187,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#2025-04-08_snippet_1",
	  "pageTitle": "Contributing Guide for Pytest Development",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def my_function(arg: ArgType) -> Foo:\n    \"\"\"Do important stuff.\n\n    More detailed info here, in separate paragraphs from the subject line.\n    Use proper sentences -- start sentences with capital letters and end\n    with periods.\n\n    Can include annotated documentation:\n\n    :param short_arg: An argument which determines stuff.\n    :param long_arg:\n        A long explanation which spans multiple lines, overflows\n        like this.\n    :returns: The result.\n    :raises ValueError:\n        Detailed information when this can happen.\n\n    .. versionadded:: 6.0\n\n    Including types into the annotations above is not necessary when\n    type-hinting is being used (as in this example).\n    \"\"\""
		}
	  ],
	  "relevance": 0.885
	},
	{
	  "codeTitle": "Configuring Default Command Line Options in pytest.ini",
	  "codeDescription": "This snippet shows how to set default command line options for pytest in a pytest.ini configuration file. It adds the -ra and -q options by default.",
	  "codeLanguage": "ini",
	  "codeTokens": 59,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_0",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# content of pytest.ini\n[pytest]\naddopts = -ra -q"
		}
	  ],
	  "relevance": 0.885
	},
	{
	  "codeTitle": "Basic @pytest.fixture Usage Without Prefix",
	  "codeDescription": "Simple example demonstrating how the @pytest.fixture decorator uses the function name directly as the fixture name, eliminating the need for the pytest_funcarg__ prefix.",
	  "codeLanguage": "python",
	  "codeTokens": 53,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/funcarg_compare.rst#2025-04-08_snippet_4",
	  "pageTitle": "pytest-2.3 Fixture Evolution Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.fixture()\ndef db(request): ..."
		}
	  ],
	  "relevance": 0.885
	},
	{
	  "codeTitle": "Sample Python 2 Specific Test Module",
	  "codeDescription": "Example of a Python 2 specific test module that will be ignored when running with Python 3. The test uses Python 2's exception syntax which would cause syntax errors in Python 3.",
	  "codeLanguage": "python",
	  "codeTokens": 82,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#2025-04-08_snippet_8",
	  "pageTitle": "Pytest Test Discovery Configuration",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of pkg/module_py2.py\ndef test_only_on_python2():\n    try:\n        assert 0\n    except Exception, e:\n        pass"
		}
	  ],
	  "relevance": 0.883
	},
	{
	  "codeTitle": "Verifying Custom Directory Collection in pytest",
	  "codeDescription": "This command-line snippet shows how to use pytest's --collect-only option to verify the custom directory collection implementation. It displays the collection tree, including the custom ManifestDirectory collector.",
	  "codeLanguage": "Shell",
	  "codeTokens": 159,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/customdirectory.rst#2025-04-08_snippet_4",
	  "pageTitle": "Custom Directory Collection in pytest",
	  "codeList": [
		{
		  "language": "Shell",
		  "code": "customdirectory $ pytest --collect-only\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project/customdirectory\nconfigfile: pytest.ini\ncollected 2 items\n\n<Dir customdirectory>\n  <ManifestDirectory tests>\n    <Module test_first.py>\n      <Function test_1>\n    <Module test_second.py>\n      <Function test_2>\n\n======================== 2 tests collected in 0.12s ========================"
		}
	  ],
	  "relevance": 0.88
	},
	{
	  "codeTitle": "Using xfail with raises Parameter for Exception Testing",
	  "codeDescription": "Shows how to use the raises parameter with pytest.mark.xfail to specify that a test should fail with a particular exception type.",
	  "codeLanguage": "python",
	  "codeTokens": 61,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#2025-04-08_snippet_12",
	  "pageTitle": "Writing and Reporting Assertions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def f():\n    raise IndexError()\n\n\n@pytest.mark.xfail(raises=IndexError)\ndef test_f():\n    f()"
		}
	  ],
	  "relevance": 0.88
	},
	{
	  "codeTitle": "Implementing Cached Fixture with Expensive Computation in Python",
	  "codeDescription": "Demonstrates how to create a pytest fixture that caches computed values between test runs using the config.cache object.",
	  "codeLanguage": "python",
	  "codeTokens": 124,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/cache.rst#2025-04-08_snippet_1",
	  "pageTitle": "PyTest Cache Plugin Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_caching.py\nimport pytest\n\n\ndef expensive_computation():\n    print(\"running expensive computation...\")\n\n\n@pytest.fixture\ndef mydata(pytestconfig):\n    val = pytestconfig.cache.get(\"example/value\", None)\n    if val is None:\n        expensive_computation()\n        val = 42\n        pytestconfig.cache.set(\"example/value\", val)\n    return val\n\n\ndef test_function(mydata):\n    assert mydata == 23"
		}
	  ],
	  "relevance": 0.88
	},
	{
	  "codeTitle": "Using pytest Fixtures in unittest.TestCase Subclass (Python)",
	  "codeDescription": "Demonstration of using a pytest fixture in a unittest.TestCase subclass. The @pytest.mark.usefixtures decorator is used to apply the 'db_class' fixture to the test class.",
	  "codeLanguage": "python",
	  "codeTokens": 116,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/unittest.rst#2025-04-08_snippet_2",
	  "pageTitle": "Running unittest-based Tests with pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import unittest\nimport pytest\n\n@pytest.mark.usefixtures(\"db_class\")\nclass MyTest(unittest.TestCase):\n    def test_method1(self):\n        assert hasattr(self, \"db\")\n        assert 0, self.db  # fail for demo purposes\n\n    def test_method2(self):\n        assert 0, self.db  # fail for demo purposes"
		}
	  ],
	  "relevance": 0.88
	},
	{
	  "codeTitle": "Testing That Code Triggers a Deprecation Warning",
	  "codeDescription": "Shows how to use pytest.deprecated_call() to check that a function correctly issues a deprecation warning when called with specific arguments.",
	  "codeLanguage": "python",
	  "codeTokens": 65,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_10",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n\ndef test_myfunction_deprecated():\n    with pytest.deprecated_call():\n        myfunction(17)"
		}
	  ],
	  "relevance": 0.88
	},
	{
	  "codeTitle": "Executing Tests with Selective Indirect Parametrization in Pytest",
	  "codeDescription": "Shows the output of running a test with indirect parametrization applied only to specific arguments, confirming that only the specified fixture receives the indirect parameter.",
	  "codeLanguage": "pytest",
	  "codeTokens": 142,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_7",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest -v test_indirect_list.py\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y -- $PYTHON_PREFIX/bin/python\ncachedir: .pytest_cache\nrootdir: /home/sweet/project\ncollecting ... collected 1 item\n\ntest_indirect_list.py::test_indirect[a-b] PASSED                     [100%]\n\n============================ 1 passed in 0.12s ============================="
		}
	  ],
	  "relevance": 0.88
	},
	{
	  "codeTitle": "Disabling Warning Capture in pytest.ini",
	  "codeDescription": "Shows how to completely disable the warnings plugin in pytest.ini, which might be useful if your test suite handles warnings using an external system.",
	  "codeLanguage": "ini",
	  "codeTokens": 54,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_8",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\naddopts = -p no:warnings"
		}
	  ],
	  "relevance": 0.88
	},
	{
	  "codeTitle": "Disabling specific loggers in pytest",
	  "codeDescription": "Demonstrates how to disable specific loggers when running pytest using command-line options.",
	  "codeLanguage": "bash",
	  "codeTokens": 37,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#2025-04-08_snippet_3",
	  "pageTitle": "Managing Logging in pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --log-disable=main --log-disable=testing"
		}
	  ],
	  "relevance": 0.877
	},
	{
	  "codeTitle": "Warning Filter Configuration in pyproject.toml",
	  "codeDescription": "Shows how to configure warning filters in the pyproject.toml file, which is an alternative to pytest.ini for modern Python projects.",
	  "codeLanguage": "toml",
	  "codeTokens": 106,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_4",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "toml",
		  "code": "# pyproject.toml\n[tool.pytest.ini_options]\nfilterwarnings = [\n    \"error\",\n    \"ignore::UserWarning\",\n    # note the use of single quote below to denote \"raw\" strings in TOML\n    'ignore:function ham\\(\\) is deprecated:DeprecationWarning',\n]"
		}
	  ],
	  "relevance": 0.875
	},
	{
	  "codeTitle": "Registering Hooks with pytest",
	  "codeDescription": "Shows how to register hooks with pytest's plugin manager and use them in fixtures.",
	  "codeLanguage": "python",
	  "codeTokens": 69,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#2025-04-08_snippet_4",
	  "pageTitle": "Writing Hook Functions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def pytest_addhooks(pluginmanager):\n    \"\"\"This example assumes the hooks are grouped in the 'sample_hook' module.\"\"\"\n    from my_app.tests import sample_hook\n\n    pluginmanager.add_hookspecs(sample_hook)"
		}
	  ],
	  "relevance": 0.875
	},
	{
	  "codeTitle": "Configuring JUnit XML duration reporting behavior",
	  "codeDescription": "Changes the JUnitXML duration reporting to only include test function call time instead of the default total execution time including setup and teardown.",
	  "codeLanguage": "ini",
	  "codeTokens": 45,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_14",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\njunit_duration_report = call"
		}
	  ],
	  "relevance": 0.875
	},
	{
	  "codeTitle": "Generic Warning Recording",
	  "codeDescription": "Example of recording multiple warnings without specific type assertions using pytest.warns.",
	  "codeLanguage": "python",
	  "codeTokens": 88,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_14",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "with pytest.warns() as record:\n    warnings.warn(\"user\", UserWarning)\n    warnings.warn(\"runtime\", RuntimeWarning)\n\nassert len(record) == 2\nassert str(record[0].message) == \"user\"\nassert str(record[1].message) == \"runtime\""
		}
	  ],
	  "relevance": 0.875
	},
	{
	  "codeTitle": "Running Parametrized Tests with Custom Markers using pytest CLI",
	  "codeDescription": "This command demonstrates how to run pytest with verbose mode (-v) and select only tests with a specific marker (-m basic). It shows the output of running the tests, including the number of tests collected, selected, deselected, and their results.",
	  "codeLanguage": "pytest",
	  "codeTokens": 231,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_17",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest -v -m basic\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y -- $PYTHON_PREFIX/bin/python\ncachedir: .pytest_cache\nrootdir: /home/sweet/project\ncollecting ... collected 24 items / 21 deselected / 3 selected\n\ntest_pytest_param_example.py::test_eval[1+7-8] PASSED                [ 33%]\ntest_pytest_param_example.py::test_eval[basic_2+4] PASSED            [ 66%]\ntest_pytest_param_example.py::test_eval[basic_6*9] XFAIL             [100%]\n\n=============== 2 passed, 21 deselected, 1 xfailed in 0.12s ================"
		}
	  ],
	  "relevance": 0.875
	},
	{
	  "codeTitle": "Adding Conditional Header Information to pytest Report",
	  "codeDescription": "Shows how to add conditional information to the pytest report header based on verbosity level using the pytest_report_header hook.",
	  "codeLanguage": "python",
	  "codeTokens": 76,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_13",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\n\n\ndef pytest_report_header(config):\n    if config.get_verbosity() > 0:\n        return [\"info1: did you know that ...\", \"did you?\"]"
		}
	  ],
	  "relevance": 0.875
	},
	{
	  "codeTitle": "Disabling captured content reporting in pytest",
	  "codeDescription": "Shows how to disable reporting of captured content (stdout, stderr, and logs) on failed tests in pytest.",
	  "codeLanguage": "bash",
	  "codeTokens": 38,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#2025-04-08_snippet_4",
	  "pageTitle": "Managing Logging in pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --show-capture=no"
		}
	  ],
	  "relevance": 0.874
	},
	{
	  "codeTitle": "Configuring JUnit XML suite name in pytest.ini",
	  "codeDescription": "Sets a custom name for the root test suite XML item in the JUnitXML report using the junit_suite_name option in the pytest configuration file.",
	  "codeLanguage": "ini",
	  "codeTokens": 49,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_13",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\njunit_suite_name = my_suite"
		}
	  ],
	  "relevance": 0.871
	},
	{
	  "codeTitle": "Passing Callables to Custom Markers in Pytest",
	  "codeDescription": "Example demonstrating how to pass a callable function to a custom marker using the with_args() method, which is necessary when passing a callable as a single positional argument.",
	  "codeLanguage": "python",
	  "codeTokens": 88,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_15",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_custom_marker.py\nimport pytest\n\n\ndef hello_world(*args, **kwargs):\n    return \"Hello World\"\n\n\n@pytest.mark.my_marker.with_args(hello_world)\ndef test_with_args():\n    pass"
		}
	  ],
	  "relevance": 0.87
	},
	{
	  "codeTitle": "Capturing Standard Output in Pytest (Python)",
	  "codeDescription": "This example shows how to use the capsys fixture to capture text output from sys.stdout and sys.stderr in a test function.",
	  "codeLanguage": "python",
	  "codeTokens": 70,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#2025-04-08_snippet_4",
	  "pageTitle": "Pytest API and Builtin Fixtures Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_output(capsys):\n    print(\"hello\")\n    captured = capsys.readouterr()\n    assert captured.out == \"hello\\n\""
		}
	  ],
	  "relevance": 0.87
	},
	{
	  "codeTitle": "Using record_testsuite_property to add suite-level properties",
	  "codeDescription": "Creates a session-scoped fixture that uses record_testsuite_property to add properties at the test-suite level in the JUnitXML report, relevant to all tests.",
	  "codeLanguage": "python",
	  "codeTokens": 106,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_19",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef log_global_env_facts(record_testsuite_property):\n    record_testsuite_property(\"ARCH\", \"PPC\")\n    record_testsuite_property(\"STORAGE_TYPE\", \"CEPH\")\n\n\nclass TestMe:\n    def test_foo(self):\n        assert True"
		}
	  ],
	  "relevance": 0.87
	},
	{
	  "codeTitle": "Multiple Warning Types Testing",
	  "codeDescription": "Example showing how to test for multiple possible warning types.",
	  "codeLanguage": "python",
	  "codeTokens": 45,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_16",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_warning():\n    with pytest.warns((RuntimeWarning, UserWarning)):\n        ..."
		}
	  ],
	  "relevance": 0.87
	},
	{
	  "codeTitle": "Specifying Test File Patterns in pytest",
	  "codeDescription": "Defines glob-style file patterns for identifying Python test modules. This configuration determines which files are considered as test files during collection.",
	  "codeLanguage": "ini",
	  "codeTokens": 57,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_39",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\npython_files =\n    test_*.py\n    check_*.py\n    example_*.py"
		}
	  ],
	  "relevance": 0.87
	},
	{
	  "codeTitle": "Implementing Base Functionality for Optional Import Testing in Pytest",
	  "codeDescription": "Defines a base implementation of a function that will be compared against optimized versions in parametrized tests.",
	  "codeLanguage": "python",
	  "codeTokens": 46,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_11",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of base.py\ndef func1():\n    return 1"
		}
	  ],
	  "relevance": 0.87
	},
	{
	  "codeTitle": "Freezing Pytest Application with Custom Runner",
	  "codeDescription": "Example showing how to create a frozen application that can also act as a pytest runner by handling command line arguments. Includes explicit import of third-party plugins due to entry points limitation in frozen executables.",
	  "codeLanguage": "python",
	  "codeTokens": 139,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_29",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of app_main.py\nimport sys\n\nimport pytest_timeout  # Third party plugin\n\nif len(sys.argv) > 1 and sys.argv[1] == \"--pytest\":\n    import pytest\n\n    sys.exit(pytest.main(sys.argv[2:], plugins=[pytest_timeout]))\nelse:\n    # normal application execution: at this point argv can be parsed\n    # by your argument-parsing library of choice as usual\n    ..."
		}
	  ],
	  "relevance": 0.87
	},
	{
	  "codeTitle": "Configuring custom truncation limits in pytest.ini",
	  "codeDescription": "Sets custom truncation limits for pytest assertion output in the pytest.ini configuration file. Modifies the default of 8 lines/640 characters to 10 lines/90 characters.",
	  "codeLanguage": "ini",
	  "codeTokens": 65,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_10",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\ntruncation_limit_lines = 10\ntruncation_limit_chars = 90"
		}
	  ],
	  "relevance": 0.868
	},
	{
	  "codeTitle": "Profiling Test Execution Duration with Pytest",
	  "codeDescription": "Command to get a list of the slowest tests that exceed a minimum duration threshold using the --durations and --durations-min options.",
	  "codeLanguage": "bash",
	  "codeTokens": 57,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_13",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --durations=10 --durations-min=1.0"
		}
	  ],
	  "relevance": 0.865
	},
	{
	  "codeTitle": "Using test_id marker for XML property generation",
	  "codeDescription": "Shows how to apply the test_id marker to a test function, which will be converted to a property in the JUnitXML report by the conftest.py hook.",
	  "codeLanguage": "python",
	  "codeTokens": 69,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_17",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_function.py\nimport pytest\n\n\n@pytest.mark.test_id(1501)\ndef test_function():\n    assert True"
		}
	  ],
	  "relevance": 0.865
	},
	{
	  "codeTitle": "Typing pytest Fixtures",
	  "codeDescription": "Shows how to add type annotations to pytest fixtures using standard Python typing syntax.",
	  "codeLanguage": "python",
	  "codeTokens": 44,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/types.rst#2025-04-08_snippet_2",
	  "pageTitle": "Typing Guide for pytest Tests",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n\n@pytest.fixture\ndef sample_fixture() -> int:\n    return 38"
		}
	  ],
	  "relevance": 0.865
	},
	{
	  "codeTitle": "Implementing Method-Level Setup and Teardown in pytest",
	  "codeDescription": "Code example showing how to implement method-level setup and teardown functions that are called around each test method invocation. The method parameter is optional as of pytest-3.0.",
	  "codeLanguage": "python",
	  "codeTokens": 119,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/xunit_setup.rst#2025-04-08_snippet_2",
	  "pageTitle": "XUnit-Style Setup and Teardown in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def setup_method(self, method):\n    \"\"\"setup any state tied to the execution of the given method in a\n    class.  setup_method is invoked for every test method of a class.\n    \"\"\"\n\n\ndef teardown_method(self, method):\n    \"\"\"teardown any state that was previously setup with a setup_method\n    call.\n    \"\"\""
		}
	  ],
	  "relevance": 0.865
	},
	{
	  "codeTitle": "Using filterwarnings Marker",
	  "codeDescription": "Shows how to use the filterwarnings marker to control warning behavior for a specific test. This example ignores DeprecationWarnings that match a specific pattern.",
	  "codeLanguage": "python",
	  "codeTokens": 66,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_8",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.filterwarnings(\"ignore:.*usage will be deprecated.*:DeprecationWarning\")\ndef test_foo(): ..."
		}
	  ],
	  "relevance": 0.865
	},
	{
	  "codeTitle": "Running pytest in Verbose Mode with YAML Tests",
	  "codeDescription": "Command to execute pytest in verbose mode against YAML test files, showing detailed output for test execution with location information provided by the reportinfo() method.",
	  "codeLanguage": "bash",
	  "codeTokens": 207,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/nonpython.rst#2025-04-08_snippet_2",
	  "pageTitle": "Working with Non-Python Tests in pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "nonpython $ pytest -v\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y -- $PYTHON_PREFIX/bin/python\ncachedir: .pytest_cache\nrootdir: /home/sweet/project/nonpython\ncollecting ... collected 2 items\n\ntest_simple.yaml::hello FAILED                                       [ 50%]\ntest_simple.yaml::ok PASSED                                          [100%]\n\n================================= FAILURES =================================\n______________________________ usecase: hello ______________________________\nusecase execution failed\n   spec failed: 'some': 'other'\n   no further details known at this point.\n========================= short test summary info ==========================\nFAILED test_simple.yaml::hello\n======================= 1 failed, 1 passed in 0.12s ========================"
		}
	  ],
	  "relevance": 0.865
	},
	{
	  "codeTitle": "Using fixture_request with pytest.mark.parametrize",
	  "codeDescription": "This snippet demonstrates how the proposed 'fixture_request' helper could be used in combination with pytest.mark.parametrize for more flexible test parameterization.",
	  "codeLanguage": "python",
	  "codeTokens": 135,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/proposals/parametrize_with_fixtures.rst#2025-04-08_snippet_3",
	  "pageTitle": "Proposal: Parametrize with Fixtures in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.parametrize(\n    \"context, expected_response_code\",\n    [\n        (pytest.fixture_request(\"default_context\"), 0),\n        (pytest.fixture_request(\"extra_context\"), 0),\n    ],\n)\ndef test_generate_project(cookies, context, exit_code):\n    \"\"\"Call the cookiecutter API to generate a new project from a\n    template.\n    \"\"\"\n    result = cookies.bake(extra_context=context)\n\n    assert result.exit_code == exit_code"
		}
	  ],
	  "relevance": 0.865
	},
	{
	  "codeTitle": "Setting Faulthandler Timeout for Thread Dumps",
	  "codeDescription": "Configures pytest to dump tracebacks of all threads if a test takes longer than the specified number of seconds to run, useful for debugging hanging tests.",
	  "codeLanguage": "ini",
	  "codeTokens": 56,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_24",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# content of pytest.ini\n[pytest]\nfaulthandler_timeout=5"
		}
	  ],
	  "relevance": 0.862
	},
	{
	  "codeTitle": "Defining Test Function Patterns in pytest",
	  "codeDescription": "Specifies name prefixes or glob-patterns for identifying test functions and methods. This configuration determines which functions are considered as tests.",
	  "codeLanguage": "ini",
	  "codeTokens": 42,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_40",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\npython_functions = *_test"
		}
	  ],
	  "relevance": 0.86
	},
	{
	  "codeTitle": "Comparing Dataclasses in Python with Pytest",
	  "codeDescription": "This test creates two instances of a dataclass 'Foo' with different values and asserts their equality. The assertion fails due to the difference in the 'b' attribute.",
	  "codeLanguage": "python",
	  "codeTokens": 107,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_2",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_eq_dataclass(self):\n    from dataclasses import dataclass\n\n    @dataclass\n    class Foo:\n        a: int\n        b: str\n\n    left = Foo(1, \"b\")\n    right = Foo(1, \"c\")\n>   assert left == right"
		}
	  ],
	  "relevance": 0.86
	},
	{
	  "codeTitle": "Running a Specific Test Function with Pytest",
	  "codeDescription": "Command to run a specific test function within a module using the nodeid format with the :: separator.",
	  "codeLanguage": "bash",
	  "codeTokens": 43,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_3",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest tests/test_mod.py::test_func"
		}
	  ],
	  "relevance": 0.86
	},
	{
	  "codeTitle": "Using conftest.py to Dynamically Ignore Files During Collection",
	  "codeDescription": "Python code for a conftest.py file that dynamically excludes files from test collection based on Python version. It ignores setup.py and conditionally ignores Python 2 specific modules when running with Python 3.",
	  "codeLanguage": "python",
	  "codeTokens": 92,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#2025-04-08_snippet_7",
	  "pageTitle": "Pytest Test Discovery Configuration",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\nimport sys\n\ncollect_ignore = [\"setup.py\"]\nif sys.version_info[0] > 2:\n    collect_ignore.append(\"pkg/module_py2.py\")"
		}
	  ],
	  "relevance": 0.86
	},
	{
	  "codeTitle": "Running pytest with YAML Tests",
	  "codeDescription": "Command to execute pytest against a YAML test file, showing the output with one passing and one failing test based on the custom test collection and execution logic.",
	  "codeLanguage": "bash",
	  "codeTokens": 180,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/nonpython.rst#2025-04-08_snippet_1",
	  "pageTitle": "Working with Non-Python Tests in pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "nonpython $ pytest test_simple.yaml\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project/nonpython\ncollected 2 items\n\ntest_simple.yaml F.                                                  [100%]\n\n================================= FAILURES =================================\n______________________________ usecase: hello ______________________________\nusecase execution failed\n   spec failed: 'some': 'other'\n   no further details known at this point.\n========================= short test summary info ==========================\nFAILED test_simple.yaml::hello\n======================= 1 failed, 1 passed in 0.12s ========================"
		}
	  ],
	  "relevance": 0.86
	},
	{
	  "codeTitle": "Specifying Dependency Requirements for Pytest Project",
	  "codeDescription": "This code snippet lists the required dependencies for the Pytest project. It includes version specifications for packages like pluggy and sphinx, as well as various sphinx extensions and plugins needed for documentation and testing.",
	  "codeLanguage": "Text",
	  "codeTokens": 128,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/requirements.txt#2025-04-08_snippet_0",
	  "pageTitle": "Dependency Requirements for Pytest Project",
	  "codeList": [
		{
		  "language": "Text",
		  "code": "-c broken-dep-constraints.txt\npluggy>=1.5.0\npygments-pytest>=2.3.0\nsphinx-removed-in>=0.2.0\nsphinx>=7\nsphinxcontrib-trio\nsphinxcontrib-svg2pdfconverter\nfuro\nsphinxcontrib-towncrier\nsphinx-issues"
		}
	  ],
	  "relevance": 0.86
	},
	{
	  "codeTitle": "Configuring Directory Exclusion in pytest",
	  "codeDescription": "Sets the directory basename patterns to avoid when recursing for test discovery. This allows excluding certain directories from test collection.",
	  "codeLanguage": "ini",
	  "codeTokens": 47,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_37",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nnorecursedirs = .svn _build tmp*"
		}
	  ],
	  "relevance": 0.859
	},
	{
	  "codeTitle": "Running Tests in a Module with Pytest",
	  "codeDescription": "Command to run tests contained in a specific test module file.",
	  "codeLanguage": "bash",
	  "codeTokens": 31,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_0",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest test_mod.py"
		}
	  ],
	  "relevance": 0.856
	},
	{
	  "codeTitle": "Configuring Warning Filters",
	  "codeDescription": "Shows how to set up warning filters to control how pytest handles different types of warnings, in this case ignoring deprecation warnings and turning all others into errors.",
	  "codeLanguage": "ini",
	  "codeTokens": 63,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_25",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# content of pytest.ini\n[pytest]\nfilterwarnings =\n    error\n    ignore::DeprecationWarning"
		}
	  ],
	  "relevance": 0.855
	},
	{
	  "codeTitle": "Writing Well-Integrated Assertion Helpers in pytest",
	  "codeDescription": "This Python code demonstrates how to write a test helper function that integrates well with pytest's traceback hiding feature using the __tracebackhide__ option.",
	  "codeLanguage": "python",
	  "codeTokens": 98,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_7",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_checkconfig.py\nimport pytest\n\n\ndef checkconfig(x):\n    __tracebackhide__ = True\n    if not hasattr(x, \"config\"):\n        pytest.fail(f\"not configured: {x}\")\n\n\ndef test_something():\n    checkconfig(42)"
		}
	  ],
	  "relevance": 0.855
	},
	{
	  "codeTitle": "Running All Tests in a Class with Pytest",
	  "codeDescription": "Command to run all test methods within a specific test class using the nodeid format.",
	  "codeLanguage": "bash",
	  "codeTokens": 39,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_4",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest tests/test_mod.py::TestClass"
		}
	  ],
	  "relevance": 0.855
	},
	{
	  "codeTitle": "Configuring pytest.ini to Discover Tests in All Python Files",
	  "codeDescription": "Configuration that tells pytest to look for tests in all Python files, not just those matching the default pattern. This expands test discovery to any .py file.",
	  "codeLanguage": "ini",
	  "codeTokens": 56,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#2025-04-08_snippet_6",
	  "pageTitle": "Pytest Test Discovery Configuration",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# content of pytest.ini\n[pytest]\npython_files = *.py"
		}
	  ],
	  "relevance": 0.855
	},
	{
	  "codeTitle": "Configuring Empty Parameter Set Handling",
	  "codeDescription": "Shows how to configure how pytest handles empty parameter sets in parametrized tests, setting it to mark such tests as xfail instead of the default skip behavior.",
	  "codeLanguage": "ini",
	  "codeTokens": 58,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_23",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# content of pytest.ini\n[pytest]\nempty_parameter_set_mark = xfail"
		}
	  ],
	  "relevance": 0.855
	},
	{
	  "codeTitle": "Demonstrating TypeError with Integer Unpacking in Python with Pytest",
	  "codeDescription": "This test attempts to unpack an integer into two variables, resulting in a TypeError as integers are not iterable.",
	  "codeLanguage": "python",
	  "codeTokens": 55,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_17",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_z2_type_error(self):\n    items = 3\n>   a, b = items"
		}
	  ],
	  "relevance": 0.855
	},
	{
	  "codeTitle": "Disabling Collection of Imported Tests Configuration",
	  "codeDescription": "Shows how to configure pytest to only collect tests defined directly in test files (not imported from elsewhere) by setting collect_imported_tests to false.",
	  "codeLanguage": "ini",
	  "codeTokens": 48,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_19",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\ncollect_imported_tests = false"
		}
	  ],
	  "relevance": 0.855
	},
	{
	  "codeTitle": "Running Tests by Marker with Parameters with Pytest",
	  "codeDescription": "Command to run tests with a specific marker that has a parameter value set, using the -m option with quoted arguments.",
	  "codeLanguage": "bash",
	  "codeTokens": 48,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_8",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest -m \"slow(phase=1)\""
		}
	  ],
	  "relevance": 0.853
	},
	{
	  "codeTitle": "Defining int and float configuration values with parser.addini in pytest",
	  "codeDescription": "This code snippet shows how to define integer and floating-point configuration values using the parser.addini method in the pytest_addoption function. It demonstrates setting the type parameter to 'int' and 'float', along with default values and help text.",
	  "codeLanguage": "python",
	  "codeTokens": 111,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/changelog/11381.improvement.rst#2025-04-08_snippet_0",
	  "pageTitle": "Parser Configuration Types in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def pytest_addoption(parser):\n    parser.addini(\"int_value\", type=\"int\", default=2, help=\"my int value\")\n    parser.addini(\"float_value\", type=\"float\", default=4.2, help=\"my float value\")"
		}
	  ],
	  "relevance": 0.85
	},
	{
	  "codeTitle": "Configuring Doctest Options in pytest.ini",
	  "codeDescription": "Shows how to enable specific doctest options like NORMALIZE_WHITESPACE and IGNORE_EXCEPTION_DETAIL in pytest.ini.",
	  "codeLanguage": "ini",
	  "codeTokens": 50,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#2025-04-08_snippet_7",
	  "pageTitle": "Running Doctests with pytest",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\ndoctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL"
		}
	  ],
	  "relevance": 0.85
	},
	{
	  "codeTitle": "Running pytest with Doctest Modules",
	  "codeDescription": "Demonstrates running pytest with the --doctest-modules flag to include doctests from Python modules.",
	  "codeLanguage": "bash",
	  "codeTokens": 116,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#2025-04-08_snippet_4",
	  "pageTitle": "Running Doctests with pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "$ pytest --doctest-modules\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 2 items\n\nmymodule.py .                                                        [ 50%]\ntest_example.txt .                                                   [100%]\n\n============================ 2 passed in 0.12s ============================="
		}
	  ],
	  "relevance": 0.85
	},
	{
	  "codeTitle": "Running Tests from a Package with Pytest",
	  "codeDescription": "Command to run tests from a package by importing it and using its filesystem location to find tests, using the --pyargs option.",
	  "codeLanguage": "bash",
	  "codeTokens": 47,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_9",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --pyargs pkg.testing"
		}
	  ],
	  "relevance": 0.85
	},
	{
	  "codeTitle": "Running Tests Excluding Specific Markers in pytest",
	  "codeDescription": "This snippet demonstrates how to run all tests except those marked with 'webtest' using the pytest command-line interface. It shows the use of the 'not' keyword with the -m flag.",
	  "codeLanguage": "pytest",
	  "codeTokens": 63,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_2",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest -v -m \"not webtest\""
		}
	  ],
	  "relevance": 0.85
	},
	{
	  "codeTitle": "Demonstrating NameError in Python with Pytest",
	  "codeDescription": "This test attempts to use an undefined variable, resulting in a NameError.",
	  "codeLanguage": "python",
	  "codeTokens": 49,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_13",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_some_error(self):\n>   if namenotexi:  # noqa: F821"
		}
	  ],
	  "relevance": 0.85
	},
	{
	  "codeTitle": "Test Module with Different Failure Scenarios for Result Information",
	  "codeDescription": "Defines tests that fail in different ways: one fails during setup (through a failing fixture), one fails during call, and one is a simple failing test. This demonstrates how the fixture can report on different failure types.",
	  "codeLanguage": "python",
	  "codeTokens": 111,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_27",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_module.py\n\nimport pytest\n\n\n@pytest.fixture\ndef other():\n    assert 0\n\n\ndef test_setup_fails(something, other):\n    pass\n\n\ndef test_call_fails(something):\n    assert 0\n\n\ndef test_fail2():\n    assert 0"
		}
	  ],
	  "relevance": 0.85
	},
	{
	  "codeTitle": "Implementing Command Line Option Dependent Test in Python",
	  "codeDescription": "This Python code shows how to write a test function that depends on a command line option. It uses a fixture to pass the option value to the test.",
	  "codeLanguage": "python",
	  "codeTokens": 95,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_2",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_sample.py\ndef test_answer(cmdopt):\n    if cmdopt == \"type1\":\n        print(\"first\")\n    elif cmdopt == \"type2\":\n        print(\"second\")\n    assert 0  # to see what was printed"
		}
	  ],
	  "relevance": 0.847
	},
	{
	  "codeTitle": "Setting Log CLI Level in pytest",
	  "codeDescription": "Sets the minimum log message level that should be captured for live logging. This can be specified using integer values or level names, controlling which messages are displayed during test execution.",
	  "codeLanguage": "ini",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_27",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nlog_cli_level = INFO"
		}
	  ],
	  "relevance": 0.845
	},
	{
	  "codeTitle": "Warning Filter Configuration in pytest.ini",
	  "codeDescription": "Shows how to configure warning filters in the pytest.ini file to ignore specific warnings and treat others as errors.",
	  "codeLanguage": "ini",
	  "codeTokens": 70,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_3",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# pytest.ini\n[pytest]\nfilterwarnings =\n    error\n    ignore::UserWarning\n    ignore:function ham\\(\\) is deprecated:DeprecationWarning"
		}
	  ],
	  "relevance": 0.845
	},
	{
	  "codeTitle": "Passing Arguments to Pytest from Python Code",
	  "codeDescription": "Example of passing explicit command-line arguments to pytest.main() when invoking it from Python code.",
	  "codeLanguage": "python",
	  "codeTokens": 47,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_15",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "python",
		  "code": "retcode = pytest.main([\"-x\", \"mytestdir\"])"
		}
	  ],
	  "relevance": 0.845
	},
	{
	  "codeTitle": "Demonstrating Plain Assertions in Early pytest Concept",
	  "codeDescription": "This code snippet from around 2004 demonstrates the core concept behind pytest - using Python's built-in assert statement rather than specialized assertion methods. This approach was revolutionary compared to unittest's Java-like style.",
	  "codeLanguage": "python",
	  "codeTokens": 53,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/history.rst#2025-04-08_snippet_0",
	  "pageTitle": "History of pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "assert x == y"
		}
	  ],
	  "relevance": 0.845
	},
	{
	  "codeTitle": "Testing Unexpected Exception Raising in Python with Pytest",
	  "codeDescription": "This test uses the 'raises' function to check if an OSError is raised when converting a numeric string to an integer. The test fails because no exception is raised.",
	  "codeLanguage": "python",
	  "codeTokens": 64,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_9",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_raises_doesnt(self):\n>   raises(OSError, int, \"3\")"
		}
	  ],
	  "relevance": 0.845
	},
	{
	  "codeTitle": "Demonstrating TypeError in Python with Pytest",
	  "codeDescription": "This test attempts to unpack a single integer (popped from a list) into two variables, resulting in a TypeError as integers are not iterable.",
	  "codeLanguage": "python",
	  "codeTokens": 89,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_12",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_reinterpret_fails_with_print_for_the_fun_of_it(self):\n    items = [1, 2, 3]\n    print(f\"items is {items!r}\")\n>   a, b = items.pop()"
		}
	  ],
	  "relevance": 0.845
	},
	{
	  "codeTitle": "Detecting pytest Execution in Python",
	  "codeDescription": "Demonstrates how to detect if the code is running within a pytest environment using an environment variable check.",
	  "codeLanguage": "python",
	  "codeTokens": 87,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_10",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import os\n\n\nif os.environ.get(\"PYTEST_VERSION\") is not None:\n    # Things you want to to do if your code is called by pytest.\n    ...\nelse:\n    # Things you want to to do if your code is not called by pytest.\n    ..."
		}
	  ],
	  "relevance": 0.844
	},
	{
	  "codeTitle": "Visualizing Test Directory Structure in Text Format",
	  "codeDescription": "Illustrates a sample test directory structure for demonstrating ignore and collection features. The structure includes example, foobar, and hello/world test directories with multiple test files.",
	  "codeLanguage": "text",
	  "codeTokens": 143,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest Test Discovery Configuration",
	  "codeList": [
		{
		  "language": "text",
		  "code": "tests/\n|-- example\n|   |-- test_example_01.py\n|   |-- test_example_02.py\n|   '-- test_example_03.py\n|-- foobar\n|   |-- test_foobar_01.py\n|   |-- test_foobar_02.py\n|   '-- test_foobar_03.py\n'-- hello\n    '-- world\n        |-- test_world_01.py\n        |-- test_world_02.py\n        '-- test_world_03.py"
		}
	  ],
	  "relevance": 0.841
	},
	{
	  "codeTitle": "Setting Default Fixtures in Pytest",
	  "codeDescription": "Configures fixtures that will be applied to all test functions, equivalent to using @pytest.mark.usefixtures decorator globally.",
	  "codeLanguage": "ini",
	  "codeTokens": 42,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_48",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nusefixtures =\n    clean_db"
		}
	  ],
	  "relevance": 0.84
	},
	{
	  "codeTitle": "Accessing Custom Mark Attributes",
	  "codeDescription": "Shows how to access the arguments and keyword arguments of a custom mark object when retrieved from a test function.",
	  "codeLanguage": "python",
	  "codeTokens": 49,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_4",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "mark.args == (10, \"slow\")\nmark.kwargs == {\"method\": \"thread\"}"
		}
	  ],
	  "relevance": 0.84
	},
	{
	  "codeTitle": "Setting Log Format in pytest",
	  "codeDescription": "Sets a logging-compatible string used to format captured logging messages. This configuration option defines how log messages will be structured for general logging capture.",
	  "codeLanguage": "ini",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_33",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nlog_format = %(asctime)s %(levelname)s %(message)s"
		}
	  ],
	  "relevance": 0.84
	},
	{
	  "codeTitle": "Using Custom Plugins with Pytest from Python Code",
	  "codeDescription": "Example of creating a custom plugin class and passing it to pytest.main() when invoking pytest programmatically from Python. The plugin implements a hook that executes when the test session finishes.",
	  "codeLanguage": "python",
	  "codeTokens": 106,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_16",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of myinvoke.py\nimport sys\n\nimport pytest\n\n\nclass MyPlugin:\n    def pytest_sessionfinish(self):\n        print(\"*** test run reporting finishing\")\n\n\nif __name__ == \"__main__\":\n    sys.exit(pytest.main([\"-qq\"], plugins=[MyPlugin()]))"
		}
	  ],
	  "relevance": 0.84
	},
	{
	  "codeTitle": "Using record_property fixture to add custom properties to XML reports",
	  "codeDescription": "Demonstrates how to use the record_property fixture to add additional information to a test case in the JUnitXML report as child property elements.",
	  "codeLanguage": "python",
	  "codeTokens": 57,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_15",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_function(record_property):\n    record_property(\"example_key\", 1)\n    assert True"
		}
	  ],
	  "relevance": 0.84
	},
	{
	  "codeTitle": "Custom Multiline Assert Message",
	  "codeDescription": "Test case demonstrating multiline custom assertion message with class attribute comparison across multiple lines.",
	  "codeLanguage": "python",
	  "codeTokens": 82,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_22",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_multiline(self):\n    class A:\n        a = 1\n    b = 2\n    assert (\n        A.a == b\n    ), \"A.a appears not to be b\\nor does not appear to be b\\none of those\""
		}
	  ],
	  "relevance": 0.84
	},
	{
	  "codeTitle": "Setting up Development Mode for Testing with pytest",
	  "codeDescription": "This command shows how to install a repository in development mode using pip, allowing tests to run against the local codebase as if it were installed. This creates a symlink to your code in site-packages, making it easier to edit code and immediately test changes without reinstallation.",
	  "codeLanguage": "bash",
	  "codeTokens": 95,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/existingtestsuite.rst#2025-04-08_snippet_0",
	  "pageTitle": "Using pytest with Existing Test Suites",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "cd <repository>\npip install -e .  # Environment dependent alternatives include\n                      # 'python setup.py develop' and 'conda develop'"
		}
	  ],
	  "relevance": 0.84
	},
	{
	  "codeTitle": "Displaying Available Fixtures in Pytest (Command Line)",
	  "codeDescription": "This command shows all available fixtures in pytest, including those with leading underscores when the -v flag is used.",
	  "codeLanguage": "bash",
	  "codeTokens": 44,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest API and Builtin Fixtures Documentation",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "$ pytest  --fixtures -v"
		}
	  ],
	  "relevance": 0.838
	},
	{
	  "codeTitle": "Sample Python Test Class Using Custom Naming Convention",
	  "codeDescription": "Example Python test class that follows custom naming conventions defined in pytest.ini. The class is prefixed with 'Check' and methods end with '_check' to match the custom patterns.",
	  "codeLanguage": "python",
	  "codeTokens": 76,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#2025-04-08_snippet_2",
	  "pageTitle": "Pytest Test Discovery Configuration",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of check_myapp.py\nclass CheckMyApp:\n    def simple_check(self):\n        pass\n\n    def complex_check(self):\n        pass"
		}
	  ],
	  "relevance": 0.835
	},
	{
	  "codeTitle": "Listing available pytest fixtures",
	  "codeDescription": "Command to display all available fixtures in pytest, including both built-in and custom fixtures. The command omits fixtures with leading underscore unless the -v option is added.",
	  "codeLanguage": "bash",
	  "codeTokens": 53,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#2025-04-08_snippet_12",
	  "pageTitle": "Getting Started with pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --fixtures   # shows builtin and custom fixtures"
		}
	  ],
	  "relevance": 0.835
	},
	{
	  "codeTitle": "Implementing Custom Directory Collector with manifest.json in pytest",
	  "codeDescription": "This code snippet shows a pytest plugin that implements a custom directory collector using a manifest.json file. It defines a ManifestDirectory class that reads the manifest file and collects only the specified test files.",
	  "codeLanguage": "Python",
	  "codeTokens": 184,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/customdirectory.rst#2025-04-08_snippet_0",
	  "pageTitle": "Custom Directory Collection in pytest",
	  "codeList": [
		{
		  "language": "Python",
		  "code": "import json\nfrom pathlib import Path\n\nimport pytest\n\n\nclass ManifestDirectory(pytest.Directory):\n    def collect(self):\n        manifest_path = self.path.joinpath(\"manifest.json\")\n        if not manifest_path.is_file():\n            return super().collect()\n\n        manifest = json.loads(manifest_path.read_text())\n        for file in manifest[\"files\"]:\n            file_path = self.path.joinpath(file)\n            if file_path.is_file():\n                yield from self.gethookproxy(file_path).pytest_collect_file(file_path, parent=self)\n\n\ndef pytest_collect_directory(path, parent):\n    if path.joinpath(\"manifest.json\").is_file():\n        return ManifestDirectory.from_parent(parent, path=path)"
		}
	  ],
	  "relevance": 0.835
	},
	{
	  "codeTitle": "Hook Ordering Examples in pytest",
	  "codeDescription": "Demonstrates different ways to control hook execution order using tryfirst, trylast, and wrapper decorators.",
	  "codeLanguage": "python",
	  "codeTokens": 153,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#2025-04-08_snippet_2",
	  "pageTitle": "Writing Hook Functions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# Plugin 1\n@pytest.hookimpl(tryfirst=True)\ndef pytest_collection_modifyitems(items):\n    # will execute as early as possible\n    ...\n\n\n# Plugin 2\n@pytest.hookimpl(trylast=True)\ndef pytest_collection_modifyitems(items):\n    # will execute as late as possible\n    ...\n\n\n# Plugin 3\n@pytest.hookimpl(wrapper=True)\ndef pytest_collection_modifyitems(items):\n    # will execute even before the tryfirst one above!\n    try:\n        return (yield)\n    finally:\n        # will execute after all non-wrappers executed\n        ..."
		}
	  ],
	  "relevance": 0.835
	},
	{
	  "codeTitle": "Running a test with temporary directory fixture",
	  "codeDescription": "Example output when running a test that uses the tmp_path fixture, showing the creation of a unique temporary directory path that is passed to the test function.",
	  "codeLanguage": "pytest",
	  "codeTokens": 172,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#2025-04-08_snippet_11",
	  "pageTitle": "Getting Started with pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest -q test_tmp_path.py\nF                                                                    [100%]\n================================= FAILURES =================================\n_____________________________ test_needsfiles ______________________________\n\ntmp_path = PosixPath('PYTEST_TMPDIR/test_needsfiles0')\n\n    def test_needsfiles(tmp_path):\n        print(tmp_path)\n>       assert 0\nE       assert 0\n\ntest_tmp_path.py:3: AssertionError\n--------------------------- Captured stdout call ---------------------------\nPYTEST_TMPDIR/test_needsfiles0\n========================= short test summary info ==========================\nFAILED test_tmp_path.py::test_needsfiles - assert 0\n1 failed in 0.12s"
		}
	  ],
	  "relevance": 0.835
	},
	{
	  "codeTitle": "Setting Python Path in pytest Configuration",
	  "codeDescription": "TOML configuration to add src directory to Python path for test execution",
	  "codeLanguage": "toml",
	  "codeTokens": 38,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/goodpractices.rst#2025-04-08_snippet_3",
	  "pageTitle": "Python Testing Best Practices with pytest",
	  "codeList": [
		{
		  "language": "toml",
		  "code": "[tool.pytest.ini_options]\npythonpath = \"src\""
		}
	  ],
	  "relevance": 0.835
	},
	{
	  "codeTitle": "Porting testscenarios to pytest",
	  "codeDescription": "This snippet demonstrates how to port testscenarios to pytest. It uses pytest_generate_tests to create parametrized tests from scenario data, allowing for class-scoped parametrization.",
	  "codeLanguage": "python",
	  "codeTokens": 222,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_2",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_scenarios.py\n\n\ndef pytest_generate_tests(metafunc):\n    idlist = []\n    argvalues = []\n    for scenario in metafunc.cls.scenarios:\n        idlist.append(scenario[0])\n        items = scenario[1].items()\n        argnames = [x[0] for x in items]\n        argvalues.append([x[1] for x in items])\n    metafunc.parametrize(argnames, argvalues, ids=idlist, scope=\"class\")\n\n\nscenario1 = (\"basic\", {\"attribute\": \"value\"})\nscenario2 = (\"advanced\", {\"attribute\": \"value2\"})\n\n\nclass TestSampleWithScenarios:\n    scenarios = [scenario1, scenario2]\n\n    def test_demo1(self, attribute):\n        assert isinstance(attribute, str)\n\n    def test_demo2(self, attribute):\n        assert isinstance(attribute, str)"
		}
	  ],
	  "relevance": 0.835
	},
	{
	  "codeTitle": "Running pytest on Non-Package Structure",
	  "codeDescription": "Command to run pytest on a directory structure without package organization, where pytest will modify sys.path to import standalone modules.",
	  "codeLanguage": "bash",
	  "codeTokens": 40,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/pythonpath.rst#2025-04-08_snippet_3",
	  "pageTitle": "Understanding pytest Import Mechanisms and Path Configuration",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest root/"
		}
	  ],
	  "relevance": 0.832
	},
	{
	  "codeTitle": "Custom Repr Assert Message",
	  "codeDescription": "Test case showing custom object representation in assertion messages using __repr__ method override.",
	  "codeLanguage": "python",
	  "codeTokens": 89,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_23",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_custom_repr(self):\n    class JSON:\n        a = 1\n        def __repr__(self):\n            return \"This is JSON\\n{\\n  'foo': 'bar'\\n}\"\n    a = JSON()\n    b = 2\n    assert a.a == b, a"
		}
	  ],
	  "relevance": 0.83
	},
	{
	  "codeTitle": "Testing Equivalent Functionality Across Different Implementations in Pytest",
	  "codeDescription": "Creates a test that compares the output of equivalent functions from different modules, using fixtures to handle the imports.",
	  "codeLanguage": "python",
	  "codeTokens": 75,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_13",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_module.py\n\n\ndef test_func1(basemod, optmod):\n    assert round(basemod.func1(), 3) == round(optmod.func1(), 3)"
		}
	  ],
	  "relevance": 0.83
	},
	{
	  "codeTitle": "Implementing Configuration Hook",
	  "codeDescription": "Simple example of implementing a configuration hook in conftest.py.",
	  "codeLanguage": "python",
	  "codeTokens": 37,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#2025-04-08_snippet_8",
	  "pageTitle": "Writing Hook Functions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def pytest_config_file_default_value():\n    return \"config.yaml\""
		}
	  ],
	  "relevance": 0.83
	},
	{
	  "codeTitle": "Using Hooks in pytest_addoption",
	  "codeDescription": "Example of using hooks to customize command line option definitions, including defining hook specifications and implementations.",
	  "codeLanguage": "python",
	  "codeTokens": 183,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#2025-04-08_snippet_7",
	  "pageTitle": "Writing Hook Functions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of hooks.py\n\n# Use firstresult=True because we only want one plugin to define this\n# default value\n@hookspec(firstresult=True)\ndef pytest_config_file_default_value():\n    \"\"\"Return the default value for the config file command line option.\"\"\"\n\n\n# contents of myplugin.py\n\n\ndef pytest_addhooks(pluginmanager):\n    \"\"\"This example assumes the hooks are grouped in the 'hooks' module.\"\"\"\n    from . import hooks\n\n    pluginmanager.add_hookspecs(hooks)\n\n\ndef pytest_addoption(parser, pluginmanager):\n    default_value = pluginmanager.hook.pytest_config_file_default_value()\n    parser.addoption(\n        \"--config-file\",\n        help=\"Config file to use, defaults to %(default)s\",\n        default=default_value,\n    )"
		}
	  ],
	  "relevance": 0.83
	},
	{
	  "codeTitle": "Deprecated setuptools Command for Running Pytest",
	  "codeDescription": "This snippet shows the deprecated 'python setup.py test' command that is not recommended for running pytest as it relies on deprecated setuptools features and bypasses pip security mechanisms.",
	  "codeLanguage": "python",
	  "codeTokens": 49,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/goodpractices.rst#2025-04-08_snippet_4",
	  "pageTitle": "Python Testing Best Practices with pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "python setup.py test"
		}
	  ],
	  "relevance": 0.83
	},
	{
	  "codeTitle": "Demonstrating Type Checking Limitations Example",
	  "codeDescription": "Shows how type checking can catch potential None returns that tests might miss, even with full coverage.",
	  "codeLanguage": "python",
	  "codeTokens": 67,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/types.rst#2025-04-08_snippet_0",
	  "pageTitle": "Typing Guide for pytest Tests",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def get_caption(target: int, items: list[tuple[int, str]]) -> str:\n    for value, caption in items:\n        if value == target:\n            return caption"
		}
	  ],
	  "relevance": 0.83
	},
	{
	  "codeTitle": "Configuring Pytest Console Output Style for Test Times",
	  "codeDescription": "Setting console_output_style to 'times' in pytest configuration to display execution time for each test case. This helps track test performance and identify slow tests.",
	  "codeLanguage": "python",
	  "codeTokens": 49,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/changelog/13125.feature.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest Console Output Style Configuration",
	  "codeList": [
		{
		  "language": "python",
		  "code": "console_output_style = \"times\""
		}
	  ],
	  "relevance": 0.829
	},
	{
	  "codeTitle": "Using pytest.raises with Improved String Diff Output in Python",
	  "codeDescription": "The pytest.raises function now prints a helpful string diff when matching fails. This occurs when the match parameter has '^' and '$' characters and is otherwise escaped. This enhancement improves debugging and error analysis in pytest.",
	  "codeLanguage": "Python",
	  "codeTokens": 65,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/changelog/13192.feature.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest Raises Function Enhancement",
	  "codeList": [
		{
		  "language": "Python",
		  "code": "pytest.raises(SomeException, match=\"^expected pattern$\")"
		}
	  ],
	  "relevance": 0.826
	},
	{
	  "codeTitle": "Specifying Required Plugins in pytest",
	  "codeDescription": "Lists plugins that must be present for pytest to run. This configuration ensures that necessary plugins are available, optionally with version specifiers.",
	  "codeLanguage": "ini",
	  "codeTokens": 68,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_42",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nrequired_plugins = pytest-django>=3.0.0,<4.0.0 pytest-html pytest-xdist>=1.0.0"
		}
	  ],
	  "relevance": 0.825
	},
	{
	  "codeTitle": "Autouse Fixture in unittest.TestCase for Directory Setup (Python)",
	  "codeDescription": "Example of an autouse fixture 'initdir' within a unittest.TestCase class. This fixture sets up a temporary directory and initializes a sample file for each test method execution.",
	  "codeLanguage": "python",
	  "codeTokens": 154,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/unittest.rst#2025-04-08_snippet_3",
	  "pageTitle": "Running unittest-based Tests with pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import unittest\nimport pytest\n\nclass MyTest(unittest.TestCase):\n    @pytest.fixture(autouse=True)\n    def initdir(self, tmp_path, monkeypatch):\n        monkeypatch.chdir(tmp_path)  # change to pytest-provided temporary directory\n        tmp_path.joinpath(\"samplefile.ini\").write_text(\"# testdata\", encoding=\"utf-8\")\n\n    def test_method(self):\n        with open(\"samplefile.ini\", encoding=\"utf-8\") as f:\n            s = f.read()\n        assert \"testdata\" in s"
		}
	  ],
	  "relevance": 0.825
	},
	{
	  "codeTitle": "Storing Data in Pytest Item Stash During Test Setup",
	  "codeDescription": "Shows how to store data in an item's stash during the test setup phase using predefined stash keys.",
	  "codeLanguage": "python",
	  "codeTokens": 70,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#2025-04-08_snippet_11",
	  "pageTitle": "Writing Hook Functions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def pytest_runtest_setup(item: pytest.Item) -> None:\n    item.stash[been_there_key] = True\n    item.stash[done_that_key] = \"no\""
		}
	  ],
	  "relevance": 0.825
	},
	{
	  "codeTitle": "Implementing Deferred Plugin Hooks in Python for Pytest",
	  "codeDescription": "Shows how to implement plugin hooks conditionally by deferring them to a separate plugin class. This approach prevents validation errors when dependent plugins are not installed.",
	  "codeLanguage": "python",
	  "codeTokens": 113,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#2025-04-08_snippet_9",
	  "pageTitle": "Writing Hook Functions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of myplugin.py\n\n\nclass DeferPlugin:\n    \"\"\"Simple plugin to defer pytest-xdist hook functions.\"\"\"\n\n    def pytest_testnodedown(self, node, error):\n        \"\"\"standard xdist hook function.\"\"\"\n\n\ndef pytest_configure(config):\n    if config.pluginmanager.hasplugin(\"xdist\"):\n        config.pluginmanager.register(DeferPlugin())"
		}
	  ],
	  "relevance": 0.825
	},
	{
	  "codeTitle": "Converting Custom Node Constructors from Fixed Parameters to Kwargs",
	  "codeDescription": "Shows how to update custom pytest Item subclasses to use **kwargs in their constructors instead of fixed parameter lists. This pattern allows compatibility with future pytest versions by avoiding hard-coding arguments.",
	  "codeLanguage": "python",
	  "codeTokens": 87,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#2025-04-08_snippet_2",
	  "pageTitle": "Deprecations and Removals in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "class CustomItem(pytest.Item):\n    def __init__(self, name, parent, additional_arg):\n        super().__init__(name, parent)\n        self.additional_arg = additional_arg"
		},
		{
		  "language": "python",
		  "code": "class CustomItem(pytest.Item):\n    def __init__(self, *, additional_arg, **kwargs):\n        super().__init__(**kwargs)\n        self.additional_arg = additional_arg"
		}
	  ],
	  "relevance": 0.825
	},
	{
	  "codeTitle": "Test Case with Full Coverage but Missing Edge Case",
	  "codeDescription": "Demonstrates a test case that achieves 100% coverage but fails to catch a potential None return.",
	  "codeLanguage": "python",
	  "codeTokens": 64,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/types.rst#2025-04-08_snippet_1",
	  "pageTitle": "Typing Guide for pytest Tests",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_get_caption() -> None:\n    assert get_caption(10, [(1, \"foo\"), (10, \"bar\")]) == \"bar\""
		}
	  ],
	  "relevance": 0.825
	},
	{
	  "codeTitle": "Implementing Per-Class Parametrization Configuration in Pytest",
	  "codeDescription": "Demonstrates a class-based parametrization scheme using pytest_generate_tests function to define different parameter sets for different test methods in a class.",
	  "codeLanguage": "python",
	  "codeTokens": 234,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_8",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of ./test_parametrize.py\nimport pytest\n\n\ndef pytest_generate_tests(metafunc):\n    # called once per each test function\n    funcarglist = metafunc.cls.params[metafunc.function.__name__]\n    argnames = sorted(funcarglist[0])\n    metafunc.parametrize(\n        argnames, [[funcargs[name] for name in argnames] for funcargs in funcarglist]\n    )\n\n\nclass TestClass:\n    # a map specifying multiple argument sets for a test method\n    params = {\n        \"test_equals\": [dict(a=1, b=2), dict(a=3, b=3)],\n        \"test_zerodivision\": [dict(a=1, b=0)],\n    }\n\n    def test_equals(self, a, b):\n        assert a == b\n\n    def test_zerodivision(self, a, b):\n        with pytest.raises(ZeroDivisionError):\n            a / b"
		}
	  ],
	  "relevance": 0.825
	},
	{
	  "codeTitle": "Executing Pytest with Stepwise Mode",
	  "codeDescription": "Command line examples showing how to use pytest's stepwise mode for incremental test execution and debugging. The --stepwise flag stops at first failing test and maintains state between runs. Also demonstrates the new --stepwise-reset flag for resetting the stepwise state.",
	  "codeLanguage": "bash",
	  "codeTokens": 66,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/changelog/13122.improvement.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest Stepwise Mode Documentation",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "--stepwise"
		},
		{
		  "language": "bash",
		  "code": "--stepwise-reset"
		},
		{
		  "language": "bash",
		  "code": "--sw-reset"
		}
	  ],
	  "relevance": 0.823
	},
	{
	  "codeTitle": "Listing Available Markers in pytest",
	  "codeDescription": "This example shows how to list all available markers in a pytest suite, including custom and built-in markers, using the --markers command-line option.",
	  "codeLanguage": "pytest",
	  "codeTokens": 46,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_7",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest --markers"
		}
	  ],
	  "relevance": 0.82
	},
	{
	  "codeTitle": "Running pytest with report-on-xfail option",
	  "codeDescription": "This snippet shows the command to run pytest with the report-on-xfail option and displays the expected output. It demonstrates how xfail tests are reported.",
	  "codeLanguage": "pytest",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_16",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "! pytest -rx xfail_demo.py"
		}
	  ],
	  "relevance": 0.82
	},
	{
	  "codeTitle": "Running pytest with report-on-xfail option",
	  "codeDescription": "This snippet shows the command to run pytest with the report-on-xfail option and displays the expected output. It demonstrates how xfail tests are reported.",
	  "codeLanguage": "pytest",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_16",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "! pytest -rx xfail_demo.py"
		}
	  ],
	  "relevance": 0.82
	},
	{
	  "codeTitle": "Asserting on log tuples in pytest",
	  "codeDescription": "Shows how to assert on log records using the record_tuples attribute of the caplog fixture in a test function.",
	  "codeLanguage": "python",
	  "codeTokens": 69,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#2025-04-08_snippet_10",
	  "pageTitle": "Managing Logging in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_foo(caplog):\n    logging.getLogger().info(\"boo %s\", \"arg\")\n\n    assert caplog.record_tuples == [(\"root\", logging.INFO, \"boo arg\")]"
		}
	  ],
	  "relevance": 0.82
	},
	{
	  "codeTitle": "Accessing Plugin By Name in Python",
	  "codeDescription": "Example showing how to access another plugin using the plugin manager's get_plugin method",
	  "codeLanguage": "python",
	  "codeTokens": 40,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#2025-04-08_snippet_0",
	  "pageTitle": "Writing and Testing Pytest Plugins Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "plugin = config.pluginmanager.get_plugin(\"name_of_plugin\")"
		}
	  ],
	  "relevance": 0.82
	},
	{
	  "codeTitle": "Testing String Containment with pytest",
	  "codeDescription": "A test function that checks for a substring in a long text string, demonstrating how pytest handles string comparison failures without truncation.",
	  "codeLanguage": "python",
	  "codeTokens": 65,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_7",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_long_text_fail():\n    long_text = \"Lorem ipsum dolor sit amet \" * 10\n    assert \"hello world\" in long_text"
		}
	  ],
	  "relevance": 0.82
	},
	{
	  "codeTitle": "Configuring Log File Level in pytest",
	  "codeDescription": "Sets the minimum log message level that should be captured for the logging file. This can be specified using integer values or level names, controlling which messages are written to the log file.",
	  "codeLanguage": "ini",
	  "codeTokens": 54,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_32",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nlog_file_level = INFO"
		}
	  ],
	  "relevance": 0.82
	},
	{
	  "codeTitle": "Using Custom Check Function with pytest.raises in Python",
	  "codeDescription": "Demonstrates the new syntax for using a custom check function with pytest.raises. The function 'fn' takes the raised exception as input and returns a boolean. The test passes if an exception is raised and 'fn' returns True, while it propagates the exception if 'fn' returns False.",
	  "codeLanguage": "python",
	  "codeTokens": 81,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/changelog/13192.feature.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest Raises Function Enhancement with Custom Check Function",
	  "codeList": [
		{
		  "language": "python",
		  "code": "with pytest.raises(check=fn):"
		}
	  ],
	  "relevance": 0.82
	},
	{
	  "codeTitle": "One-time Activation of Argcomplete for pytest in Bash",
	  "codeDescription": "This command provides a one-time activation of argcomplete for pytest in the current bash session.",
	  "codeLanguage": "bash",
	  "codeTokens": 39,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/bash-completion.rst#2025-04-08_snippet_3",
	  "pageTitle": "Setting up Bash Completion for pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "eval \"$(register-python-argcomplete pytest)\""
		}
	  ],
	  "relevance": 0.817
	},
	{
	  "codeTitle": "Example of Test Collection with Imported Classes",
	  "codeDescription": "Demonstrates a scenario where pytest might collect an imported production class as a test because it starts with 'Test', which can be prevented by setting collect_imported_tests=false.",
	  "codeLanguage": "python",
	  "codeTokens": 76,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_20",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of src/domain.py\nclass Testament: ...\n\n\n# contents of tests/test_testament.py\nfrom domain import Testament\n\n\ndef test_testament(): ..."
		}
	  ],
	  "relevance": 0.815
	},
	{
	  "codeTitle": "Advanced pytest.RaisesGroup Usage (Python)",
	  "codeDescription": "Shows advanced usage of pytest.RaisesGroup with match and check parameters.",
	  "codeLanguage": "python",
	  "codeTokens": 99,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#2025-04-08_snippet_7",
	  "pageTitle": "Writing and Reporting Assertions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_raisesgroup_match_and_check():\n    with pytest.RaisesGroup(BaseException, match=\"my group msg\"):\n        raise BaseExceptionGroup(\"my group msg\", [KeyboardInterrupt()])\n    with pytest.RaisesGroup(\n        Exception, check=lambda eg: isinstance(eg.__cause__, ValueError)\n    ):\n        raise ExceptionGroup(\"\", [TypeError()]) from ValueError()"
		}
	  ],
	  "relevance": 0.815
	},
	{
	  "codeTitle": "Testing Pytest Plugin with Pytester",
	  "codeDescription": "Example showing how to test a pytest plugin using the pytester fixture, including temporary test file creation and result assertion",
	  "codeLanguage": "python",
	  "codeTokens": 213,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#2025-04-08_snippet_4",
	  "pageTitle": "Writing and Testing Pytest Plugins Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_hello(pytester):\n    \"\"\"Make sure that our plugin works.\"\"\"\n\n    # create a temporary conftest.py file\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture(params=[\n            \"Brianna\",\n            \"Andreas\",\n            \"Floris\",\n        ])\n        def name(request):\n            return request.param\n    \"\"\"\n    )\n\n    # create a temporary pytest test file\n    pytester.makepyfile(\n        \"\"\"\n        def test_hello_default(hello):\n            assert hello() == \"Hello World!\"\n\n        def test_hello_name(hello, name):\n            assert hello(name) == \"Hello {0}!\".format(name)\n    \"\"\"\n    )\n\n    # run all tests with pytest\n    result = pytester.runpytest()\n\n    # check that all 4 tests passed\n    result.assert_outcomes(passed=4)"
		}
	  ],
	  "relevance": 0.815
	},
	{
	  "codeTitle": "Using record_xml_attribute fixture to add or override XML attributes",
	  "codeDescription": "Demonstrates how to use the experimental record_xml_attribute fixture to add custom attributes to a test case element or override existing ones in the JUnitXML report.",
	  "codeLanguage": "python",
	  "codeTokens": 83,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_18",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_function(record_xml_attribute):\n    record_xml_attribute(\"assertions\", \"REQ-1234\")\n    record_xml_attribute(\"classname\", \"custom_classname\")\n    print(\"hello world\")\n    assert True"
		}
	  ],
	  "relevance": 0.815
	},
	{
	  "codeTitle": "Configuring Test Collection Ignore Pattern",
	  "codeDescription": "Configures test collection to ignore specific files using exact paths.",
	  "codeLanguage": "python",
	  "codeTokens": 29,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_10",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "collect_ignore = [\"setup.py\"]"
		}
	  ],
	  "relevance": 0.815
	},
	{
	  "codeTitle": "Using the DB Fixture in Test Module A2",
	  "codeDescription": "Another test module that uses the same package-scoped DB fixture. This demonstrates that both test modules in the same directory receive the same DB fixture instance.",
	  "codeLanguage": "python",
	  "codeTokens": 68,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_22",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of a/test_db2.py\ndef test_a2(db):\n    assert 0, db  # to show value"
		}
	  ],
	  "relevance": 0.815
	},
	{
	  "codeTitle": "Setting Debug Breakpoint in pytest (Legacy Method)",
	  "codeDescription": "Demonstrates the pre-2.4 version method of setting a breakpoint in pytest using pytest.set_trace(). This approach is now deprecated in favor of using Python's built-in pdb.set_trace().",
	  "codeLanguage": "python",
	  "codeTokens": 71,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/historical-notes.rst#2025-04-08_snippet_6",
	  "pageTitle": "Historical Notes in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n\ndef test_function():\n    ...\n    pytest.set_trace()  # invoke PDB debugger and tracing"
		}
	  ],
	  "relevance": 0.814
	},
	{
	  "codeTitle": "Migrating Node Construction to from_parent in Python",
	  "codeDescription": "Demonstrates how to update node construction to use the new from_parent named constructor instead of direct instantiation. This change enables better refactoring of the collection tree.",
	  "codeLanguage": "python",
	  "codeTokens": 112,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#2025-04-08_snippet_10",
	  "pageTitle": "Deprecations and Removals in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def pytest_pycollect_makeitem(collector, name, obj):\n    if hasattr(MyItem, \"from_parent\"):\n        item = MyItem.from_parent(collector, name=\"foo\")\n        item.obj = 42\n        return item\n    else:\n        return MyItem(name=\"foo\", parent=collector, obj=42)"
		}
	  ],
	  "relevance": 0.811
	},
	{
	  "codeTitle": "Setting Test Case Verbosity in Pytest",
	  "codeDescription": "Configures verbosity level specifically for test case execution output, independent of global verbosity settings.",
	  "codeLanguage": "ini",
	  "codeTokens": 36,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_50",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nverbosity_test_cases = 2"
		}
	  ],
	  "relevance": 0.81
	},
	{
	  "codeTitle": "Testing Fixture Order Based on Scope",
	  "codeDescription": "Demonstrates how fixtures with higher scopes (session) are executed before lower-scoped fixtures (function, class).",
	  "codeLanguage": "python",
	  "codeTokens": 85,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#2025-04-08_snippet_2",
	  "pageTitle": "Pytest Fixtures Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n@pytest.fixture(scope=\"session\")\ndef s1():\n    pass\n\n@pytest.fixture(scope=\"module\")\ndef m1():\n    pass\n\n@pytest.fixture\ndef f1(m1, s1):\n    pass\n\ndef test_order(f1):\n    pass"
		}
	  ],
	  "relevance": 0.81
	},
	{
	  "codeTitle": "Deactivating a pytest Plugin by Name",
	  "codeDescription": "Command to prevent a specific plugin from loading. Replace NAME with the plugin name you want to disable.",
	  "codeLanguage": "bash",
	  "codeTokens": 37,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/plugins.rst#2025-04-08_snippet_3",
	  "pageTitle": "Installing and Using pytest Plugins",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest -p no:NAME"
		}
	  ],
	  "relevance": 0.81
	},
	{
	  "codeTitle": "Using RaisesGroup for Testing Exception Groups",
	  "codeDescription": "Demonstrates how to test for specific exception types within an ExceptionGroup using pytest's RaisesGroup class.",
	  "codeLanguage": "python",
	  "codeTokens": 64,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#2025-04-08_snippet_13",
	  "pageTitle": "Writing and Reporting Assertions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def f():\n    raise ExceptionGroup(\"\", [IndexError()])\n\n\n@pytest.mark.xfail(raises=RaisesGroup(IndexError))\ndef test_f():\n    f()"
		}
	  ],
	  "relevance": 0.81
	},
	{
	  "codeTitle": "Sharing skipif Markers in Python",
	  "codeDescription": "Example of defining and sharing a skipif marker between test modules.",
	  "codeLanguage": "python",
	  "codeTokens": 83,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_5",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_mymodule.py\nimport mymodule\n\nminversion = pytest.mark.skipif(\n    mymodule.__versioninfo__ < (1, 1), reason=\"at least mymodule-1.1 required\"\n)\n\n\n@minversion\ndef test_function(): ..."
		},
		{
		  "language": "python",
		  "code": "# test_myothermodule.py\nfrom test_mymodule import minversion\n\n\n@minversion\ndef test_anotherfunction(): ..."
		}
	  ],
	  "relevance": 0.81
	},
	{
	  "codeTitle": "Configuring Log Date Format in pytest",
	  "codeDescription": "Sets a time.strftime-compatible string for formatting dates in logging capture. This determines how timestamps will appear in log messages.",
	  "codeLanguage": "ini",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_28",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nlog_date_format = %Y-%m-%d %H:%M:%S"
		}
	  ],
	  "relevance": 0.81
	},
	{
	  "codeTitle": "Configuring pytest.ini for Multiple Test File Patterns",
	  "codeDescription": "Configuration to have pytest look for multiple file patterns when discovering tests. This example configures pytest to include both test_*.py and example_*.py files in test collection.",
	  "codeLanguage": "ini",
	  "codeTokens": 84,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#2025-04-08_snippet_3",
	  "pageTitle": "Pytest Test Discovery Configuration",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# Example 2: have pytest look for files with \"test\" and \"example\"\n# content of pytest.ini\n[pytest]\npython_files = test_*.py example_*.py"
		}
	  ],
	  "relevance": 0.81
	},
	{
	  "codeTitle": "Returning Non-None Value from Test Functions",
	  "codeDescription": "Shows a common beginner mistake of returning values from test functions instead of using assertions. This pattern is deprecated as pytest ignores return values, which can lead to tests that never fail.",
	  "codeLanguage": "python",
	  "codeTokens": 118,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#2025-04-08_snippet_4",
	  "pageTitle": "Deprecations and Removals in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.parametrize(\n    [\"a\", \"b\", \"result\"],\n    [\n        [1, 2, 5],\n        [2, 3, 8],\n        [5, 3, 18],\n    ],\n)\ndef test_foo(a, b, result):\n    return foo(a, b) == result"
		},
		{
		  "language": "python",
		  "code": "@pytest.mark.parametrize(\n    [\"a\", \"b\", \"result\"],\n    [\n        [1, 2, 5],\n        [2, 3, 8],\n        [5, 3, 18],\n    ],\n)\ndef test_foo(a, b, result):\n    assert foo(a, b) == result"
		}
	  ],
	  "relevance": 0.808
	},
	{
	  "codeTitle": "Using pytest.skip in Doctests",
	  "codeDescription": "Shows how to use pytest.skip to conditionally skip tests in doctests based on external conditions.",
	  "codeLanguage": "text",
	  "codeTokens": 68,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#2025-04-08_snippet_13",
	  "pageTitle": "Running Doctests with pytest",
	  "codeList": [
		{
		  "language": "text",
		  "code": ">>> import sys, pytest\n>>> if sys.platform.startswith('win'):\n...     pytest.skip('this doctest does not work on Windows')\n...\n>>> import fcntl\n>>> ..."
		}
	  ],
	  "relevance": 0.805
	},
	{
	  "codeTitle": "Converting Yield Tests to Parametrized Tests",
	  "codeDescription": "Shows how to convert deprecated yield-style tests to use pytest.mark.parametrize. Yield tests don't support fixtures properly and have been removed in pytest 8.4.",
	  "codeLanguage": "python",
	  "codeTokens": 83,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#2025-04-08_snippet_5",
	  "pageTitle": "Deprecations and Removals in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def check(x, y):\n    assert x**x == y\n\n\ndef test_squared():\n    yield check, 2, 4\n    yield check, 3, 9"
		},
		{
		  "language": "python",
		  "code": "@pytest.mark.parametrize(\"x, y\", [(2, 4), (3, 9)])\ndef test_squared(x, y):\n    assert x**x == y"
		}
	  ],
	  "relevance": 0.805
	},
	{
	  "codeTitle": "Customizing log format and date format in pytest",
	  "codeDescription": "Demonstrates how to specify custom log format and date format when running pytest using command-line options.",
	  "codeLanguage": "bash",
	  "codeTokens": 63,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#2025-04-08_snippet_1",
	  "pageTitle": "Managing Logging in pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --log-format=\"%(asctime)s %(levelname)s %(message)s\" \\\n        --log-date-format=\"%Y-%m-%d %H:%M:%S\""
		}
	  ],
	  "relevance": 0.805
	},
	{
	  "codeTitle": "Activating Global Python Argcomplete in Bash",
	  "codeDescription": "This command globally activates argcomplete for all supported Python applications in the bash environment.",
	  "codeLanguage": "bash",
	  "codeTokens": 35,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/bash-completion.rst#2025-04-08_snippet_1",
	  "pageTitle": "Setting up Bash Completion for pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "sudo activate-global-python-argcomplete"
		}
	  ],
	  "relevance": 0.805
	},
	{
	  "codeTitle": "Using pytest.RaisesExc for Detailed Exception Assertions (Python)",
	  "codeDescription": "Demonstrates using pytest.RaisesExc to specify more details about contained exceptions in groups.",
	  "codeLanguage": "python",
	  "codeTokens": 64,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#2025-04-08_snippet_8",
	  "pageTitle": "Writing and Reporting Assertions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_raises_exc():\n    with pytest.RaisesGroup(pytest.RaisesExc(ValueError, match=\"foo\")):\n        raise ExceptionGroup(\"\", (ValueError(\"foo\"),))"
		}
	  ],
	  "relevance": 0.805
	},
	{
	  "codeTitle": "Configuring Temporary Path Retention Count in pytest",
	  "codeDescription": "Sets the number of sessions to keep tmp_path directories, according to the retention policy. This affects how many temporary directories are preserved after test execution.",
	  "codeLanguage": "ini",
	  "codeTokens": 50,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_44",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\ntmp_path_retention_count = 3"
		}
	  ],
	  "relevance": 0.805
	},
	{
	  "codeTitle": "Sample Test Case for Demonstrating Verbosity Options",
	  "codeDescription": "A Python test file containing a passing test and multiple failing tests that demonstrate various assertion failure types, used to show how verbosity affects output.",
	  "codeLanguage": "python",
	  "codeTokens": 196,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_2",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_verbosity_example.py\ndef test_ok():\n    pass\n\n\ndef test_words_fail():\n    fruits1 = [\"banana\", \"apple\", \"grapes\", \"melon\", \"kiwi\"]\n    fruits2 = [\"banana\", \"apple\", \"orange\", \"melon\", \"kiwi\"]\n    assert fruits1 == fruits2\n\n\ndef test_numbers_fail():\n    number_to_text1 = {str(x): x for x in range(5)}\n    number_to_text2 = {str(x * 10): x * 10 for x in range(5)}\n    assert number_to_text1 == number_to_text2\n\n\ndef test_long_text_fail():\n    long_text = \"Lorem ipsum dolor sit amet \" * 10\n    assert \"hello world\" in long_text"
		}
	  ],
	  "relevance": 0.805
	},
	{
	  "codeTitle": "Updating Config.warn to warnings.warn in Python",
	  "codeDescription": "Shows how to replace the deprecated Config.warn method with the standard warnings.warn function using pytest.PytestWarning.",
	  "codeLanguage": "python",
	  "codeTokens": 48,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#2025-04-08_snippet_17",
	  "pageTitle": "Deprecations and Removals in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "warnings.warn(pytest.PytestWarning(\"some warning\"))"
		}
	  ],
	  "relevance": 0.802
	},
	{
	  "codeTitle": "Internal pytest Warning Example",
	  "codeDescription": "Example demonstrating pytest's internal warning generation for improper test class definition.",
	  "codeLanguage": "python",
	  "codeTokens": 56,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_19",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "class Test:\n    def __init__(self):\n        pass\n\n    def test_foo(self):\n        assert 1 == 1"
		}
	  ],
	  "relevance": 0.8
	},
	{
	  "codeTitle": "Writing Acceptance Tests Using the Fixture",
	  "codeDescription": "Example test function demonstrating how to use the acceptance test fixture to create directories and run commands with assertions.",
	  "codeLanguage": "python",
	  "codeTokens": 71,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/attic.rst#2025-04-08_snippet_1",
	  "pageTitle": "Pytest Acceptance Testing Configuration",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_some_acceptance_aspect(accept):\n    accept.tmpdir.mkdir(\"somesub\")\n    result = accept.run(\"ls\", \"-la\")\n    assert \"somesub\" in result"
		}
	  ],
	  "relevance": 0.8
	},
	{
	  "codeTitle": "Capturing Binary File Descriptor Output in Pytest (Python)",
	  "codeDescription": "This example demonstrates how to use the capfdbinary fixture to capture binary output from file descriptors 1 and 2 in a test function.",
	  "codeLanguage": "python",
	  "codeTokens": 80,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#2025-04-08_snippet_3",
	  "pageTitle": "Pytest API and Builtin Fixtures Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_system_echo(capfdbinary):\n    os.system('echo \"hello\"')\n    captured = capfdbinary.readouterr()\n    assert captured.out == b\"hello\\n\""
		}
	  ],
	  "relevance": 0.8
	},
	{
	  "codeTitle": "Skipping Individual Checks in Doctests",
	  "codeDescription": "Demonstrates how to skip individual checks within a doctest using the SKIP directive.",
	  "codeLanguage": "python",
	  "codeTokens": 70,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#2025-04-08_snippet_12",
	  "pageTitle": "Running Doctests with pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_random(y):\n    \"\"\"\n    >>> random.random()  # doctest: +SKIP\n    0.156231223\n\n    >>> 1 + 1\n    2\n    \"\"\""
		}
	  ],
	  "relevance": 0.8
	},
	{
	  "codeTitle": "Accessing Pytest Version as String",
	  "codeDescription": "Shows how to import pytest and access its version information as a string. The version is returned in semantic versioning format.",
	  "codeLanguage": "python",
	  "codeTokens": 50,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": ">>> import pytest\n>>> pytest.__version__\n'7.0.0'"
		}
	  ],
	  "relevance": 0.8
	},
	{
	  "codeTitle": "Pytest Command Output with Warning Summary",
	  "codeDescription": "Shows the default output of pytest when a test triggers a warning, demonstrating the automatic warning capture and summary display.",
	  "codeLanguage": "pytest",
	  "codeTokens": 194,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_1",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest test_show_warnings.py\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 1 item\n\ntest_show_warnings.py .                                              [100%]\n\n============================= warnings summary =============================\ntest_show_warnings.py::test_one\n  /home/sweet/project/test_show_warnings.py:5: UserWarning: api v1, should use functions from v2\n    warnings.warn(UserWarning(\"api v1, should use functions from v2\"))\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================= 1 passed, 1 warning in 0.12s ======================="
		}
	  ],
	  "relevance": 0.8
	},
	{
	  "codeTitle": "Using Legacy Function Call Form of pytest.raises",
	  "codeDescription": "Demonstrates the alternate form of pytest.raises where a function is passed with its arguments to verify it raises the expected exception.",
	  "codeLanguage": "python",
	  "codeTokens": 69,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#2025-04-08_snippet_11",
	  "pageTitle": "Writing and Reporting Assertions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def func(x):\n    if x <= 0:\n        raise ValueError(\"x needs to be larger than zero\")\n\n\npytest.raises(ValueError, func, x=-1)"
		}
	  ],
	  "relevance": 0.799
	},
	{
	  "codeTitle": "Custom Single Line Assert Message",
	  "codeDescription": "Test case showing custom assertion message implementation with class attribute comparison and a single line error message.",
	  "codeLanguage": "python",
	  "codeTokens": 69,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_21",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_single_line(self):\n    class A:\n        a = 1\n    b = 2\n    assert A.a == b, \"A.a appears not to be b\""
		}
	  ],
	  "relevance": 0.796
	},
	{
	  "codeTitle": "Doctest in Python Function Docstring",
	  "codeDescription": "Illustrates how to include a doctest within a Python function's docstring.",
	  "codeLanguage": "python",
	  "codeTokens": 62,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#2025-04-08_snippet_3",
	  "pageTitle": "Running Doctests with pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of mymodule.py\ndef something():\n    \"\"\"a doctest in a docstring\n    >>> something()\n    42\n    \"\"\"\n    return 42"
		}
	  ],
	  "relevance": 0.795
	},
	{
	  "codeTitle": "Selecting Tests by Name using -k in pytest",
	  "codeDescription": "These examples show how to use the -k option in pytest to select tests based on their names. It demonstrates substring matching and the use of logical operators in test selection.",
	  "codeLanguage": "pytest",
	  "codeTokens": 54,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_5",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest -v -k http"
		},
		{
		  "language": "pytest",
		  "code": "$ pytest -k \"not send_http\" -v"
		},
		{
		  "language": "pytest",
		  "code": "$ pytest -k \"http or quick\" -v"
		}
	  ],
	  "relevance": 0.795
	},
	{
	  "codeTitle": "Applying Markers at Class Level in Python for Pytest",
	  "codeDescription": "Example of using pytest.mark decorators with a class to apply markers to all test methods. This marks all test methods in TestClass with the 'webtest' marker.",
	  "codeLanguage": "python",
	  "codeTokens": 86,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_8",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_mark_classlevel.py\nimport pytest\n\n\n@pytest.mark.webtest\nclass TestClass:\n    def test_startup(self):\n        pass\n\n    def test_startup_and_more(self):\n        pass"
		}
	  ],
	  "relevance": 0.795
	},
	{
	  "codeTitle": "Defining Parametrized Tests with Custom Markers in Python",
	  "codeDescription": "This snippet shows a basic structure for a parametrized test function in pytest. It uses the eval() function to evaluate string expressions and compare the results with expected values.",
	  "codeLanguage": "python",
	  "codeTokens": 62,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_16",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_eval(test_input, expected):\n    assert eval(test_input) == expected"
		}
	  ],
	  "relevance": 0.795
	},
	{
	  "codeTitle": "Displaying Pytest Help Command Output",
	  "codeDescription": "Shows the complete help output for pytest command line options including general options, reporting settings, and collection configurations.",
	  "codeLanguage": "bash",
	  "codeTokens": 235,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_52",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "$ pytest --help\nusage: pytest [options] [file_or_dir] [file_or_dir] [...]\n\npositional arguments:\n  file_or_dir\n\ngeneral:\n  -k EXPRESSION         Only run tests which match the given substring\n                        expression. An expression is a Python evaluable\n                        expression where all names are substring-matched\n                        against test names and their parent classes.\n                        Example: -k 'test_method or test_other' matches all\n                        test functions and classes whose name contains\n                        'test_method' or 'test_other', while -k 'not\n                        test_method' matches those that don't contain\n                        'test_method' in their names. -k 'not test_method\n                        and not test_other' will eliminate the matches.\n                        Additionally keywords are matched to classes and\n                        functions containing extra names in their\n                        'extra_keyword_matches' set, as well as functions\n                        which have names assigned directly to them. The\n                        matching is case-insensitive."
		}
	  ],
	  "relevance": 0.795
	},
	{
	  "codeTitle": "Accessing Pytest Version Tuple for Pre-releases",
	  "codeDescription": "Shows how the version_tuple attribute represents pre-release versions, where the last component is a string with the prerelease version identifier.",
	  "codeLanguage": "python",
	  "codeTokens": 55,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_2",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": ">>> import pytest\n>>> pytest.version_tuple\n(7, 0, '0rc1')"
		}
	  ],
	  "relevance": 0.795
	},
	{
	  "codeTitle": "Setting PYTEST_ADDOPTS Environment Variable",
	  "codeDescription": "This bash command demonstrates how to set the PYTEST_ADDOPTS environment variable to add command line options to pytest while the environment is in use.",
	  "codeLanguage": "bash",
	  "codeTokens": 50,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_1",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "export PYTEST_ADDOPTS=\"-v\""
		}
	  ],
	  "relevance": 0.795
	},
	{
	  "codeTitle": "Using pytest.mark.parametrize with CSV-style input",
	  "codeDescription": "Example of using pytest.mark.parametrize with a simplified signature, allowing CSV-style input for argument names.",
	  "codeLanguage": "Python",
	  "codeTokens": 53,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.4.0.rst#2025-04-08_snippet_4",
	  "pageTitle": "pytest 2.4.0 Release Notes",
	  "codeList": [
		{
		  "language": "Python",
		  "code": "pytest.mark.parametrize(\"input,expected\",  [(1,2), (2,3)])"
		}
	  ],
	  "relevance": 0.793
	},
	{
	  "codeTitle": "Using ExceptionGroup with pytest.raises in Python",
	  "codeDescription": "Example of how to use pytest.raises with ExceptionGroup to maintain full typing on ExceptionInfo. This allows the test to properly catch and validate exception groups while preserving type information.",
	  "codeLanguage": "python",
	  "codeTokens": 62,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/changelog/13115.improvement.rst#2025-04-08_snippet_0",
	  "pageTitle": "ExceptionGroup Handling in pytest.raises",
	  "codeList": [
		{
		  "language": "python",
		  "code": "with pytest.raises(ExceptionGroup[Exception]) as exc_info:\n    some_function()"
		}
	  ],
	  "relevance": 0.79
	},
	{
	  "codeTitle": "Proposed Solution: Dynamic Fixture Definition in pytest",
	  "codeDescription": "This snippet demonstrates a proposed new function 'define_combined_fixture' that could be used to dynamically define fixtures from existing ones in pytest.",
	  "codeLanguage": "python",
	  "codeTokens": 61,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/proposals/parametrize_with_fixtures.rst#2025-04-08_snippet_1",
	  "pageTitle": "Proposal: Parametrize with Fixtures in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "pytest.define_combined_fixture(\n    name=\"context\", fixtures=[\"default_context\", \"extra_context\"]\n)"
		}
	  ],
	  "relevance": 0.79
	},
	{
	  "codeTitle": "Implementing Custom Exception Handling in Python",
	  "codeDescription": "Shows how to implement custom exception handling in Python using __tracebackhide__ and a callable to selectively hide certain exceptions.",
	  "codeLanguage": "python",
	  "codeTokens": 106,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_9",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import operator\n\nimport pytest\n\n\nclass ConfigException(Exception):\n    pass\n\n\ndef checkconfig(x):\n    __tracebackhide__ = operator.methodcaller(\"errisinstance\", ConfigException)\n    if not hasattr(x, \"config\"):\n        raise ConfigException(f\"not configured: {x}\")\n\n\ndef test_something():\n    checkconfig(42)"
		}
	  ],
	  "relevance": 0.79
	},
	{
	  "codeTitle": "Configuring Pytest Marker Handling in conftest.py",
	  "codeDescription": "Configuration to set up custom marker handling in pytest, specifically for printing marker information during the test setup phase.",
	  "codeLanguage": "python",
	  "codeTokens": 73,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_14",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\nimport sys\n\n\ndef pytest_runtest_setup(item):\n    for marker in item.iter_markers(name=\"my_marker\"):\n        print(marker)\n        sys.stdout.flush()"
		}
	  ],
	  "relevance": 0.79
	},
	{
	  "codeTitle": "Applying Multiple Global Marks",
	  "codeDescription": "Applies multiple mark decorators to all test functions in a module.",
	  "codeLanguage": "python",
	  "codeTokens": 38,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_15",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\npytestmark = [pytest.mark.integration, pytest.mark.slow]"
		}
	  ],
	  "relevance": 0.79
	},
	{
	  "codeTitle": "Configuring Strict XFAIL Behavior in Pytest",
	  "codeDescription": "Enables strict mode for xfail markers where passing tests marked with @pytest.mark.xfail will fail the test suite.",
	  "codeLanguage": "ini",
	  "codeTokens": 42,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_51",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nxfail_strict = True"
		}
	  ],
	  "relevance": 0.79
	},
	{
	  "codeTitle": "Strict XFail in Python",
	  "codeDescription": "Example of using xfail marker with strict parameter to fail on unexpected passes.",
	  "codeLanguage": "python",
	  "codeTokens": 41,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_13",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.xfail(strict=True)\ndef test_function(): ..."
		}
	  ],
	  "relevance": 0.79
	},
	{
	  "codeTitle": "Setting addopts in pytest.ini for Default Command Line Arguments",
	  "codeDescription": "Shows how to use the addopts configuration option to specify default command line arguments that will be applied to every pytest run, in this case setting a maximum failure limit and enabling fail report info.",
	  "codeLanguage": "ini",
	  "codeTokens": 78,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_17",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# content of pytest.ini\n[pytest]\naddopts = --maxfail=2 -rf  # exit after 2 failures, report fail info"
		}
	  ],
	  "relevance": 0.787
	},
	{
	  "codeTitle": "Skipping Entire Module in Python",
	  "codeDescription": "Example of skipping an entire module using pytest.skip() at the module level.",
	  "codeLanguage": "python",
	  "codeTokens": 57,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_3",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import sys\n\nimport pytest\n\nif not sys.platform.startswith(\"win\"):\n    pytest.skip(\"skipping windows-only tests\", allow_module_level=True)"
		}
	  ],
	  "relevance": 0.785
	},
	{
	  "codeTitle": "Disabling a pytest Plugin in pytest.ini",
	  "codeDescription": "Configuration for pytest.ini to unconditionally disable a plugin for a project. This approach ensures the plugin is always disabled regardless of command-line options.",
	  "codeLanguage": "ini",
	  "codeTokens": 50,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/plugins.rst#2025-04-08_snippet_4",
	  "pageTitle": "Installing and Using pytest Plugins",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\naddopts = -p no:NAME"
		}
	  ],
	  "relevance": 0.785
	},
	{
	  "codeTitle": "Configuring pytest.ini to Always Use --pyargs",
	  "codeDescription": "Configuration to make pytest always interpret command-line arguments as Python package names by default. This is done by adding the --pyargs option to the addopts configuration.",
	  "codeLanguage": "ini",
	  "codeTokens": 58,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#2025-04-08_snippet_5",
	  "pageTitle": "Pytest Test Discovery Configuration",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# content of pytest.ini\n[pytest]\naddopts = --pyargs"
		}
	  ],
	  "relevance": 0.785
	},
	{
	  "codeTitle": "Typing Fixtures with Dependencies",
	  "codeDescription": "Demonstrates how to type fixtures that receive other fixtures as parameters.",
	  "codeLanguage": "python",
	  "codeTokens": 57,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/types.rst#2025-04-08_snippet_5",
	  "pageTitle": "Typing Guide for pytest Tests",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.fixture\ndef mock_env_user(monkeypatch: pytest.MonkeyPatch) -> None:\n    monkeypatch.setenv(\"USER\", \"TestingUser\")"
		}
	  ],
	  "relevance": 0.785
	},
	{
	  "codeTitle": "Pytest Environment Variables",
	  "codeDescription": "Environment variables that control pytest's behavior, including CI detection, plugin loading, debugging options and additional command line arguments.",
	  "codeLanguage": "plaintext",
	  "codeTokens": 117,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_54",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "plaintext",
		  "code": "CI                       When set (regardless of value), pytest knows it is running in a CI process and does not truncate summary info\nBUILD_NUMBER             Equivalent to CI\nPYTEST_ADDOPTS           Extra command line options\nPYTEST_PLUGINS           Comma-separated plugins to load during startup\nPYTEST_DISABLE_PLUGIN_AUTOLOAD Set to disable plugin auto-loading\nPYTEST_DEBUG             Set to enable debug tracing of pytest's internals"
		}
	  ],
	  "relevance": 0.785
	},
	{
	  "codeTitle": "XFail with Specific Exception in Python",
	  "codeDescription": "Example of using xfail marker to specify an expected exception.",
	  "codeLanguage": "python",
	  "codeTokens": 41,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_11",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.xfail(raises=RuntimeError)\ndef test_function(): ..."
		}
	  ],
	  "relevance": 0.785
	},
	{
	  "codeTitle": "Using Parametrized Fixtures with Iterators",
	  "codeDescription": "Example of using an iterator with the @pytest.fixture decorator for parametrization, which is now supported in this release.",
	  "codeLanguage": "Python",
	  "codeTokens": 46,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.5.0.rst#2025-04-08_snippet_2",
	  "pageTitle": "pytest 2.5.0 Release Notes",
	  "codeList": [
		{
		  "language": "Python",
		  "code": "@pytest.fixture(params=iterator)"
		}
	  ],
	  "relevance": 0.784
	},
	{
	  "codeTitle": "Legacy pytest_funcarg__ Method",
	  "codeDescription": "Example of the legacy way of defining funcarg factories without using the decorator, which still works but doesn't support scoping and parametrization features.",
	  "codeLanguage": "python",
	  "codeTokens": 53,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/funcarg_compare.rst#2025-04-08_snippet_5",
	  "pageTitle": "pytest-2.3 Fixture Evolution Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def pytest_funcarg__db(request): ..."
		}
	  ],
	  "relevance": 0.781
	},
	{
	  "codeTitle": "Testing List Equality with pytest",
	  "codeDescription": "A test function that compares two lists of fruits, demonstrating how pytest shows detailed diffs when lists differ at specific indices.",
	  "codeLanguage": "python",
	  "codeTokens": 86,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_5",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_words_fail():\n    fruits1 = [\"banana\", \"apple\", \"grapes\", \"melon\", \"kiwi\"]\n    fruits2 = [\"banana\", \"apple\", \"orange\", \"melon\", \"kiwi\"]\n    assert fruits1 == fruits2"
		}
	  ],
	  "relevance": 0.78
	},
	{
	  "codeTitle": "Configuring norecursedirs in pytest.ini",
	  "codeDescription": "Configuration example showing how to set directories that pytest should not recurse into during test discovery. This prevents looking for tests in specific directories like version control or build directories.",
	  "codeLanguage": "ini",
	  "codeTokens": 63,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#2025-04-08_snippet_12",
	  "pageTitle": "Pytest Test Discovery Configuration",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# content of pytest.ini\n[pytest]\nnorecursedirs = .svn _build tmp*"
		}
	  ],
	  "relevance": 0.78
	},
	{
	  "codeTitle": "Example Doctest Content in Text File",
	  "codeDescription": "Demonstrates a simple doctest within a text file, showing variable assignment and assertion.",
	  "codeLanguage": "text",
	  "codeTokens": 53,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#2025-04-08_snippet_1",
	  "pageTitle": "Running Doctests with pytest",
	  "codeList": [
		{
		  "language": "text",
		  "code": "# content of test_example.txt\n\nhello this is a doctest\n>>> x = 3\n>>> x\n3"
		}
	  ],
	  "relevance": 0.78
	},
	{
	  "codeTitle": "Treating UserWarning as Error in Pytest Command",
	  "codeDescription": "Demonstrates using the -W command-line flag to treat UserWarning warnings as errors, causing tests to fail when these warnings occur.",
	  "codeLanguage": "pytest",
	  "codeTokens": 222,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_2",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest -q test_show_warnings.py -W error::UserWarning\nF                                                                    [100%]\n================================= FAILURES =================================\n_________________________________ test_one _________________________________\n\n    def test_one():\n>       assert api_v1() == 1\n\ntest_show_warnings.py:10:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def api_v1():\n>       warnings.warn(UserWarning(\"api v1, should use functions from v2\"))\nE       UserWarning: api v1, should use functions from v2\n\ntest_show_warnings.py:5: UserWarning\n========================= short test summary info ==========================\nFAILED test_show_warnings.py::test_one - UserWarning: api v1, should use ...\n1 failed in 0.12s"
		}
	  ],
	  "relevance": 0.78
	},
	{
	  "codeTitle": "Configuring pytest using tox.ini file in INI format",
	  "codeDescription": "Illustrates how to set pytest configuration options in a tox.ini file, including minimum version, additional options, and test paths.",
	  "codeLanguage": "ini",
	  "codeTokens": 65,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/customize.rst#2025-04-08_snippet_3",
	  "pageTitle": "Configuring pytest",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# tox.ini\n[pytest]\nminversion = 6.0\naddopts = -ra -q\ntestpaths =\n    tests\n    integration"
		}
	  ],
	  "relevance": 0.78
	},
	{
	  "codeTitle": "Configuring Assertion Verbosity in Pytest",
	  "codeDescription": "Sets a specific verbosity level for assertion-related output, overriding the application-wide verbosity setting.",
	  "codeLanguage": "ini",
	  "codeTokens": 36,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_49",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nverbosity_assertions = 2"
		}
	  ],
	  "relevance": 0.78
	},
	{
	  "codeTitle": "Declaring New Hooks in pytest",
	  "codeDescription": "Example of declaring and registering new hooks that can be implemented by other plugins.",
	  "codeLanguage": "python",
	  "codeTokens": 48,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#2025-04-08_snippet_3",
	  "pageTitle": "Writing Hook Functions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def pytest_my_hook(config):\n    \"\"\"\n    Receives the pytest config and does things with it\n    \"\"\""
		}
	  ],
	  "relevance": 0.778
	},
	{
	  "codeTitle": "Finding Active pytest Plugins",
	  "codeDescription": "Command to identify which plugins are active in your pytest environment. This outputs an extended test header showing activated plugins and their names.",
	  "codeLanguage": "bash",
	  "codeTokens": 40,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/plugins.rst#2025-04-08_snippet_2",
	  "pageTitle": "Installing and Using pytest Plugins",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --trace-config"
		}
	  ],
	  "relevance": 0.775
	},
	{
	  "codeTitle": "Warning Suppression Example",
	  "codeDescription": "Example showing how to suppress warnings during test execution.",
	  "codeLanguage": "python",
	  "codeTokens": 40,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_17",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "with warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    ..."
		}
	  ],
	  "relevance": 0.775
	},
	{
	  "codeTitle": "Sample setup.py File That Should Be Ignored",
	  "codeDescription": "Example of a setup.py file that would raise an exception if imported during test collection. Using collect_ignore in conftest.py prevents this file from being imported.",
	  "codeLanguage": "python",
	  "codeTokens": 60,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#2025-04-08_snippet_9",
	  "pageTitle": "Pytest Test Discovery Configuration",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of setup.py\n0 / 0  # will raise exception if imported"
		}
	  ],
	  "relevance": 0.775
	},
	{
	  "codeTitle": "Implementing Mixin for Abstract Test Classes in Python with pytest",
	  "codeDescription": "This code snippet demonstrates how to create a mixin class (NotATest) that automatically handles the __test__ attribute for abstract test classes and their subclasses. It includes an example of an abstract test class and a concrete subclass that will be collected as a test.",
	  "codeLanguage": "python",
	  "codeTokens": 151,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#2025-04-08_snippet_13",
	  "pageTitle": "Pytest Test Discovery Configuration",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# Mixin to handle abstract test classes\nclass NotATest:\n    def __init_subclass__(cls):\n        cls.__test__ = NotATest not in cls.__bases__\n\n\n# Abstract test class\nclass AbstractTest(NotATest):\n    pass\n\n\n# Subclass that will be collected as a test\nclass RealTest(AbstractTest):\n    def test_example(self):\n        assert 1 + 1 == 2"
		}
	  ],
	  "relevance": 0.775
	},
	{
	  "codeTitle": "Configuring pytest using pyproject.toml file in TOML format",
	  "codeDescription": "Shows how to configure pytest options in a pyproject.toml file using the tool.pytest.ini_options table, including minimum version, additional options, and test paths.",
	  "codeLanguage": "toml",
	  "codeTokens": 84,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/customize.rst#2025-04-08_snippet_2",
	  "pageTitle": "Configuring pytest",
	  "codeList": [
		{
		  "language": "toml",
		  "code": "# pyproject.toml\n[tool.pytest.ini_options]\nminversion = \"6.0\"\naddopts = \"-ra -q\"\ntestpaths = [\n    \"tests\",\n    \"integration\",\n]"
		}
	  ],
	  "relevance": 0.775
	},
	{
	  "codeTitle": "Testing Temporary Autouse Effects",
	  "codeDescription": "Shows how autouse fixtures can make other fixtures effectively autouse, but only within specific contexts.",
	  "codeLanguage": "python",
	  "codeTokens": 132,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#2025-04-08_snippet_6",
	  "pageTitle": "Pytest Fixtures Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.fixture\ndef c1():\n    pass\n\n@pytest.fixture\ndef c2():\n    pass\n\nclass TestClassWithAutouse:\n    @pytest.fixture(autouse=True)\n    def c3(self, c2):\n        pass\n\n    def test_no_req(self):\n        pass\n\n    def test_req(self, c1):\n        pass\n\nclass TestClassWithoutAutouse:\n    def test_no_req(self):\n        pass\n\n    def test_req(self, c1, c2):\n        pass"
		}
	  ],
	  "relevance": 0.775
	},
	{
	  "codeTitle": "Enabling Unicode Characters in Test IDs",
	  "codeDescription": "Shows how to disable test ID escaping to allow unicode strings in parametrization to appear unescaped in terminal output, but with a warning about potential issues.",
	  "codeLanguage": "ini",
	  "codeTokens": 59,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_22",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\ndisable_test_id_escaping_and_forfeit_all_rights_to_community_support = True"
		}
	  ],
	  "relevance": 0.775
	},
	{
	  "codeTitle": "Triggering Release Workflow with GitHub CLI",
	  "codeDescription": "Command to trigger the release preparation workflow using GitHub's CLI for a minor release of pytest.",
	  "codeLanguage": "bash",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#2025-04-08_snippet_1",
	  "pageTitle": "Release Procedure for pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "gh workflow run prepare-release-pr.yml -f branch=7.1.x -f major=no -f prerelease="
		}
	  ],
	  "relevance": 0.772
	},
	{
	  "codeTitle": "Running pytest with Exception Handling",
	  "codeDescription": "Demonstrates how to run a pytest command and handle exceptions, showing the output of a failed test with a custom exception.",
	  "codeLanguage": "pytest",
	  "codeTokens": 132,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_8",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest -q test_checkconfig.py\nF                                                                    [100%]\n================================= FAILURES =================================\n______________________________ test_something ______________________________\n\n    def test_something():\n>       checkconfig(42)\nE       Failed: not configured: 42\n\ntest_checkconfig.py:11: Failed\n========================= short test summary info ==========================\nFAILED test_checkconfig.py::test_something - Failed: not configured: 42\n1 failed in 0.12s"
		}
	  ],
	  "relevance": 0.77
	},
	{
	  "codeTitle": "Running Class-Based Parametrized Tests in Pytest",
	  "codeDescription": "Shows the output when running class-based parametrized tests, where specific test cases are created for each parameter set defined in the class.",
	  "codeLanguage": "pytest",
	  "codeTokens": 178,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_9",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest -q\nF..                                                                  [100%]\n================================= FAILURES =================================\n________________________ TestClass.test_equals[1-2] ________________________\n\nself = <test_parametrize.TestClass object at 0xdeadbeef0002>, a = 1, b = 2\n\n    def test_equals(self, a, b):\n>       assert a == b\nE       assert 1 == 2\n\ntest_parametrize.py:21: AssertionError\n========================= short test summary info ==========================\nFAILED test_parametrize.py::TestClass::test_equals[1-2] - assert 1 == 2\n1 failed, 2 passed in 0.12s"
		}
	  ],
	  "relevance": 0.77
	},
	{
	  "codeTitle": "Creating manifest.json for Custom Directory Collection in pytest",
	  "codeDescription": "This JSON snippet demonstrates the structure of a manifest.json file used to specify which test files should be collected in a directory. It lists the test files to be included in the collection process.",
	  "codeLanguage": "JSON",
	  "codeTokens": 69,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/customdirectory.rst#2025-04-08_snippet_1",
	  "pageTitle": "Custom Directory Collection in pytest",
	  "codeList": [
		{
		  "language": "JSON",
		  "code": "{\n    \"files\": [\n        \"test_first.py\",\n        \"test_second.py\"\n    ]\n}"
		}
	  ],
	  "relevance": 0.77
	},
	{
	  "codeTitle": "Configuring pytest using pytest.ini file in INI format",
	  "codeDescription": "Demonstrates how to set various pytest options such as minimum version, additional options, and test paths using a pytest.ini configuration file.",
	  "codeLanguage": "ini",
	  "codeTokens": 70,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/customize.rst#2025-04-08_snippet_1",
	  "pageTitle": "Configuring pytest",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# pytest.ini or .pytest.ini\n[pytest]\nminversion = 6.0\naddopts = -ra -q\ntestpaths =\n    tests\n    integration"
		}
	  ],
	  "relevance": 0.77
	},
	{
	  "codeTitle": "Testing Fixture Order Based on Dependencies",
	  "codeDescription": "Shows how fixtures execute based on their dependencies, where fixtures requested by other fixtures execute first in a defined order.",
	  "codeLanguage": "python",
	  "codeTokens": 112,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#2025-04-08_snippet_3",
	  "pageTitle": "Pytest Fixtures Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.fixture\ndef b(a):\n    pass\n\n@pytest.fixture\ndef g(c, f):\n    pass\n\n@pytest.fixture\ndef e(b):\n    pass\n\n@pytest.fixture\ndef f(e):\n    pass\n\n@pytest.fixture\ndef c(b):\n    pass\n\n@pytest.fixture\ndef d(c):\n    pass\n\n@pytest.fixture\ndef a():\n    pass\n\ndef test1(g):\n    pass"
		}
	  ],
	  "relevance": 0.77
	},
	{
	  "codeTitle": "Running Tests with Optional Implementations in Pytest",
	  "codeDescription": "Shows the output when running tests with parametrized imports, where tests are skipped if the required modules are not available.",
	  "codeLanguage": "pytest",
	  "codeTokens": 149,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_14",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest -rs test_module.py\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 2 items\n\ntest_module.py .s                                                    [100%]\n\n========================= short test summary info ==========================\nSKIPPED [1] test_module.py:3: could not import 'opt2': No module named 'opt2'\n======================= 1 passed, 1 skipped in 0.12s ======================="
		}
	  ],
	  "relevance": 0.77
	},
	{
	  "codeTitle": "Triggering Major Release Workflow with GitHub CLI",
	  "codeDescription": "Command to trigger the release preparation workflow using GitHub's CLI for a major release of pytest.",
	  "codeLanguage": "bash",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#2025-04-08_snippet_3",
	  "pageTitle": "Release Procedure for pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "gh workflow run prepare-release-pr.yml -f branch=8.0.x -f major=yes -f prerelease="
		}
	  ],
	  "relevance": 0.769
	},
	{
	  "codeTitle": "Installing or Upgrading pytest using pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager. This is the recommended way to install or update pytest from PyPI.",
	  "codeLanguage": "bash",
	  "codeTokens": 42,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/scripts/release.minor.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest Release Announcement Template",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.766
	},
	{
	  "codeTitle": "Decorating Test Module Funcargs",
	  "codeDescription": "Shows how to decorate a fixture at the module level to add additional functionality while maintaining the original fixture's features.",
	  "codeLanguage": "python",
	  "codeTokens": 118,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/attic.rst#2025-04-08_snippet_2",
	  "pageTitle": "Pytest Acceptance Testing Configuration",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def pytest_funcarg__accept(request):\n    # call the next factory (living in our conftest.py)\n    arg = request.getfuncargvalue(\"accept\")\n    # create a special layout in our tempdir\n    arg.tmpdir.mkdir(\"special\")\n    return arg\n\n\nclass TestSpecialAcceptance:\n    def test_sometest(self, accept):\n        assert accept.tmpdir.join(\"special\").check()"
		}
	  ],
	  "relevance": 0.765
	},
	{
	  "codeTitle": "Sample Test File for Custom Directory Collection in pytest",
	  "codeDescription": "This Python snippet shows an example of a test file that would be collected based on the manifest.json configuration. It contains a simple test function.",
	  "codeLanguage": "Python",
	  "codeTokens": 47,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/customdirectory.rst#2025-04-08_snippet_2",
	  "pageTitle": "Custom Directory Collection in pytest",
	  "codeList": [
		{
		  "language": "Python",
		  "code": "def test_1():\n    assert True"
		}
	  ],
	  "relevance": 0.765
	},
	{
	  "codeTitle": "Excluding a Class from Test Collection Using __test__ Attribute",
	  "codeDescription": "Example showing how to prevent a class that starts with 'Test' from being discovered as a test class by pytest. Setting the __test__ attribute to False excludes it from collection.",
	  "codeLanguage": "python",
	  "codeTokens": 66,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#2025-04-08_snippet_11",
	  "pageTitle": "Pytest Test Discovery Configuration",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# Will not be discovered as a test\nclass TestClass:\n    __test__ = False"
		}
	  ],
	  "relevance": 0.765
	},
	{
	  "codeTitle": "XFail without Execution in Python",
	  "codeDescription": "Example of using xfail marker to skip test execution.",
	  "codeLanguage": "python",
	  "codeTokens": 37,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_12",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.xfail(run=False)\ndef test_function(): ..."
		}
	  ],
	  "relevance": 0.765
	},
	{
	  "codeTitle": "Recording Test Suite Properties in Pytest (Python)",
	  "codeDescription": "This example shows how to use the record_testsuite_property fixture to add global properties to the entire test suite report.",
	  "codeLanguage": "python",
	  "codeTokens": 73,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#2025-04-08_snippet_8",
	  "pageTitle": "Pytest API and Builtin Fixtures Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_foo(record_testsuite_property):\n    record_testsuite_property(\"ARCH\", \"PPC\")\n    record_testsuite_property(\"STORAGE_TYPE\", \"CEPH\")"
		}
	  ],
	  "relevance": 0.765
	},
	{
	  "codeTitle": "Setting Python Path in pytest",
	  "codeDescription": "Adds directories to the Python search path for importing modules. This is similar to the PYTHONPATH environment variable and affects where Python looks for imported modules during test execution.",
	  "codeLanguage": "ini",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_41",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\npythonpath = src1 src2"
		}
	  ],
	  "relevance": 0.765
	},
	{
	  "codeTitle": "Upgrading pytest to version 5.3.2 using pip",
	  "codeDescription": "This command upgrades pytest to the latest 5.3.2 version using pip. It's a simple one-line command to update the package.",
	  "codeLanguage": "bash",
	  "codeTokens": 50,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.3.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "Announcing pytest 5.3.2 Release",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.763
	},
	{
	  "codeTitle": "Running pytest with Duration Profiling",
	  "codeDescription": "Demonstrates how to run pytest with the --durations flag to profile and display the slowest test functions.",
	  "codeLanguage": "pytest",
	  "codeTokens": 169,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_16",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest --durations=3\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 3 items\n\ntest_some_are_slow.py ...                                            [100%]\n\n=========================== slowest 3 durations ============================\n0.30s call     test_some_are_slow.py::test_funcslow2\n0.20s call     test_some_are_slow.py::test_funcslow1\n0.10s call     test_some_are_slow.py::test_funcfast\n============================ 3 passed in 0.12s ============================="
		}
	  ],
	  "relevance": 0.76
	},
	{
	  "codeTitle": "Upgrading to pytest 3.6.1 using pip",
	  "codeDescription": "Command to upgrade pytest to version 3.6.1 using pip package manager. This is a simple one-line command that will fetch and install the latest pytest version from PyPI.",
	  "codeLanguage": "bash",
	  "codeTokens": 57,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.6.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-3.6.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.76
	},
	{
	  "codeTitle": "Directory Structure Example for Import Modes with Packages",
	  "codeDescription": "A sample directory structure showing test modules and conftest.py files within Python packages. In this structure, modules can be imported as proper Python packages because of the __init__.py files.",
	  "codeLanguage": "text",
	  "codeTokens": 99,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/pythonpath.rst#2025-04-08_snippet_0",
	  "pageTitle": "Understanding pytest Import Mechanisms and Path Configuration",
	  "codeList": [
		{
		  "language": "text",
		  "code": "root/\n|- foo/\n   |- __init__.py\n   |- conftest.py\n   |- bar/\n      |- __init__.py\n      |- tests/\n         |- __init__.py\n         |- test_foo.py"
		}
	  ],
	  "relevance": 0.76
	},
	{
	  "codeTitle": "PyTest Command Execution Example",
	  "codeDescription": "Shows the command to run the tests with quiet mode and without output capturing, demonstrating the execution order and output of the fixture and test methods.",
	  "codeLanguage": "shell",
	  "codeTokens": 104,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/special.rst#2025-04-08_snippet_2",
	  "pageTitle": "Session-scoped Fixture Example in PyTest",
	  "codeList": [
		{
		  "language": "shell",
		  "code": "$ pytest -q -s test_module.py\ncallattr_ahead_of_alltests called\ncallme called!\ncallme other called\nSomeTest callme called\ntest_method1 called\n.test_method2 called\n.test other\n.test_unit1 method called\n.\n4 passed in 0.12s"
		}
	  ],
	  "relevance": 0.76
	},
	{
	  "codeTitle": "Testing Nested String Method in Python with Pytest",
	  "codeDescription": "This test checks if the result of one function call starts with the result of another function call using the startswith() method. The assertion fails as the strings do not match the expected pattern.",
	  "codeLanguage": "python",
	  "codeTokens": 84,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_19",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_startswith_nested(self):\n    def f():\n        return \"123\"\n\n    def g():\n        return \"456\"\n\n>   assert f().startswith(g())"
		}
	  ],
	  "relevance": 0.76
	},
	{
	  "codeTitle": "Configuring Strict Marker Validation in pytest.ini",
	  "codeDescription": "This snippet shows how to enforce strict marker validation by adding the --strict-markers flag to addopts in pytest.ini. It also includes the registration of 'slow' and 'serial' markers.",
	  "codeLanguage": "ini",
	  "codeTokens": 86,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/mark.rst#2025-04-08_snippet_3",
	  "pageTitle": "Marking Test Functions with Attributes in pytest",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\naddopts = --strict-markers\nmarkers =\n    slow: marks tests as slow (deselect with '-m \"not slow\"')\n    serial"
		}
	  ],
	  "relevance": 0.76
	},
	{
	  "codeTitle": "Skipping Tests Imperatively in Python",
	  "codeDescription": "Example of skipping a test imperatively during execution using pytest.skip() function.",
	  "codeLanguage": "python",
	  "codeTokens": 45,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_2",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_function():\n    if not valid_config():\n        pytest.skip(\"unsupported configuration\")"
		}
	  ],
	  "relevance": 0.76
	},
	{
	  "codeTitle": "Upgrading pytest using pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager. This will install or update pytest to version 4.0.0.",
	  "codeLanguage": "bash",
	  "codeTokens": 48,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.0.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 4.0.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.757
	},
	{
	  "codeTitle": "Running Frozen Pytest Application",
	  "codeDescription": "Command line example showing how to execute tests using the frozen application with standard pytest command-line options.",
	  "codeLanguage": "bash",
	  "codeTokens": 53,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_30",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "./app_main --pytest --verbose --tb=long --junit=xml=results.xml test-suite/"
		}
	  ],
	  "relevance": 0.755
	},
	{
	  "codeTitle": "Custom Warning Failure Messages",
	  "codeDescription": "Example showing how to create custom failure messages when testing warnings.",
	  "codeLanguage": "python",
	  "codeTokens": 58,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_18",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test():\n    with pytest.warns(Warning) as record:\n        f()\n        if not record:\n            pytest.fail(\"Expected a warning!\")"
		}
	  ],
	  "relevance": 0.755
	},
	{
	  "codeTitle": "Test Instance Assertion",
	  "codeDescription": "Test case demonstrating class instance attribute assertion failure where self.x is set to 42 (6 * 7) and compared for inequality.",
	  "codeLanguage": "python",
	  "codeTokens": 62,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_20",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_instance(self):\n    self.x = 6 * 7\n    assert self.x != 42"
		}
	  ],
	  "relevance": 0.755
	},
	{
	  "codeTitle": "Testing Class Attribute in Python with Pytest",
	  "codeDescription": "This test creates a class 'Foo' with an attribute 'b' set to 1, then asserts that the attribute is equal to 2. The assertion fails as the actual value is 1.",
	  "codeLanguage": "python",
	  "codeTokens": 81,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_4",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_attribute():\n    class Foo:\n        b = 1\n\n    i = Foo()\n>   assert i.b == 2"
		}
	  ],
	  "relevance": 0.755
	},
	{
	  "codeTitle": "Using context manager to change log level in pytest",
	  "codeDescription": "Demonstrates how to use a context manager to temporarily change the log level inside a with block in a test function.",
	  "codeLanguage": "python",
	  "codeTokens": 50,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#2025-04-08_snippet_7",
	  "pageTitle": "Managing Logging in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_bar(caplog):\n    with caplog.at_level(logging.INFO):\n        pass"
		}
	  ],
	  "relevance": 0.755
	},
	{
	  "codeTitle": "Testing String Method in Python with Pytest",
	  "codeDescription": "This test checks if one string starts with another using the startswith() method. The assertion fails as the strings do not match the expected pattern.",
	  "codeLanguage": "python",
	  "codeTokens": 67,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_18",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_startswith(self):\n    s = \"123\"\n    g = \"456\"\n>   assert s.startswith(g)"
		}
	  ],
	  "relevance": 0.755
	},
	{
	  "codeTitle": "Upgrading pytest using pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 33,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.6.3.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-2.6.3 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.754
	},
	{
	  "codeTitle": "Upgrading Pytest using pip in Bash",
	  "codeDescription": "Command to upgrade Pytest to the latest version (5.2.2) using pip package manager. This is a simple one-line command that can be executed in a terminal or command prompt.",
	  "codeLanguage": "bash",
	  "codeTokens": 60,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.2.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 5.2.2 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.751
	},
	{
	  "codeTitle": "Updating pytest.fail, pytest.skip, and pytest.exit to use reason instead of msg",
	  "codeDescription": "Shows how to update calls to pytest.fail, pytest.skip, and pytest.exit to use the reason parameter instead of the deprecated msg parameter.",
	  "codeLanguage": "python",
	  "codeTokens": 122,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#2025-04-08_snippet_8",
	  "pageTitle": "Deprecations and Removals in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_fail_example():\n    # old\n    pytest.fail(msg=\"foo\")\n    # new\n    pytest.fail(reason=\"bar\")\n\n\ndef test_skip_example():\n    # old\n    pytest.skip(msg=\"foo\")\n    # new\n    pytest.skip(reason=\"bar\")\n\n\ndef test_exit_example():\n    # old\n    pytest.exit(msg=\"foo\")\n    # new\n    pytest.exit(reason=\"bar\")"
		}
	  ],
	  "relevance": 0.75
	},
	{
	  "codeTitle": "Example Test Module with Failing Tests for Post-Processing",
	  "codeDescription": "Contains two failing tests, one that uses the tmp_path fixture and one that doesn't. These tests will be processed by the pytest_runtest_makereport hook in the conftest.py file.",
	  "codeLanguage": "python",
	  "codeTokens": 81,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_25",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_module.py\ndef test_fail1(tmp_path):\n    assert 0\n\n\ndef test_fail2():\n    assert 0"
		}
	  ],
	  "relevance": 0.75
	},
	{
	  "codeTitle": "Checking pytest version",
	  "codeDescription": "Command to verify the installed pytest version. Shows the version number in the output.",
	  "codeLanguage": "bash",
	  "codeTokens": 38,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#2025-04-08_snippet_1",
	  "pageTitle": "Getting Started with pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "$ pytest --version\npytest 8.3.5"
		}
	  ],
	  "relevance": 0.75
	},
	{
	  "codeTitle": "Demonstrating Tuple Unpacking Error in Python with Pytest",
	  "codeDescription": "This test attempts to unpack a single-item list into two variables, resulting in a ValueError due to insufficient values.",
	  "codeLanguage": "python",
	  "codeTokens": 56,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_11",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_tupleerror(self):\n>   a, b = [1]  # noqa: F841"
		}
	  ],
	  "relevance": 0.75
	},
	{
	  "codeTitle": "Creating Maintenance Branch for Major Release in Git",
	  "codeDescription": "Git commands to create a new maintenance branch from the main branch for a major release of pytest.",
	  "codeLanguage": "bash",
	  "codeTokens": 51,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#2025-04-08_snippet_2",
	  "pageTitle": "Release Procedure for pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "git fetch upstream\ngit branch 8.0.x upstream/main\ngit push upstream 8.0.x"
		}
	  ],
	  "relevance": 0.75
	},
	{
	  "codeTitle": "Customizing log colors in pytest",
	  "codeDescription": "Demonstrates how to customize log colors for different log levels in pytest using the add_color_level() method.",
	  "codeLanguage": "python",
	  "codeTokens": 126,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#2025-04-08_snippet_13",
	  "pageTitle": "Managing Logging in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    logging_plugin = config.pluginmanager.get_plugin(\"logging-plugin\")\n\n    # Change color on existing log level\n    logging_plugin.log_cli_handler.formatter.add_color_level(logging.INFO, \"cyan\")\n\n    # Add color to a custom log level (a custom log level `SPAM` is already set up)\n    logging_plugin.log_cli_handler.formatter.add_color_level(logging.SPAM, \"blue\")"
		}
	  ],
	  "relevance": 0.75
	},
	{
	  "codeTitle": "Demonstrating Unpacking Error with Empty List in Python with Pytest",
	  "codeDescription": "This test attempts to unpack an empty list into two variables, resulting in a ValueError due to insufficient values.",
	  "codeLanguage": "python",
	  "codeTokens": 53,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_16",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_z1_unpack_error(self):\n    items = []\n>   a, b = items"
		}
	  ],
	  "relevance": 0.75
	},
	{
	  "codeTitle": "Upgrading pytest via pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 33,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.6.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 2.6.2 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.748
	},
	{
	  "codeTitle": "Testing Class Attribute on Instance in Python with Pytest",
	  "codeDescription": "This test creates a class 'Foo' with an attribute 'b' set to 1, then asserts that the attribute of a newly created instance is equal to 2. The assertion fails as the actual value is 1.",
	  "codeLanguage": "python",
	  "codeTokens": 83,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_5",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_attribute_instance():\n    class Foo:\n        b = 1\n\n>   assert Foo().b == 2"
		}
	  ],
	  "relevance": 0.745
	},
	{
	  "codeTitle": "Upgrading Pytest via pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 34,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.2.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 6.2.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.745
	},
	{
	  "codeTitle": "Testing String Containment in Python with Pytest",
	  "codeDescription": "This test checks if a long string of 'f' characters is not in a text composed of repeated 'head' and 'tail' words. The assertion fails as the 'f' string is actually present in the text.",
	  "codeLanguage": "python",
	  "codeTokens": 104,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_1",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_not_in_text_single_long_term(self):\n    text = \"head \" * 50 + \"f\" * 70 + \"tail \" * 20\n>   assert \"f\" * 70 not in text"
		}
	  ],
	  "relevance": 0.745
	},
	{
	  "codeTitle": "Accessing Exception Information Interactively in Python",
	  "codeDescription": "Python code demonstrating how to manually access exception information after a test failure using sys.last_value, sys.last_type, and sys.last_traceback in an interactive session.",
	  "codeLanguage": "python",
	  "codeTokens": 73,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/failures.rst#2025-04-08_snippet_3",
	  "pageTitle": "Handling Test Failures in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": ">>> import sys\n>>> sys.last_traceback.tb_lineno\n42\n>>> sys.last_value\nAssertionError('assert result == \"ok\"',)"
		}
	  ],
	  "relevance": 0.745
	},
	{
	  "codeTitle": "Testing Exception Raising in Python with Pytest",
	  "codeDescription": "This test uses the 'raises' function to check if a TypeError is raised when trying to convert a non-numeric string to an integer. The test fails because a ValueError is raised instead.",
	  "codeLanguage": "python",
	  "codeTokens": 72,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_8",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_raises(self):\n    s = \"qwe\"\n>   raises(TypeError, int, s)"
		}
	  ],
	  "relevance": 0.745
	},
	{
	  "codeTitle": "Sending Failed Test Reports to Pastebin with Pytest",
	  "codeDescription": "This command demonstrates how to use Pytest to send failed test reports to an online pastebin service. It creates a URL for each test failure.",
	  "codeLanguage": "bash",
	  "codeTokens": 45,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_21",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --pastebin=failed"
		}
	  ],
	  "relevance": 0.745
	},
	{
	  "codeTitle": "Testing Partial Function Monkeypatching in Python",
	  "codeDescription": "Demonstrates using monkeypatch's context manager to temporarily modify the functools.partial attribute for testing purposes.",
	  "codeLanguage": "python",
	  "codeTokens": 70,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#2025-04-08_snippet_4",
	  "pageTitle": "Monkeypatching and Mocking in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_partial(monkeypatch):\n    with monkeypatch.context() as m:\n        m.setattr(functools, \"partial\", 3)\n        assert functools.partial == 3"
		}
	  ],
	  "relevance": 0.745
	},
	{
	  "codeTitle": "Upgrading pytest via pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 33,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.9.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 2.9.1 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.742
	},
	{
	  "codeTitle": "Recording Test Properties in Pytest (Python)",
	  "codeDescription": "This example demonstrates how to use the record_property fixture to add extra properties to a test report.",
	  "codeLanguage": "python",
	  "codeTokens": 50,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#2025-04-08_snippet_7",
	  "pageTitle": "Pytest API and Builtin Fixtures Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_function(record_property):\n    record_property(\"example_key\", 1)"
		}
	  ],
	  "relevance": 0.74
	},
	{
	  "codeTitle": "Injecting Namespace into Doctests (Python)",
	  "codeDescription": "This example demonstrates how to use the doctest_namespace fixture to inject objects into the namespace of doctests.",
	  "codeLanguage": "python",
	  "codeTokens": 62,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#2025-04-08_snippet_5",
	  "pageTitle": "Pytest API and Builtin Fixtures Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.fixture(autouse=True)\ndef add_np(doctest_namespace):\n    doctest_namespace[\"np\"] = numpy"
		}
	  ],
	  "relevance": 0.74
	},
	{
	  "codeTitle": "Pytest Fixture Decoration Examples",
	  "codeDescription": "Shows two different syntax styles for decorating pytest fixtures: the verbose form with parentheses and the shorthand form without parentheses. The flake8-pytest-style plugin can enforce consistency in this pattern.",
	  "codeLanguage": "python",
	  "codeTokens": 56,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/goodpractices.rst#2025-04-08_snippet_5",
	  "pageTitle": "Python Testing Best Practices with pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.fixture()\n@pytest.fixture"
		}
	  ],
	  "relevance": 0.74
	},
	{
	  "codeTitle": "Running pytest with default logging options",
	  "codeDescription": "Shows how to run pytest with default logging options, which captures log messages of level WARNING or above.",
	  "codeLanguage": "bash",
	  "codeTokens": 31,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#2025-04-08_snippet_0",
	  "pageTitle": "Managing Logging in pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest"
		}
	  ],
	  "relevance": 0.74
	},
	{
	  "codeTitle": "Integrating custom markers with XML properties in conftest.py",
	  "codeDescription": "Implements a pytest_collection_modifyitems hook in conftest.py to automatically convert test_id markers into user properties for JUnitXML reports.",
	  "codeLanguage": "python",
	  "codeTokens": 95,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_16",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\n\n\ndef pytest_collection_modifyitems(session, config, items):\n    for item in items:\n        for marker in item.iter_markers(name=\"test_id\"):\n            test_id = marker.args[0]\n            item.user_properties.append((\"test_id\", test_id))"
		}
	  ],
	  "relevance": 0.74
	},
	{
	  "codeTitle": "Implementing Deliberately Failing Test in Python with Pytest",
	  "codeDescription": "Example test case demonstrating how pytest handles failure messages differently in CI environments. The test deliberately fails with a long error message to showcase output truncation behavior.",
	  "codeLanguage": "python",
	  "codeTokens": 123,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/ci.rst#2025-04-08_snippet_0",
	  "pageTitle": "CI Pipeline Integration with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_ci.py\nimport pytest\n\n\ndef test_db_initialized():\n    pytest.fail(\n        \"deliberately failing for demo purpose, Lorem ipsum dolor sit amet, \"\n        \"consectetur adipiscing elit. Cras facilisis, massa in suscipit \"\n        \"dignissim, mauris lacus molestie nisi, quis varius metus nulla ut ipsum.\"\n    )"
		}
	  ],
	  "relevance": 0.74
	},
	{
	  "codeTitle": "Upgrading pytest to version 6.1.1 using pip",
	  "codeDescription": "This command upgrades pytest to the latest version (6.1.1) using pip. It's a simple one-line command that can be run in a terminal or command prompt.",
	  "codeLanguage": "bash",
	  "codeTokens": 56,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.1.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 6.1.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.739
	},
	{
	  "codeTitle": "Installing Pytest via pip or easy_install",
	  "codeDescription": "Commands to install or upgrade pytest using either pip or easy_install package managers",
	  "codeLanguage": "bash",
	  "codeTokens": 43,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.1.3.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 2.1.3 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest # or\neasy_install -U pytest"
		}
	  ],
	  "relevance": 0.736
	},
	{
	  "codeTitle": "Importing ExitCode Enum in Python for pytest",
	  "codeDescription": "Demonstrates how to import the ExitCode enum from pytest to access exit codes programmatically. This allows developers to work with pytest's exit codes in their own code.",
	  "codeLanguage": "python",
	  "codeTokens": 48,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/exit-codes.rst#2025-04-08_snippet_0",
	  "pageTitle": "Exit Codes in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "from pytest import ExitCode"
		}
	  ],
	  "relevance": 0.735
	},
	{
	  "codeTitle": "Implementing Optimized Functionality for Optional Import Testing in Pytest",
	  "codeDescription": "Defines an optimized implementation of a function that will be compared against the base version in parametrized tests.",
	  "codeLanguage": "python",
	  "codeTokens": 51,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#2025-04-08_snippet_12",
	  "pageTitle": "Parametrizing Tests in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of opt1.py\ndef func1():\n    return 1.0001"
		}
	  ],
	  "relevance": 0.735
	},
	{
	  "codeTitle": "Using Typed Fixtures in Test Functions",
	  "codeDescription": "Demonstrates how to properly type test functions that use fixtures as parameters.",
	  "codeLanguage": "python",
	  "codeTokens": 45,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/types.rst#2025-04-08_snippet_3",
	  "pageTitle": "Typing Guide for pytest Tests",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_sample_fixture(sample_fixture: int) -> None:\n    assert sample_fixture == 38"
		}
	  ],
	  "relevance": 0.735
	},
	{
	  "codeTitle": "Examining pytest Collection Tree for Custom Test Types",
	  "codeDescription": "Command to view the test collection structure without executing tests, showing how pytest organizes the custom YAML test items in its collection hierarchy.",
	  "codeLanguage": "bash",
	  "codeTokens": 136,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/nonpython.rst#2025-04-08_snippet_3",
	  "pageTitle": "Working with Non-Python Tests in pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "nonpython $ pytest --collect-only\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project/nonpython\ncollected 2 items\n\n<Package nonpython>\n  <YamlFile test_simple.yaml>\n    <YamlItem hello>\n    <YamlItem ok>\n\n======================== 2 tests collected in 0.12s ========================"
		}
	  ],
	  "relevance": 0.735
	},
	{
	  "codeTitle": "Configuring pytest.ini to Disable Plugin Autoloading",
	  "codeDescription": "Configuration for pytest.ini to disable plugin autoloading and explicitly specify which plugins to load. This ensures consistent plugin behavior across test runs.",
	  "codeLanguage": "ini",
	  "codeTokens": 55,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/plugins.rst#2025-04-08_snippet_7",
	  "pageTitle": "Installing and Using pytest Plugins",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\naddopts = --disable-plugin-autoload -p NAME,NAME2"
		}
	  ],
	  "relevance": 0.735
	},
	{
	  "codeTitle": "Defining Test Class Patterns in pytest",
	  "codeDescription": "Specifies name prefixes or glob-style patterns for classes considered for test collection. This allows customizing which classes are treated as test classes.",
	  "codeLanguage": "ini",
	  "codeTokens": 44,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_38",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\npython_classes = *Suite"
		}
	  ],
	  "relevance": 0.735
	},
	{
	  "codeTitle": "Upgrading to pytest-3.7.3 using pip",
	  "codeDescription": "Command to upgrade pytest to the latest 3.7.3 version using pip package manager. This is a simple pip install command with the upgrade flag.",
	  "codeLanguage": "bash",
	  "codeTokens": 51,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.7.3.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-3.7.3 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.733
	},
	{
	  "codeTitle": "Running pytest with Incremental Tests",
	  "codeDescription": "Shows the output of running pytest with incremental tests, demonstrating how subsequent tests are skipped when a test in the sequence fails.",
	  "codeLanguage": "pytest",
	  "codeTokens": 212,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_19",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest -rx\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 4 items\n\ntest_step.py .Fx.                                                    [100%]\n\n================================= FAILURES =================================\n____________________ TestUserHandling.test_modification ____________________\n\nself = <test_step.TestUserHandling object at 0xdeadbeef0001>\n\n    def test_modification(self):\n>       assert 0\nE       assert 0\n\ntest_step.py:11: AssertionError\n========================= short test summary info ==========================\nXFAIL test_step.py::TestUserHandling::test_deletion - reason: previous test failed (test_modification)\n================== 1 failed, 2 passed, 1 xfailed in 0.12s =================="
		}
	  ],
	  "relevance": 0.73
	},
	{
	  "codeTitle": "Installing pytest 5.0.1 via pip",
	  "codeDescription": "Command to upgrade pytest to version 5.0.1 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 37,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.0.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 5.0.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.73
	},
	{
	  "codeTitle": "Validating Exception Type in Nested Exception Groups with pytest",
	  "codeDescription": "Shows how to use group_contains method to validate exception types in exception groups at different nesting depths.",
	  "codeLanguage": "python",
	  "codeTokens": 67,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#2025-04-08_snippet_10",
	  "pageTitle": "Writing and Reporting Assertions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "assert excinfo.group_contains(TypeError, depth=2)\nassert not excinfo.group_contains(RuntimeError, depth=2)\nassert not excinfo.group_contains(TypeError, depth=1)"
		}
	  ],
	  "relevance": 0.73
	},
	{
	  "codeTitle": "Typing Parameterized Tests",
	  "codeDescription": "Shows how to add type annotations to pytest parameterized tests with multiple inputs.",
	  "codeLanguage": "python",
	  "codeTokens": 82,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/types.rst#2025-04-08_snippet_4",
	  "pageTitle": "Typing Guide for pytest Tests",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.parametrize(\"input_value, expected_output\", [(1, 2), (5, 6), (10, 11)])\ndef test_increment(input_value: int, expected_output: int) -> None:\n    assert input_value + 1 == expected_output"
		}
	  ],
	  "relevance": 0.73
	},
	{
	  "codeTitle": "Running unittest-style Tests with pytest (Bash)",
	  "codeDescription": "Command to run existing unittest-style test suite using pytest. pytest automatically collects unittest.TestCase subclasses and their test methods in test_*.py or *_test.py files.",
	  "codeLanguage": "bash",
	  "codeTokens": 46,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/unittest.rst#2025-04-08_snippet_0",
	  "pageTitle": "Running unittest-based Tests with pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest tests"
		}
	  ],
	  "relevance": 0.73
	},
	{
	  "codeTitle": "Retrieving Data from Pytest Item Stash During Test Teardown",
	  "codeDescription": "Demonstrates how to retrieve and modify stashed data during the test teardown phase.",
	  "codeLanguage": "python",
	  "codeTokens": 71,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#2025-04-08_snippet_12",
	  "pageTitle": "Writing Hook Functions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def pytest_runtest_teardown(item: pytest.Item) -> None:\n    if not item.stash[been_there_key]:\n        print(\"Oh?\")\n    item.stash[done_that_key] = \"yes!\""
		}
	  ],
	  "relevance": 0.73
	},
	{
	  "codeTitle": "CI Environment Pytest Execution Output",
	  "codeDescription": "Demonstrates the full, untruncated output format when running pytest in a CI environment with the CI environment variable set.",
	  "codeLanguage": "pytest",
	  "codeTokens": 122,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/ci.rst#2025-04-08_snippet_2",
	  "pageTitle": "CI Pipeline Integration with Pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ export CI=true\n$ pytest test_ci.py\n...\n========================= short test summary info ==========================\nFAILED test_backends.py::test_db_initialized[d2] - Failed: deliberately failing\nfor demo purpose, Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras\nfacilisis, massa in suscipit dignissim, mauris lacus molestie nisi, quis varius\nmetus nulla ut ipsum."
		}
	  ],
	  "relevance": 0.73
	},
	{
	  "codeTitle": "Upgrading pytest to version 4.4.1 using pip",
	  "codeDescription": "Command to upgrade an existing pytest installation to the latest 4.4.1 version using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 42,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.4.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-4.4.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.727
	},
	{
	  "codeTitle": "Running Python Package Tests with --pyargs",
	  "codeDescription": "Command-line example showing how to run tests from an installed Python package using the --pyargs option. This tells pytest to interpret the arguments as Python package names.",
	  "codeLanguage": "bash",
	  "codeTokens": 55,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#2025-04-08_snippet_4",
	  "pageTitle": "Pytest Test Discovery Configuration",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --pyargs unittest2.test.test_skipping -q"
		}
	  ],
	  "relevance": 0.725
	},
	{
	  "codeTitle": "Comparing Attr Classes in Python with Pytest",
	  "codeDescription": "This test creates two instances of an attr-based class 'Foo' with different values and asserts their equality. The assertion fails due to the difference in the 'b' attribute.",
	  "codeLanguage": "python",
	  "codeTokens": 105,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/reportingdemo.rst#2025-04-08_snippet_3",
	  "pageTitle": "Python Test Failure Reports with Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_eq_attrs(self):\n    import attr\n\n    @attr.s\n    class Foo:\n        a = attr.ib()\n        b = attr.ib()\n\n    left = Foo(1, \"b\")\n    right = Foo(1, \"c\")\n>   assert left == right"
		}
	  ],
	  "relevance": 0.725
	},
	{
	  "codeTitle": "Converting Async Fixture Usage in Synchronous Tests (Python)",
	  "codeDescription": "Example demonstrating how to refactor code when an async fixture is used by a synchronous test, to avoid deprecation warnings. The solution wraps the async fixture in a synchronous fixture that returns the coroutine for explicit handling.",
	  "codeLanguage": "python",
	  "codeTokens": 97,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#2025-04-08_snippet_0",
	  "pageTitle": "Deprecations and Removals in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import asyncio\nimport pytest\n\n\n@pytest.fixture\nasync def unawaited_fixture():\n    return 1\n\n\ndef test_foo(unawaited_fixture):\n    assert 1 == asyncio.run(unawaited_fixture)"
		},
		{
		  "language": "python",
		  "code": "import asyncio\nimport pytest\n\n\n@pytest.fixture\ndef unawaited_fixture():\n    async def inner_fixture():\n        return 1\n\n    return inner_fixture()\n\n\ndef test_foo(unawaited_fixture):\n    assert 1 == asyncio.run(unawaited_fixture)"
		}
	  ],
	  "relevance": 0.725
	},
	{
	  "codeTitle": "Controlling Verbosity in pytest",
	  "codeDescription": "Command-line options to adjust the verbosity level of pytest's output. Shows both shortcut and full option formats for various verbosity levels.",
	  "codeLanguage": "bash",
	  "codeTokens": 111,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_1",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --quiet          # quiet - less verbose - mode\npytest -q               # quiet - less verbose - mode (shortcut)\npytest -v               # increase verbosity, display individual test names\npytest -vv              # more verbose, display more details from the test output\npytest -vvv             # not a standard , but may be used for even more detail in certain setups"
		}
	  ],
	  "relevance": 0.725
	},
	{
	  "codeTitle": "Configuring Pytest Acceptance Test Options and Fixtures",
	  "codeDescription": "Defines pytest configuration for acceptance testing including command line options and a fixture class. Implements option parsing for -A flag and creates an AcceptFixture class that handles test directory management and command execution.",
	  "codeLanguage": "python",
	  "codeTokens": 204,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/attic.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest Acceptance Testing Configuration",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# ./conftest.py\ndef pytest_option(parser):\n    group = parser.getgroup(\"myproject\")\n    group.addoption(\n        \"-A\", dest=\"acceptance\", action=\"store_true\", help=\"run (slow) acceptance tests\"\n    )\n\n\ndef pytest_funcarg__accept(request):\n    return AcceptFixture(request)\n\n\nclass AcceptFixture:\n    def __init__(self, request):\n        if not request.config.getoption(\"acceptance\"):\n            pytest.skip(\"specify -A to run acceptance tests\")\n        self.tmpdir = request.config.mktemp(request.function.__name__, numbered=True)\n\n    def run(self, *cmd):\n        \"\"\"called by test code to execute an acceptance test.\"\"\"\n        self.tmpdir.chdir()\n        return subprocess.check_output(cmd).decode()"
		}
	  ],
	  "relevance": 0.725
	},
	{
	  "codeTitle": "Local Pytest Execution Output",
	  "codeDescription": "Shows the truncated output format when running pytest locally, where the failure message is cut off to fit the terminal width.",
	  "codeLanguage": "pytest",
	  "codeTokens": 68,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/ci.rst#2025-04-08_snippet_1",
	  "pageTitle": "CI Pipeline Integration with Pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest test_ci.py\n...\n========================= short test summary info ==========================\nFAILED test_backends.py::test_db_initialized[d2] - Failed: deliberately f..."
		}
	  ],
	  "relevance": 0.725
	},
	{
	  "codeTitle": "Installing or Upgrading pytest to version 5.3.1 using pip",
	  "codeDescription": "Command to upgrade an existing pytest installation to version 5.3.1 using pip. This is the recommended installation method for the bug-fix release.",
	  "codeLanguage": "bash",
	  "codeTokens": 50,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.3.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-5.3.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.724
	},
	{
	  "codeTitle": "Installing Pytest 7.1.3 via pip",
	  "codeDescription": "Command to upgrade pytest to version 7.1.3 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 38,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.1.3.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 7.1.3 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.721
	},
	{
	  "codeTitle": "Displaying pytest help information in Bash",
	  "codeDescription": "Shows how to use the -h option to display help information for pytest command line options and configuration file settings.",
	  "codeLanguage": "bash",
	  "codeTokens": 44,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/customize.rst#2025-04-08_snippet_0",
	  "pageTitle": "Configuring pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest -h   # prints options _and_ config file settings"
		}
	  ],
	  "relevance": 0.72
	},
	{
	  "codeTitle": "Monitoring PYTEST_CURRENT_TEST with psutil",
	  "codeDescription": "Script that uses psutil to find and display running pytest processes by checking for the PYTEST_CURRENT_TEST environment variable in all running processes.",
	  "codeLanguage": "python",
	  "codeTokens": 94,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_28",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import psutil\n\nfor pid in psutil.pids():\n    environ = psutil.Process(pid).environ()\n    if \"PYTEST_CURRENT_TEST\" in environ:\n        print(f'pytest process {pid} running: {environ[\"PYTEST_CURRENT_TEST\"]}')"
		}
	  ],
	  "relevance": 0.72
	},
	{
	  "codeTitle": "Converting Hook Implementation with Marker to hookimpl Decorator (Python)",
	  "codeDescription": "Example showing how to migrate from using pytest.mark to configure hook implementations to using the pytest.hookimpl decorator. This approach is recommended over the deprecated marker-based configuration.",
	  "codeLanguage": "python",
	  "codeTokens": 60,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#2025-04-08_snippet_1",
	  "pageTitle": "Deprecations and Removals in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.tryfirst\ndef pytest_runtest_call(): ..."
		},
		{
		  "language": "python",
		  "code": "def pytest_runtest_call(): ...\n\n\npytest_runtest_call.tryfirst = True"
		},
		{
		  "language": "python",
		  "code": "@pytest.hookimpl(tryfirst=True)\ndef pytest_runtest_call(): ..."
		}
	  ],
	  "relevance": 0.72
	},
	{
	  "codeTitle": "Configuring Traceback and Capture Options in pytest",
	  "codeDescription": "Examples of command-line options to modify how pytest displays tracebacks and captures output. Includes options for showing local variables, controlling output capture, and selecting traceback styles.",
	  "codeLanguage": "bash",
	  "codeTokens": 243,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_0",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --showlocals     # show local variables in tracebacks\npytest -l               # show local variables (shortcut)\npytest --no-showlocals  # hide local variables (if addopts enables them)\n\npytest --capture=fd  # default, capture at the file descriptor level\npytest --capture=sys # capture at the sys level\npytest --capture=no  # don't capture\npytest -s            # don't capture (shortcut)\npytest --capture=tee-sys # capture to logs but also output to sys level streams\n\npytest --tb=auto    # (default) 'long' tracebacks for the first and last\n                     # entry, but 'short' style for the other entries\npytest --tb=long    # exhaustive, informative traceback formatting\npytest --tb=short   # shorter traceback format\npytest --tb=line    # only one line per failure\npytest --tb=native  # Python standard library formatting\npytest --tb=no      # no traceback at all"
		}
	  ],
	  "relevance": 0.72
	},
	{
	  "codeTitle": "Plugin Hook Modification Example",
	  "codeDescription": "Example of modifying a plugin hook to handle setup/teardown phases in pytest_runtest_logreport.",
	  "codeLanguage": "python",
	  "codeTokens": 43,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.2.0.rst#2025-04-08_snippet_1",
	  "pageTitle": "pytest 2.2.0 Release Notes",
	  "codeList": [
		{
		  "language": "python",
		  "code": "if rep.when != 'call': return"
		}
	  ],
	  "relevance": 0.72
	},
	{
	  "codeTitle": "Setting Temporary Path Retention Policy in pytest",
	  "codeDescription": "Controls which tmp_path directories are kept based on test outcomes. Options include retaining directories for all tests, failed tests only, or removing all directories after each test.",
	  "codeLanguage": "ini",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_45",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\ntmp_path_retention_policy = all"
		}
	  ],
	  "relevance": 0.72
	},
	{
	  "codeTitle": "Installing pytest 7.2.2 via pip",
	  "codeDescription": "Command to upgrade pytest to version 7.2.2 using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 36,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.2.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 7.2.2 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.718
	},
	{
	  "codeTitle": "Running Tests in a Directory with Pytest",
	  "codeDescription": "Command to run all tests located within a specific directory.",
	  "codeLanguage": "bash",
	  "codeTokens": 29,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_1",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest testing/"
		}
	  ],
	  "relevance": 0.715
	},
	{
	  "codeTitle": "Installing pytest via pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 35,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.8.3.rst#2025-04-08_snippet_0",
	  "pageTitle": "Python Testing - pytest 2.8.3 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.715
	},
	{
	  "codeTitle": "Incorrectly Applying a Mark to a Fixture Function",
	  "codeDescription": "Demonstrates a common error where applying a mark to a fixture function has no effect. This pattern is deprecated and will raise errors in future pytest versions.",
	  "codeLanguage": "python",
	  "codeTokens": 63,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#2025-04-08_snippet_3",
	  "pageTitle": "Deprecations and Removals in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.usefixtures(\"clean_database\")\n@pytest.fixture\ndef user() -> User: ..."
		}
	  ],
	  "relevance": 0.715
	},
	{
	  "codeTitle": "Converting Nose with_setup to pytest Fixtures",
	  "codeDescription": "Shows how to convert nose's @with_setup decorator to pytest fixtures. This is necessary as nose support has been removed in pytest 8.0.",
	  "codeLanguage": "python",
	  "codeTokens": 83,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#2025-04-08_snippet_7",
	  "pageTitle": "Deprecations and Removals in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "from nose.tools import with_setup\n\n\ndef setup_some_resource(): ...\n\n\ndef teardown_some_resource(): ...\n\n\n@with_setup(setup_some_resource, teardown_some_resource)\ndef test_foo(): ..."
		},
		{
		  "language": "python",
		  "code": "import pytest\n\n\ndef setup_some_resource(): ...\n\n\ndef teardown_some_resource(): ...\n\n\n@pytest.fixture\ndef some_resource():\n    setup_some_resource()\n    yield\n    teardown_some_resource()\n\n\ndef test_foo(some_resource): ..."
		}
	  ],
	  "relevance": 0.715
	},
	{
	  "codeTitle": "Legacy Class-Level Marker Application in Pytest",
	  "codeDescription": "Legacy method for setting markers at the class level by setting the pytestmark attribute on a test class directly.",
	  "codeLanguage": "python",
	  "codeTokens": 49,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_10",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n\nclass TestClass:\n    pytestmark = pytest.mark.webtest"
		}
	  ],
	  "relevance": 0.715
	},
	{
	  "codeTitle": "Configuring Pytest through INI Files",
	  "codeDescription": "Example configuration in setup.cfg or tox.ini that sets directories to ignore and default command line options.",
	  "codeLanguage": "ini",
	  "codeTokens": 75,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.0.0.rst#2025-04-08_snippet_3",
	  "pageTitle": "Release Notes for Pytest 2.0.0",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nnorecursedirs = .hg data*  # don't ever recurse in such dirs\naddopts = -x --pyargs      # add these command line options by default"
		}
	  ],
	  "relevance": 0.715
	},
	{
	  "codeTitle": "Dictionary Key Removal Test Example",
	  "codeDescription": "Demonstrates testing error conditions by removing dictionary keys using monkeypatch.delitem.",
	  "codeLanguage": "python",
	  "codeTokens": 131,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#2025-04-08_snippet_10",
	  "pageTitle": "Monkeypatching and Mocking in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of test_app.py\nimport pytest\n\n# app.py with the connection string function\nimport app\n\n\ndef test_missing_user(monkeypatch):\n    # patch the DEFAULT_CONFIG t be missing the 'user' key\n    monkeypatch.delitem(app.DEFAULT_CONFIG, \"user\", raising=False)\n\n    # Key error expected because a config is not passed, and the\n    # default is now missing the 'user' entry.\n    with pytest.raises(KeyError):\n        _ = app.create_connection_string()"
		}
	  ],
	  "relevance": 0.715
	},
	{
	  "codeTitle": "Installing pytest 3.2.3 via pip",
	  "codeDescription": "Command to upgrade an existing pytest installation to version 3.2.3 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 33,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.2.3.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.712
	},
	{
	  "codeTitle": "Permanently Activating Argcomplete for pytest in Bash",
	  "codeDescription": "This command permanently activates argcomplete specifically for pytest by adding it to the user's .bashrc file.",
	  "codeLanguage": "bash",
	  "codeTokens": 43,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/bash-completion.rst#2025-04-08_snippet_2",
	  "pageTitle": "Setting up Bash Completion for pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "register-python-argcomplete pytest >> ~/.bashrc"
		}
	  ],
	  "relevance": 0.71
	},
	{
	  "codeTitle": "Implementing Hook in conftest.py",
	  "codeDescription": "Example of implementing a custom hook in a conftest.py file.",
	  "codeLanguage": "python",
	  "codeTokens": 50,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#2025-04-08_snippet_6",
	  "pageTitle": "Writing Hook Functions in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def pytest_my_hook(config):\n    \"\"\"\n    Print all active hooks to the screen.\n    \"\"\"\n    print(config.hook)"
		}
	  ],
	  "relevance": 0.71
	},
	{
	  "codeTitle": "Migrating String-Based pytest.raises and pytest.warns in Python",
	  "codeDescription": "Demonstrates how to update deprecated string-based pytest.raises and pytest.warns calls to use context managers and exec() for invalid syntax cases.",
	  "codeLanguage": "python",
	  "codeTokens": 120,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#2025-04-08_snippet_12",
	  "pageTitle": "Deprecations and Removals in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "with pytest.raises(ZeroDivisionError):\n    1 / 0\nwith pytest.raises(SyntaxError):\n    exec(\"a $ b\")  # exec is required for invalid syntax\n\nwith pytest.warns(DeprecationWarning):\n    my_function()\nwith pytest.warns(SyntaxWarning):\n    exec(\"assert(1, 2)\")  # exec is used to avoid a top-level warning"
		}
	  ],
	  "relevance": 0.71
	},
	{
	  "codeTitle": "Demonstrating Current Fixture Usage in pytest",
	  "codeDescription": "This snippet shows how fixtures are currently used in pytest to generate test scenarios. It demonstrates the use of default and parameterized fixtures, as well as a combined fixture using request.getfuncargvalue().",
	  "codeLanguage": "python",
	  "codeTokens": 233,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/proposals/parametrize_with_fixtures.rst#2025-04-08_snippet_0",
	  "pageTitle": "Proposal: Parametrize with Fixtures in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n\n@pytest.fixture\ndef default_context():\n    return {\"extra_context\": {}}\n\n\n@pytest.fixture(\n    params=[\n        {\"author\": \"alice\"},\n        {\"project_slug\": \"helloworld\"},\n        {\"author\": \"bob\", \"project_slug\": \"foobar\"},\n    ]\n)\ndef extra_context(request):\n    return {\"extra_context\": request.param}\n\n\n@pytest.fixture(params=[\"default\", \"extra\"])\ndef context(request):\n    if request.param == \"default\":\n        return request.getfuncargvalue(\"default_context\")\n    else:\n        return request.getfuncargvalue(\"extra_context\")\n\n\ndef test_generate_project(cookies, context):\n    \"\"\"Call the cookiecutter API to generate a new project from a\n    template.\n    \"\"\"\n    result = cookies.bake(extra_context=context)\n\n    assert result.exit_code == 0\n    assert result.exception is None\n    assert result.project.isdir()"
		}
	  ],
	  "relevance": 0.71
	},
	{
	  "codeTitle": "Using pdb.set_trace() in pytest",
	  "codeDescription": "Example of using Python's built-in debugger (pdb) within pytest without needing to disable output capturing.",
	  "codeLanguage": "Python",
	  "codeTokens": 42,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.4.0.rst#2025-04-08_snippet_2",
	  "pageTitle": "pytest 2.4.0 Release Notes",
	  "codeList": [
		{
		  "language": "Python",
		  "code": "import pdb ; pdb.set_trace()"
		}
	  ],
	  "relevance": 0.71
	},
	{
	  "codeTitle": "Example of Testing Against Installed Package with Import Mode",
	  "codeDescription": "Directory structure illustrating how import modes affect testing against installed versus local packages, demonstrating the append mode's advantages.",
	  "codeLanguage": "text",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/pythonpath.rst#2025-04-08_snippet_4",
	  "pageTitle": "Understanding pytest Import Mechanisms and Path Configuration",
	  "codeList": [
		{
		  "language": "text",
		  "code": "testing/__init__.py\ntesting/test_pkg_under_test.py\npkg_under_test/"
		}
	  ],
	  "relevance": 0.71
	},
	{
	  "codeTitle": "Installing Pytest via pip or easy_install",
	  "codeDescription": "Commands to install or upgrade pytest using either pip or easy_install package managers.",
	  "codeLanguage": "bash",
	  "codeTokens": 44,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.3.3.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 2.3.3 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest # or\neasy_install -U pytest"
		}
	  ],
	  "relevance": 0.709
	},
	{
	  "codeTitle": "Installing pytest 4.2.0 via pip",
	  "codeDescription": "Command to upgrade pytest to version 4.2.0 using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 36,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.2.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 4.2.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.706
	},
	{
	  "codeTitle": "Renaming Rules for Pytest 2.0 Transition",
	  "codeDescription": "Demonstrates the naming convention changes from py.test to pytest. It shows how to access helpers, collection classes, and the main function in the new flat namespace structure.",
	  "codeLanguage": "python",
	  "codeTokens": 76,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/naming20.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 2.0 Naming Changes",
	  "codeList": [
		{
		  "language": "python",
		  "code": "py.test.XYZ          -> pytest.XYZ\npy.test.collect.XYZ  -> pytest.XYZ\npy.test.cmdline.main -> pytest.main"
		}
	  ],
	  "relevance": 0.705
	},
	{
	  "codeTitle": "Standard pytest Output Example",
	  "codeDescription": "Example of default pytest output when running tests, showing how failures are reported with minimal details. The output demonstrates how pytest summarizes list differences, dictionary differences, and long string comparisons.",
	  "codeLanguage": "pytest",
	  "codeTokens": 615,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_3",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest --no-header\n=========================== test session starts ============================\ncollected 4 items\n\ntest_verbosity_example.py .FFF                                       [100%]\n\n================================= FAILURES =================================\n_____________________________ test_words_fail ______________________________\n\n    def test_words_fail():\n        fruits1 = [\"banana\", \"apple\", \"grapes\", \"melon\", \"kiwi\"]\n        fruits2 = [\"banana\", \"apple\", \"orange\", \"melon\", \"kiwi\"]\n>       assert fruits1 == fruits2\nE       AssertionError: assert ['banana', 'a...elon', 'kiwi'] == ['banana', 'a...elon', 'kiwi']\nE\nE         At index 2 diff: 'grapes' != 'orange'\nE         Use -v to get more diff\n\ntest_verbosity_example.py:8: AssertionError\n____________________________ test_numbers_fail _____________________________\n\n    def test_numbers_fail():\n        number_to_text1 = {str(x): x for x in range(5)}\n        number_to_text2 = {str(x * 10): x * 10 for x in range(5)}\n>       assert number_to_text1 == number_to_text2\nE       AssertionError: assert {'0': 0, '1':..., '3': 3, ...} == {'0': 0, '10'...'30': 30, ...}\nE\nE         Omitting 1 identical items, use -vv to show\nE         Left contains 4 more items:\nE         {'1': 1, '2': 2, '3': 3, '4': 4}\nE         Right contains 4 more items:\nE         {'10': 10, '20': 20, '30': 30, '40': 40}\nE         Use -v to get more diff\n\ntest_verbosity_example.py:14: AssertionError\n___________________________ test_long_text_fail ____________________________\n\n    def test_long_text_fail():\n        long_text = \"Lorem ipsum dolor sit amet \" * 10\n>       assert \"hello world\" in long_text\nE       AssertionError: assert 'hello world' in 'Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ips... sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet '\n\ntest_verbosity_example.py:19: AssertionError\n========================= short test summary info ==========================\nFAILED test_verbosity_example.py::test_words_fail - AssertionError: asser...\nFAILED test_verbosity_example.py::test_numbers_fail - AssertionError: ass...\nFAILED test_verbosity_example.py::test_long_text_fail - AssertionError: a...\n======================= 3 failed, 1 passed in 0.12s ========================"
		}
	  ],
	  "relevance": 0.705
	},
	{
	  "codeTitle": "Updating pytest.mark.parametrize with pytest.param in Python",
	  "codeDescription": "Shows how to replace deprecated mark application in pytest.mark.parametrize with pytest.param for better readability and internal improvements.",
	  "codeLanguage": "python",
	  "codeTokens": 115,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#2025-04-08_snippet_13",
	  "pageTitle": "Deprecations and Removals in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.parametrize(\n    \"a, b\",\n    [\n        (3, 9),\n        pytest.param(6, 36, marks=pytest.mark.xfail(reason=\"flaky\")),\n        (10, 100),\n        (20, 200),\n        (40, 400),\n        (50, 500),\n    ],\n)\ndef test_foo(a, b): ..."
		}
	  ],
	  "relevance": 0.705
	},
	{
	  "codeTitle": "Demonstrating Enhanced Pytest Traceback with PEP 657 Support",
	  "codeDescription": "This code snippet illustrates the improved traceback output in pytest, showcasing the new PEP 657 support. It highlights specific code segments in the traceback, making it easier to identify the exact location and nature of the error.",
	  "codeLanguage": "pytest",
	  "codeTokens": 169,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/changelog/10224.improvement.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest Traceback Enhancements",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "================================= FAILURES =================================\n_______________________ test_gets_correct_tracebacks _______________________\n\ntest_tracebacks.py:12: in test_gets_correct_tracebacks\n    assert manhattan_distance(p1, p2) == 1\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\ntest_tracebacks.py:6: in manhattan_distance\n    return abs(point_1.x - point_2.x) + abs(point_1.y - point_2.y)\n                           ^^^^^^^^^\nE   AttributeError: 'NoneType' object has no attribute 'x'"
		}
	  ],
	  "relevance": 0.705
	},
	{
	  "codeTitle": "Installing pytest via pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager. This is the recommended way to install or upgrade pytest.",
	  "codeLanguage": "shell",
	  "codeTokens": 44,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.8.4.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-2.8.4 Release Notes",
	  "codeList": [
		{
		  "language": "shell",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.705
	},
	{
	  "codeTitle": "Creating YAML Test Specification",
	  "codeDescription": "Example of a simple YAML test file that defines two test cases: 'hello' which will fail and 'ok' which will pass based on the conftest.py implementation.",
	  "codeLanguage": "yaml",
	  "codeTokens": 64,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/nonpython.rst#2025-04-08_snippet_0",
	  "pageTitle": "Working with Non-Python Tests in pytest",
	  "codeList": [
		{
		  "language": "yaml",
		  "code": "hello:\n    some: other\n\nok:\n    sub1: sub1"
		}
	  ],
	  "relevance": 0.705
	},
	{
	  "codeTitle": "Upgrading Pytest to Version 6.2.4 using pip",
	  "codeDescription": "This command upgrades pytest to the latest version (6.2.4) using pip. It's a simple one-line command that can be run in a terminal or command prompt.",
	  "codeLanguage": "bash",
	  "codeTokens": 57,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.2.4.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 6.2.4 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.703
	},
	{
	  "codeTitle": "Newsfragment File Naming Convention",
	  "codeDescription": "Examples showing the correct file naming pattern for newsfragments, which should follow the format '<ISSUE>.<TYPE>.rst'. The examples illustrate how to create files for feature additions and bug fixes.",
	  "codeLanguage": "rst",
	  "codeTokens": 69,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/changelog/README.rst#2025-04-08_snippet_1",
	  "pageTitle": "Creating Changelog Entries with Newsfragments for pytest",
	  "codeList": [
		{
		  "language": "rst",
		  "code": "123.feature.rst, 456.bugfix.rst"
		}
	  ],
	  "relevance": 0.7
	},
	{
	  "codeTitle": "Upgrading to pytest 8.2.2 using pip",
	  "codeDescription": "Command to upgrade an existing pytest installation to version 8.2.2 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 41,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.2.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 8.2.2 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.7
	},
	{
	  "codeTitle": "Configuring pytester fixture in conftest.py",
	  "codeDescription": "Code snippet showing how to include the pytester fixture in a conftest.py file to enable testing pytest itself.",
	  "codeLanguage": "python",
	  "codeTokens": 40,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_9",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "python",
		  "code": "pytest_plugins = \"pytester\""
		}
	  ],
	  "relevance": 0.7
	},
	{
	  "codeTitle": "Deprecated Command-line String Usage in pytest.main()",
	  "codeDescription": "Shows the deprecated way of passing command-line arguments as a string to pytest.main() and the recommended approach using a list.",
	  "codeLanguage": "python",
	  "codeTokens": 45,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#2025-04-08_snippet_18",
	  "pageTitle": "Deprecations and Removals in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "pytest.main(\"-v -s\")"
		},
		{
		  "language": "python",
		  "code": "pytest.main([\"-v\", \"-s\"])"
		}
	  ],
	  "relevance": 0.7
	},
	{
	  "codeTitle": "Running pytest from command line",
	  "codeDescription": "Example of running pytest on the command line and the output showing a failing test with detailed assertion information.",
	  "codeLanguage": "pytest",
	  "codeTokens": 181,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#2025-04-08_snippet_3",
	  "pageTitle": "Getting Started with pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 1 item\n\ntest_sample.py F                                                     [100%]\n\n================================= FAILURES =================================\n_______________________________ test_answer ________________________________\n\n    def test_answer():\n>       assert func(3) == 5\nE       assert 4 == 5\nE        +  where 4 = func(3)\n\ntest_sample.py:6: AssertionError\n========================= short test summary info ==========================\nFAILED test_sample.py::test_answer - assert 4 == 5\n============================ 1 failed in 0.12s ============================="
		}
	  ],
	  "relevance": 0.7
	},
	{
	  "codeTitle": "Installing pytest 3.0.5 via pip",
	  "codeDescription": "Command to upgrade pytest to version 3.0.5 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 37,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.0.5.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 3.0.5 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.7
	},
	{
	  "codeTitle": "Implementing Function-Level Setup and Teardown in pytest",
	  "codeDescription": "Code example demonstrating module-level functions for setup and teardown that are invoked for every test function in the module. The function parameter is optional as of pytest-3.0.",
	  "codeLanguage": "python",
	  "codeTokens": 108,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/xunit_setup.rst#2025-04-08_snippet_3",
	  "pageTitle": "XUnit-Style Setup and Teardown in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def setup_function(function):\n    \"\"\"setup any state tied to the execution of the given function.\n    Invoked for every test function in the module.\n    \"\"\"\n\n\ndef teardown_function(function):\n    \"\"\"teardown any state that was previously setup with a setup_function\n    call.\n    \"\"\""
		}
	  ],
	  "relevance": 0.7
	},
	{
	  "codeTitle": "Running Pytest from Python Code",
	  "codeDescription": "Code to import pytest and run tests programmatically with custom arguments and plugins.",
	  "codeLanguage": "python",
	  "codeTokens": 43,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.0.0.rst#2025-04-08_snippet_2",
	  "pageTitle": "Release Notes for Pytest 2.0.0",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest ; pytest.main(arglist, pluginlist)"
		}
	  ],
	  "relevance": 0.697
	},
	{
	  "codeTitle": "Accessing Pytest Help (Python Interactive)",
	  "codeDescription": "This example shows how to access pytest help information interactively in a Python shell.",
	  "codeLanguage": "python",
	  "codeTokens": 38,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#2025-04-08_snippet_9",
	  "pageTitle": "Pytest API and Builtin Fixtures Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\nhelp(pytest)"
		}
	  ],
	  "relevance": 0.695
	},
	{
	  "codeTitle": "Clearing captured log records in pytest",
	  "codeDescription": "Demonstrates how to clear captured log records using the caplog.clear() method in a test function.",
	  "codeLanguage": "python",
	  "codeTokens": 76,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#2025-04-08_snippet_11",
	  "pageTitle": "Managing Logging in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_something_with_clearing_records(caplog):\n    some_method_that_creates_log_records()\n    caplog.clear()\n    your_test_method()\n    assert [\"Foo\"] == [rec.message for rec in caplog.records]"
		}
	  ],
	  "relevance": 0.695
	},
	{
	  "codeTitle": "Updating marker code from get_marker to get_closest_marker in Python",
	  "codeDescription": "This code example shows how to migrate from the deprecated Node.get_marker(name) to the newer Node.get_closest_marker(name) method for cases where marks overwrite each other and only the most specific mark matters.",
	  "codeLanguage": "python",
	  "codeTokens": 102,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/historical-notes.rst#2025-04-08_snippet_0",
	  "pageTitle": "Historical Notes in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# replace this:\nmarker = item.get_marker(\"log_level\")\nif marker:\n    level = marker.args[0]\n\n# by this:\nmarker = item.get_closest_marker(\"log_level\")\nif marker:\n    level = marker.args[0]"
		}
	  ],
	  "relevance": 0.695
	},
	{
	  "codeTitle": "Using addopts Command Line Options in bash",
	  "codeDescription": "Shows how pytest combines the addopts configuration with command line arguments, effectively running with both the configured options and the explicitly provided test file.",
	  "codeLanguage": "bash",
	  "codeTokens": 48,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_18",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --maxfail=2 -rf test_hello.py"
		}
	  ],
	  "relevance": 0.695
	},
	{
	  "codeTitle": "Installing pytest 3.0.6 via pip",
	  "codeDescription": "Command to upgrade pytest to version 3.0.6 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 37,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.0.6.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 3.0.6 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.695
	},
	{
	  "codeTitle": "Reading Test Arguments from File with Pytest",
	  "codeDescription": "Command to run tests specified in a file using the @ prefix to reference the file containing test paths and options.",
	  "codeLanguage": "bash",
	  "codeTokens": 43,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_10",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest @tests_to_run.txt"
		}
	  ],
	  "relevance": 0.695
	},
	{
	  "codeTitle": "Installing or upgrading pytest using easy_install",
	  "codeDescription": "Alternative command to install or upgrade pytest using easy_install.",
	  "codeLanguage": "bash",
	  "codeTokens": 31,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.4.0.rst#2025-04-08_snippet_1",
	  "pageTitle": "pytest 2.4.0 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "easy_install -U pytest"
		}
	  ],
	  "relevance": 0.694
	},
	{
	  "codeTitle": "Configuring log format in pytest.ini",
	  "codeDescription": "Shows how to customize log format and date format in the pytest.ini configuration file.",
	  "codeLanguage": "ini",
	  "codeTokens": 58,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#2025-04-08_snippet_2",
	  "pageTitle": "Managing Logging in pytest",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nlog_format = %(asctime)s %(levelname)s %(message)s\nlog_date_format = %Y-%m-%d %H:%M:%S"
		}
	  ],
	  "relevance": 0.69
	},
	{
	  "codeTitle": "Registering Custom Markers in pytest.ini",
	  "codeDescription": "This snippet shows how to register custom markers for a pytest suite using the pytest.ini configuration file. It demonstrates defining multiple custom markers.",
	  "codeLanguage": "ini",
	  "codeTokens": 70,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_6",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# content of pytest.ini\n[pytest]\nmarkers =\n    webtest: mark a test as a webtest.\n    slow: mark test as slow."
		}
	  ],
	  "relevance": 0.69
	},
	{
	  "codeTitle": "Updating marker code to use iter_markers for composable marks in Python",
	  "codeDescription": "This code example demonstrates how to migrate from the deprecated Node.get_marker(name) to the newer Node.iter_markers(name) method for cases where marks are composable and all of them need to be evaluated.",
	  "codeLanguage": "python",
	  "codeTokens": 112,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/historical-notes.rst#2025-04-08_snippet_1",
	  "pageTitle": "Historical Notes in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# replace this\nskipif = item.get_marker(\"skipif\")\nif skipif:\n    for condition in skipif.args:\n        # eval condition\n        ...\n\n# by this:\nfor skipif in item.iter_markers(\"skipif\"):\n    condition = skipif.args[0]\n    # eval condition"
		}
	  ],
	  "relevance": 0.69
	},
	{
	  "codeTitle": "Using config value in skipif string condition in pytest",
	  "codeDescription": "This example shows how to use pytest config values in a string condition with the skipif marker. This approach is still supported but boolean conditions are now preferred.",
	  "codeLanguage": "python",
	  "codeTokens": 59,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/historical-notes.rst#2025-04-08_snippet_4",
	  "pageTitle": "Historical Notes in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.skipif(\"not config.getvalue('db')\")\ndef test_function(): ..."
		}
	  ],
	  "relevance": 0.69
	},
	{
	  "codeTitle": "Upgrading Pytest using pip in Bash",
	  "codeDescription": "This command upgrades pytest to the latest version (3.0.7 in this context) using pip. It's a simple one-line command that can be executed in a terminal or command prompt.",
	  "codeLanguage": "bash",
	  "codeTokens": 60,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.0.7.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 3.0.7 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.69
	},
	{
	  "codeTitle": "Creating resultlog files with pytest",
	  "codeDescription": "Command to generate machine-readable plain-text result files using the --resultlog option. This feature is rarely used and scheduled for removal in pytest 6.0.",
	  "codeLanguage": "bash",
	  "codeTokens": 47,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_11",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --resultlog=path"
		}
	  ],
	  "relevance": 0.685
	},
	{
	  "codeTitle": "Running pytest with detailed pass information using -rpP flag",
	  "codeDescription": "Shows how to run pytest with the -rpP flag to display both passing tests and their captured output in a separate PASSES section.",
	  "codeLanguage": "bash",
	  "codeTokens": 42,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/output.rst#2025-04-08_snippet_9",
	  "pageTitle": "Managing pytest's Output",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "$ pytest -rpP"
		}
	  ],
	  "relevance": 0.685
	},
	{
	  "codeTitle": "Using boolean conditions with skipif marker in pytest",
	  "codeDescription": "This example demonstrates the preferred approach (since pytest-2.4) of using boolean conditions with skipif markers, providing an explicit reason string.",
	  "codeLanguage": "python",
	  "codeTokens": 65,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/historical-notes.rst#2025-04-08_snippet_5",
	  "pageTitle": "Historical Notes in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.mark.skipif(not pytest.config.getvalue(\"db\"), reason=\"--db was not specified\")\ndef test_function():\n    pass"
		}
	  ],
	  "relevance": 0.685
	},
	{
	  "codeTitle": "Applying marks to parametrize parameters in pytest (old syntax)",
	  "codeDescription": "This example shows the old syntax (prior to pytest 3.1) for applying marks to parameters in parametrize. This syntax is deprecated and planned to be removed in pytest-4.0.",
	  "codeLanguage": "python",
	  "codeTokens": 110,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/historical-notes.rst#2025-04-08_snippet_2",
	  "pageTitle": "Historical Notes in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "import pytest\n\n\n@pytest.mark.parametrize(\n    \"test_input,expected\", [(\"3+5\", 8), (\"2+4\", 6), pytest.mark.xfail((\"6*9\", 42))]\n)\ndef test_eval(test_input, expected):\n    assert eval(test_input) == expected"
		}
	  ],
	  "relevance": 0.685
	},
	{
	  "codeTitle": "Upgrading pytest using pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 33,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.1.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 3.1.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.685
	},
	{
	  "codeTitle": "Configuring Warning Filters for Deprecation Warnings",
	  "codeDescription": "Example of configuring warning filters in pytest.ini to ignore specific deprecation warnings that match a regular expression pattern.",
	  "codeLanguage": "ini",
	  "codeTokens": 57,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_9",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nfilterwarnings =\n    ignore:.*U.*mode is deprecated:DeprecationWarning"
		}
	  ],
	  "relevance": 0.685
	},
	{
	  "codeTitle": "Testing Output with Pytester",
	  "codeDescription": "Example demonstrating how to test pytest output using glob-like expressions with the pytester fixture. The test verifies that the correct failure messages appear in the output.",
	  "codeLanguage": "python",
	  "codeTokens": 98,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#2025-04-08_snippet_5",
	  "pageTitle": "Contributing Guide for Pytest Development",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_true_assertion(pytester):\n    pytester.makepyfile(\n        \"\"\"\n        def test_foo():\n            assert False\n    \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*assert False*\", \"*1 failed*\"])"
		}
	  ],
	  "relevance": 0.68
	},
	{
	  "codeTitle": "Capturing Binary Output in Pytest (Python)",
	  "codeDescription": "This example demonstrates how to use the capsysbinary fixture to capture binary output from sys.stdout in a test function.",
	  "codeLanguage": "python",
	  "codeTokens": 71,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#2025-04-08_snippet_1",
	  "pageTitle": "Pytest API and Builtin Fixtures Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "def test_output(capsysbinary):\n    print(\"hello\")\n    captured = capsysbinary.readouterr()\n    assert captured.out == b\"hello\\n\""
		}
	  ],
	  "relevance": 0.68
	},
	{
	  "codeTitle": "Combining Parametrization and Scoping in Fixtures",
	  "codeDescription": "Advanced example showing how to combine parametrization and scoping in a fixture function to create different database instances based on parameters while maintaining session scope.",
	  "codeLanguage": "python",
	  "codeTokens": 106,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/funcarg_compare.rst#2025-04-08_snippet_3",
	  "pageTitle": "pytest-2.3 Fixture Evolution Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.fixture(scope=\"session\", params=[\"mysql\", \"pg\"])\ndef db(request):\n    if request.param == \"mysql\":\n        db = MySQL()\n    elif request.param == \"pg\":\n        db = PG()\n    request.addfinalizer(db.destroy)  # destroy when session is finished\n    return db"
		}
	  ],
	  "relevance": 0.68
	},
	{
	  "codeTitle": "Running pytest with Conditional Header Information",
	  "codeDescription": "Demonstrates the output of running pytest with verbose flag to show conditional header information added through the pytest_report_header hook.",
	  "codeLanguage": "pytest",
	  "codeTokens": 123,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_14",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest -v\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y -- $PYTHON_PREFIX/bin/python\ncachedir: .pytest_cache\ninfo1: did you know that ...\ndid you?\nrootdir: /home/sweet/project\ncollecting ... collected 0 items\n\n========================== no tests ran in 0.12s ==========================="
		}
	  ],
	  "relevance": 0.68
	},
	{
	  "codeTitle": "Upgrading to pytest 3.2.1 using pip",
	  "codeDescription": "Command to upgrade pytest to version 3.2.1 using pip package manager. This is a simple one-line command that will install the latest version over any existing installation.",
	  "codeLanguage": "bash",
	  "codeTokens": 56,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.2.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 3.2.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.68
	},
	{
	  "codeTitle": "Parametrizing Fixtures Directly with @pytest.fixture",
	  "codeDescription": "Example showing how to parametrize a fixture function directly using the params argument of the @pytest.fixture decorator, which allows the fixture to be invoked multiple times with different values.",
	  "codeLanguage": "python",
	  "codeTokens": 68,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/funcarg_compare.rst#2025-04-08_snippet_2",
	  "pageTitle": "pytest-2.3 Fixture Evolution Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.fixture(params=[\"mysql\", \"pg\"])\ndef db(request): ...  # use request.param"
		}
	  ],
	  "relevance": 0.68
	},
	{
	  "codeTitle": "Cherry-picking Release Changes to Main Branch in Git",
	  "codeDescription": "Git commands to cherry-pick the CHANGELOG and announce files from the release branch to the main branch.",
	  "codeLanguage": "bash",
	  "codeTokens": 62,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#2025-04-08_snippet_7",
	  "pageTitle": "Release Procedure for pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "git fetch upstream\ngit checkout upstream/main -b cherry-pick-release\ngit cherry-pick -x -m1 upstream/MAJOR.MINOR.x"
		}
	  ],
	  "relevance": 0.675
	},
	{
	  "codeTitle": "Using pytest.mark.xfail with RaisesGroup and RaisesExc in Python",
	  "codeDescription": "The pytest.mark.xfail function now accepts pytest.RaisesGroup for the 'raises' parameter to handle exception groups. It also supports pytest.RaisesExc for utilizing additional parameters like 'check' when expecting exceptions.",
	  "codeLanguage": "Python",
	  "codeTokens": 71,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/changelog/12504.feature.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest Exception Handling with xfail and RaisesGroup",
	  "codeList": [
		{
		  "language": "Python",
		  "code": "pytest.mark.xfail(raises=pytest.RaisesGroup(...))"
		},
		{
		  "language": "Python",
		  "code": "pytest.mark.xfail(raises=pytest.RaisesExc(..., check=...))"
		}
	  ],
	  "relevance": 0.675
	},
	{
	  "codeTitle": "Dictionary-Based Connection String Implementation",
	  "codeDescription": "Demonstrates a simple connection string generator that uses dictionary configuration.",
	  "codeLanguage": "python",
	  "codeTokens": 101,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#2025-04-08_snippet_8",
	  "pageTitle": "Monkeypatching and Mocking in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of app.py to generate a simple connection string\nDEFAULT_CONFIG = {\"user\": \"user1\", \"database\": \"db1\"}\n\n\ndef create_connection_string(config=None):\n    \"\"\"Creates a connection string from input or defaults.\"\"\"\n    config = config or DEFAULT_CONFIG\n    return f\"User Id={config['user']}; Location={config['database']};\""
		}
	  ],
	  "relevance": 0.675
	},
	{
	  "codeTitle": "Configuring pytest Import Mode",
	  "codeDescription": "TOML configuration to set pytest import mode to importlib for better test isolation",
	  "codeLanguage": "toml",
	  "codeTokens": 47,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/goodpractices.rst#2025-04-08_snippet_2",
	  "pageTitle": "Python Testing Best Practices with pytest",
	  "codeList": [
		{
		  "language": "toml",
		  "code": "[tool.pytest.ini_options]\naddopts = [\n    \"--import-mode=importlib\",\n]"
		}
	  ],
	  "relevance": 0.675
	},
	{
	  "codeTitle": "Upgrading to pytest 3.4.1 using pip",
	  "codeDescription": "Command to upgrade an existing pytest installation to version 3.4.1 using pip package manager. This is the recommended installation method for the bug-fix release.",
	  "codeLanguage": "bash",
	  "codeTokens": 53,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.4.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Announcement of pytest-3.4.1 Release",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.675
	},
	{
	  "codeTitle": "Implementing a Scoped Fixture with @pytest.fixture Decorator",
	  "codeDescription": "Improved approach using the @pytest.fixture decorator to directly state the scope of a resource, eliminating the need for cached_setup() and simplifying resource management.",
	  "codeLanguage": "python",
	  "codeTokens": 90,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/funcarg_compare.rst#2025-04-08_snippet_1",
	  "pageTitle": "pytest-2.3 Fixture Evolution Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.fixture(scope=\"session\")\ndef db(request):\n    # factory will only be invoked once per session -\n    db = DataBase()\n    request.addfinalizer(db.destroy)  # destroy when session is finished\n    return db"
		}
	  ],
	  "relevance": 0.675
	},
	{
	  "codeTitle": "Documenting TerminalReporter Class Addition in RST",
	  "codeDescription": "ReStructuredText documentation update that adds the TerminalReporter class reference to pytest's public API documentation. The class is linked as it's part of the pytest_terminal_summary hook signature.",
	  "codeLanguage": "rst",
	  "codeTokens": 57,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/changelog/6649.misc.rst#2025-04-08_snippet_0",
	  "pageTitle": "Adding TerminalReporter Class to Public pytest API",
	  "codeList": [
		{
		  "language": "rst",
		  "code": ":class:`~pytest.TerminalReporter`"
		},
		{
		  "language": "rst",
		  "code": ":hook:`pytest_terminal_summary`"
		}
	  ],
	  "relevance": 0.67
	},
	{
	  "codeTitle": "Configuring Doctest Glob Pattern in pytest",
	  "codeDescription": "Shows how to change the default pattern for doctest file matching using the --doctest-glob option.",
	  "codeLanguage": "bash",
	  "codeTokens": 43,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#2025-04-08_snippet_0",
	  "pageTitle": "Running Doctests with pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest --doctest-glob=\"*.rst\""
		}
	  ],
	  "relevance": 0.67
	},
	{
	  "codeTitle": "Using Multiple Warning Filters with Decorator Stacking",
	  "codeDescription": "Shows how to apply multiple warning filters to a test by stacking filterwarnings decorators, with a note about decorator evaluation order affecting filter precedence.",
	  "codeLanguage": "python",
	  "codeTokens": 90,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#2025-04-08_snippet_6",
	  "pageTitle": "Capturing and Controlling Warnings in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# Ignore \"api v1\" warnings, but fail on all other warnings\n@pytest.mark.filterwarnings(\"ignore:api v1\")\n@pytest.mark.filterwarnings(\"error\")\ndef test_one():\n    assert api_v1() == 1"
		}
	  ],
	  "relevance": 0.67
	},
	{
	  "codeTitle": "Configuring Project Build System in TOML",
	  "codeDescription": "Basic pyproject.toml configuration for package building using hatchling as the build backend.",
	  "codeLanguage": "toml",
	  "codeTokens": 65,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/goodpractices.rst#2025-04-08_snippet_0",
	  "pageTitle": "Python Testing Best Practices with pytest",
	  "codeList": [
		{
		  "language": "toml",
		  "code": "[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"PACKAGENAME\"\nversion = \"PACKAGEVERSION\""
		}
	  ],
	  "relevance": 0.67
	},
	{
	  "codeTitle": "Installing Pytest 3.5.0 via pip",
	  "codeDescription": "Command to upgrade Pytest to version 3.5.0 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 39,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.5.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 3.5.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.67
	},
	{
	  "codeTitle": "Implementing a Per-Session Database with pytest_funcarg__",
	  "codeDescription": "Example showing how to implement a per-session Database object using the original pytest_funcarg__ approach with request.cached_setup() for resource management.",
	  "codeLanguage": "python",
	  "codeTokens": 112,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/funcarg_compare.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-2.3 Fixture Evolution Documentation",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\nclass Database:\n    def __init__(self):\n        print(\"database instance created\")\n\n    def destroy(self):\n        print(\"database instance destroyed\")\n\n\ndef pytest_funcarg__db(request):\n    return request.cached_setup(\n        setup=DataBase, teardown=lambda db: db.destroy, scope=\"session\"\n    )"
		}
	  ],
	  "relevance": 0.67
	},
	{
	  "codeTitle": "Running Tests with Specific Markers using pytest CLI",
	  "codeDescription": "This example shows how to run tests marked with 'webtest' using the pytest command-line interface. It demonstrates the use of the -m flag to select tests based on markers.",
	  "codeLanguage": "pytest",
	  "codeTokens": 57,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_1",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "pytest",
		  "code": "$ pytest -v -m webtest"
		}
	  ],
	  "relevance": 0.665
	},
	{
	  "codeTitle": "Updating pytest.raises Usage in Python",
	  "codeDescription": "Shows how to replace the deprecated 'message' parameter in pytest.raises with a manual pytest.fail call. This change prevents confusion with exception message matching.",
	  "codeLanguage": "python",
	  "codeTokens": 71,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#2025-04-08_snippet_11",
	  "pageTitle": "Deprecations and Removals in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "with pytest.raises(TimeoutError):\n    wait_for(websocket.recv(), 0.5)\n    pytest.fail(\"Client got unexpected message\")"
		}
	  ],
	  "relevance": 0.665
	},
	{
	  "codeTitle": "Alternative Approach: fixture_request Helper in pytest",
	  "codeDescription": "This snippet shows an alternative approach using a proposed 'fixture_request' helper function to yield all parameters marked as a fixture in pytest.",
	  "codeLanguage": "python",
	  "codeTokens": 143,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/proposals/parametrize_with_fixtures.rst#2025-04-08_snippet_2",
	  "pageTitle": "Proposal: Parametrize with Fixtures in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.fixture(\n    params=[\n        pytest.fixture_request(\"default_context\"),\n        pytest.fixture_request(\"extra_context\"),\n    ]\n)\ndef context(request):\n    \"\"\"Returns all values for ``default_context``, one-by-one before it\n    does the same for ``extra_context``.\n\n    request.param:\n        - {}\n        - {'author': 'alice'}\n        - {'project_slug': 'helloworld'}\n        - {'author': 'bob', 'project_slug': 'foobar'}\n    \"\"\"\n    return request.param"
		}
	  ],
	  "relevance": 0.665
	},
	{
	  "codeTitle": "Configuring Log CLI Format in pytest",
	  "codeDescription": "Sets a logging-compatible string used to format live logging messages. This configuration option defines how log messages will be displayed during test execution.",
	  "codeLanguage": "ini",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_26",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nlog_cli_format = %(asctime)s %(levelname)s %(message)s"
		}
	  ],
	  "relevance": 0.665
	},
	{
	  "codeTitle": "Upgrading to Pytest 3.5.1 Using Pip",
	  "codeDescription": "A simple command to upgrade pytest to the latest version (3.5.1) using pip package manager. This is a drop-in replacement for previous versions.",
	  "codeLanguage": "bash",
	  "codeTokens": 53,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.5.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 3.5.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.665
	},
	{
	  "codeTitle": "Running pytest on Package Structure",
	  "codeDescription": "Command to run pytest on the package directory structure, where pytest will find test modules inside packages with __init__.py files.",
	  "codeLanguage": "bash",
	  "codeTokens": 42,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/pythonpath.rst#2025-04-08_snippet_1",
	  "pageTitle": "Understanding pytest Import Mechanisms and Path Configuration",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest root/"
		}
	  ],
	  "relevance": 0.665
	},
	{
	  "codeTitle": "Using Custom Environment Markers in Test Files",
	  "codeDescription": "Example test file showing how to use a custom 'env' marker to specify that a test requires a particular environment (stage1).",
	  "codeLanguage": "python",
	  "codeTokens": 65,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#2025-04-08_snippet_13",
	  "pageTitle": "Working with Custom Markers in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of test_someenv.py\n\nimport pytest\n\n\n@pytest.mark.env(\"stage1\")\ndef test_basic_db_operation():\n    pass"
		}
	  ],
	  "relevance": 0.66
	},
	{
	  "codeTitle": "Migrating cached_setup to Standard Fixture in Python",
	  "codeDescription": "Demonstrates how to update the deprecated cached_setup mechanism to use standard pytest fixtures with setup and teardown logic.",
	  "codeLanguage": "python",
	  "codeTokens": 60,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#2025-04-08_snippet_16",
	  "pageTitle": "Deprecations and Removals in pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "@pytest.fixture(scope=\"module\")\ndef db_session():\n    session = Session.create()\n    yield session\n    session.close()"
		}
	  ],
	  "relevance": 0.66
	},
	{
	  "codeTitle": "Demonstrating Fixed pytest.approx Behavior with Boolean Types in Python",
	  "codeDescription": "This code snippet shows the corrected behavior of pytest.approx when comparing bool and numpy.bool_ types after the bug fix.",
	  "codeLanguage": "python",
	  "codeTokens": 58,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/changelog/13047.bugfix.rst#2025-04-08_snippet_1",
	  "pageTitle": "Restoring pytest.approx Equality Handling for Boolean Types",
	  "codeList": [
		{
		  "language": "python",
		  "code": ">>> [np.True_, np.True_] == pytest.approx([True, True])\nTrue"
		}
	  ],
	  "relevance": 0.66
	},
	{
	  "codeTitle": "Configuring Log File Date Format in pytest",
	  "codeDescription": "Sets a time.strftime-compatible string for formatting dates in the logging file. This determines how timestamps will appear in the log file.",
	  "codeLanguage": "ini",
	  "codeTokens": 55,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_30",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nlog_file_date_format = %Y-%m-%d %H:%M:%S"
		}
	  ],
	  "relevance": 0.66
	},
	{
	  "codeTitle": "Upgrading pytest to version 3.6.3 using pip",
	  "codeDescription": "This command upgrades the pytest package to version 3.6.3 using pip, the Python package installer. It's a simple one-line command that can be run in a terminal or command prompt.",
	  "codeLanguage": "bash",
	  "codeTokens": 61,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.6.3.rst#2025-04-08_snippet_0",
	  "pageTitle": "Announcing pytest 3.6.3 Release",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.66
	},
	{
	  "codeTitle": "Demonstrating Pytest Test Collection with Imported Classes",
	  "codeDescription": "Shows how pytest traditionally collects imported classes that match test patterns. Example demonstrates a Testament class imported from domain.py into a test file, which pytest would normally collect due to its 'Test' prefix.",
	  "codeLanguage": "python",
	  "codeTokens": 64,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/changelog/12749.feature.rst#2025-04-08_snippet_0",
	  "pageTitle": "Configuring Test Collection Behavior in Pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# contents of src/domain.py\nclass Testament: ..."
		},
		{
		  "language": "python",
		  "code": "# contents of tests/test_testament.py\nfrom domain import Testament\n\n\ndef test_testament(): ..."
		}
	  ],
	  "relevance": 0.66
	},
	{
	  "codeTitle": "Adding Custom Header Information to pytest Report",
	  "codeDescription": "Shows how to add custom information to the pytest report header using the pytest_report_header hook in a conftest.py file.",
	  "codeLanguage": "python",
	  "codeTokens": 64,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/example/simple.rst#2025-04-08_snippet_11",
	  "pageTitle": "Configuring and Extending pytest",
	  "codeList": [
		{
		  "language": "python",
		  "code": "# content of conftest.py\n\n\ndef pytest_report_header(config):\n    return \"project deps: mylib-1.1\""
		}
	  ],
	  "relevance": 0.655
	},
	{
	  "codeTitle": "Showing Extra Info on Test Results in pytest",
	  "codeDescription": "Command to run pytest with options to show extra information on xfailed, xpassed, and skipped tests.",
	  "codeLanguage": "bash",
	  "codeTokens": 54,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#2025-04-08_snippet_0",
	  "pageTitle": "Using Skip and XFail in pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest -rxXs  # show extra info on xfailed, xpassed, and skipped tests"
		}
	  ],
	  "relevance": 0.655
	},
	{
	  "codeTitle": "Referencing Async Fixture Configuration",
	  "codeDescription": "Code reference showing configuration pattern that will trigger a DeprecationWarning when async fixtures are used without proper setup hooks. This applies particularly to synchronous tests requesting async fixtures or fixtures with autouse=True.",
	  "codeLanguage": "python",
	  "codeTokens": 56,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/changelog/10839.deprecation.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest Async Fixture Deprecation Notice",
	  "codeList": [
		{
		  "language": "python",
		  "code": "autouse=True"
		}
	  ],
	  "relevance": 0.655
	},
	{
	  "codeTitle": "Configuring Log Level in pytest",
	  "codeDescription": "Sets the minimum log message level that should be captured for logging. This can be specified using integer values or level names, controlling which messages are captured during test execution.",
	  "codeLanguage": "ini",
	  "codeTokens": 50,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_34",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\nlog_level = INFO"
		}
	  ],
	  "relevance": 0.655
	},
	{
	  "codeTitle": "Upgrading pytest to Version 3.7.2 using pip",
	  "codeDescription": "This command upgrades the pytest package to version 3.7.2 using pip, the Python package installer. It ensures the latest bug-fix release is installed.",
	  "codeLanguage": "bash",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.7.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 3.7.2 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.655
	},
	{
	  "codeTitle": "Creating Maintenance Branch for Minor Release in Git",
	  "codeDescription": "Git commands to create a new maintenance branch from the main branch for a minor release of pytest.",
	  "codeLanguage": "bash",
	  "codeTokens": 51,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Procedure for pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "git fetch upstream\ngit branch 7.1.x upstream/main\ngit push upstream 7.1.x"
		}
	  ],
	  "relevance": 0.655
	},
	{
	  "codeTitle": "Defining restructuredtext toctree for pytest release documentation",
	  "codeDescription": "A restructuredtext toctree directive that organizes pytest release announcement documents in a hierarchical structure. The directive is configured with maxdepth:2 and lists all release documents from version 8.3.5 down to 2.0.0 in reverse chronological order.",
	  "codeLanguage": "restructuredtext",
	  "codeTokens": 1683,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/index.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest Release Announcements",
	  "codeList": [
		{
		  "language": "restructuredtext",
		  "code": ".. toctree::\n   :maxdepth: 2\n\n\n   release-8.3.5\n   release-8.3.4\n   release-8.3.3\n   release-8.3.2\n   release-8.3.1\n   release-8.3.0\n   release-8.2.2\n   release-8.2.1\n   release-8.2.0\n   release-8.1.2\n   release-8.1.1\n   release-8.1.0\n   release-8.0.2\n   release-8.0.1\n   release-8.0.0\n   release-8.0.0rc2\n   release-8.0.0rc1\n   release-7.4.4\n   release-7.4.3\n   release-7.4.2\n   release-7.4.1\n   release-7.4.0\n   release-7.3.2\n   release-7.3.1\n   release-7.3.0\n   release-7.2.2\n   release-7.2.1\n   release-7.2.0\n   release-7.1.3\n   release-7.1.2\n   release-7.1.1\n   release-7.1.0\n   release-7.0.1\n   release-7.0.0\n   release-7.0.0rc1\n   release-6.2.5\n   release-6.2.4\n   release-6.2.3\n   release-6.2.2\n   release-6.2.1\n   release-6.2.0\n   release-6.1.2\n   release-6.1.1\n   release-6.1.0\n   release-6.0.2\n   release-6.0.1\n   release-6.0.0\n   release-6.0.0rc1\n   release-5.4.3\n   release-5.4.2\n   release-5.4.1\n   release-5.4.0\n   release-5.3.5\n   release-5.3.4\n   release-5.3.3\n   release-5.3.2\n   release-5.3.1\n   release-5.3.0\n   release-5.2.4\n   release-5.2.3\n   release-5.2.2\n   release-5.2.1\n   release-5.2.0\n   release-5.1.3\n   release-5.1.2\n   release-5.1.1\n   release-5.1.0\n   release-5.0.1\n   release-5.0.0\n   release-4.6.9\n   release-4.6.8\n   release-4.6.7\n   release-4.6.6\n   release-4.6.5\n   release-4.6.4\n   release-4.6.3\n   release-4.6.2\n   release-4.6.1\n   release-4.6.0\n   release-4.5.0\n   release-4.4.2\n   release-4.4.1\n   release-4.4.0\n   release-4.3.1\n   release-4.3.0\n   release-4.2.1\n   release-4.2.0\n   release-4.1.1\n   release-4.1.0\n   release-4.0.2\n   release-4.0.1\n   release-4.0.0\n   release-3.10.1\n   release-3.10.0\n   release-3.9.3\n   release-3.9.2\n   release-3.9.1\n   release-3.9.0\n   release-3.8.2\n   release-3.8.1\n   release-3.8.0\n   release-3.7.4\n   release-3.7.3\n   release-3.7.2\n   release-3.7.1\n   release-3.7.0\n   release-3.6.4\n   release-3.6.3\n   release-3.6.2\n   release-3.6.1\n   release-3.6.0\n   release-3.5.1\n   release-3.5.0\n   release-3.4.2\n   release-3.4.1\n   release-3.4.0\n   release-3.3.2\n   release-3.3.1\n   release-3.3.0\n   release-3.2.5\n   release-3.2.4\n   release-3.2.3\n   release-3.2.2\n   release-3.2.1\n   release-3.2.0\n   release-3.1.3\n   release-3.1.2\n   release-3.1.1\n   release-3.1.0\n   release-3.0.7\n   release-3.0.6\n   release-3.0.5\n   release-3.0.4\n   release-3.0.3\n   release-3.0.2\n   release-3.0.1\n   release-3.0.0\n   sprint2016\n   release-2.9.2\n   release-2.9.1\n   release-2.9.0\n   release-2.8.7\n   release-2.8.6\n   release-2.8.5\n   release-2.8.4\n   release-2.8.3\n   release-2.8.2\n   release-2.7.2\n   release-2.7.1\n   release-2.7.0\n   release-2.6.3\n   release-2.6.2\n   release-2.6.1\n   release-2.6.0\n   release-2.5.2\n   release-2.5.1\n   release-2.5.0\n   release-2.4.2\n   release-2.4.1\n   release-2.4.0\n   release-2.3.5\n   release-2.3.4\n   release-2.3.3\n   release-2.3.2\n   release-2.3.1\n   release-2.3.0\n   release-2.2.4\n   release-2.2.2\n   release-2.2.1\n   release-2.2.0\n   release-2.1.3\n   release-2.1.2\n   release-2.1.1\n   release-2.1.0\n   release-2.0.3\n   release-2.0.2\n   release-2.0.1\n   release-2.0.0"
		}
	  ],
	  "relevance": 0.65
	},
	{
	  "codeTitle": "Installing pytest via pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 32,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.9.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 2.9.2 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.65
	},
	{
	  "codeTitle": "Git Clone and Branch Creation for Pytest",
	  "codeDescription": "Commands for cloning the Pytest repository, fetching tags, and creating a new branch for development work.",
	  "codeLanguage": "bash",
	  "codeTokens": 81,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#2025-04-08_snippet_2",
	  "pageTitle": "Contributing Guide for Pytest Development",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "$ git clone git@github.com:YOUR_GITHUB_USERNAME/pytest.git\n$ cd pytest\n$ git fetch --tags https://github.com/pytest-dev/pytest\n$ git checkout -b your-bugfix-branch-name main"
		}
	  ],
	  "relevance": 0.65
	},
	{
	  "codeTitle": "Setting Minimum pytest Version",
	  "codeDescription": "Specifies a minimal pytest version required for running tests. This ensures that the tests are run with a compatible version of pytest.",
	  "codeLanguage": "ini",
	  "codeTokens": 63,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_36",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "# content of pytest.ini\n[pytest]\nminversion = 3.0  # will fail if we run with pytest-2.8"
		}
	  ],
	  "relevance": 0.65
	},
	{
	  "codeTitle": "Installing or Upgrading to Pytest 3.3.1 with pip",
	  "codeDescription": "Command to upgrade an existing pytest installation to version 3.3.1 using pip package manager. This is a simple pip command that updates pytest to the latest version available on PyPI.",
	  "codeLanguage": "bash",
	  "codeTokens": 59,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.3.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 3.3.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.65
	},
	{
	  "codeTitle": "Upgrading to pytest-4.0.1 using pip",
	  "codeDescription": "Command to upgrade to pytest-4.0.1 using pip package manager. This is a simple command that will replace any existing pytest installation with the latest 4.0.1 version.",
	  "codeLanguage": "bash",
	  "codeTokens": 59,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.0.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-4.0.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.65
	},
	{
	  "codeTitle": "Triggering Release Candidate Workflow with GitHub CLI",
	  "codeDescription": "Command to trigger the release preparation workflow using GitHub's CLI for a release candidate of pytest.",
	  "codeLanguage": "bash",
	  "codeTokens": 54,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#2025-04-08_snippet_4",
	  "pageTitle": "Release Procedure for pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "gh workflow run prepare-release-pr.yml -f branch=8.0.x -f major=yes -f prerelease=rc1"
		}
	  ],
	  "relevance": 0.65
	},
	{
	  "codeTitle": "Running Unittest Package Tests with Pytest",
	  "codeDescription": "Command to run tests from an installed unittest package using pytest's pyargs option.",
	  "codeLanguage": "bash",
	  "codeTokens": 39,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.0.0.rst#2025-04-08_snippet_4",
	  "pageTitle": "Release Notes for Pytest 2.0.0",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "py.test --pyargs unittest"
		}
	  ],
	  "relevance": 0.645
	},
	{
	  "codeTitle": "Upgrading pytest Using pip",
	  "codeDescription": "Command to upgrade the pytest package to the latest version using pip, the Python package installer.",
	  "codeLanguage": "bash",
	  "codeTokens": 38,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.0.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-8.0.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.645
	},
	{
	  "codeTitle": "Generating Release Documents with tox",
	  "codeDescription": "Command to use tox for generating release documents, changelog, and announcements for a pytest release.",
	  "codeLanguage": "bash",
	  "codeTokens": 40,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#2025-04-08_snippet_5",
	  "pageTitle": "Release Procedure for pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "tox -e release -- MAJOR.MINOR.PATCH"
		}
	  ],
	  "relevance": 0.645
	},
	{
	  "codeTitle": "Setting Test Paths in pytest",
	  "codeDescription": "Specifies directories to be searched for tests when no specific paths are given on the command line. This helps in focusing test discovery on relevant directories.",
	  "codeLanguage": "ini",
	  "codeTokens": 46,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_43",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\ntestpaths = testing doc"
		}
	  ],
	  "relevance": 0.645
	},
	{
	  "codeTitle": "Upgrading pytest using pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager. This should be run in a terminal or command prompt with pip installed.",
	  "codeLanguage": "bash",
	  "codeTokens": 47,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 4.6.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.645
	},
	{
	  "codeTitle": "Installing pytest 4.1.1 via pip",
	  "codeDescription": "Command to upgrade pytest to version 4.1.1 using pip package manager. This is a drop-in replacement for previous versions.",
	  "codeLanguage": "shell",
	  "codeTokens": 48,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.1.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Announcement - pytest 4.1.1",
	  "codeList": [
		{
		  "language": "shell",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.645
	},
	{
	  "codeTitle": "RST Documentation - Python Version Support Table",
	  "codeDescription": "A reStructuredText table showing minimum Python version requirements for different pytest versions",
	  "codeLanguage": "rst",
	  "codeTokens": 124,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/backwards-compatibility.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest Backwards Compatibility Policy",
	  "codeList": [
		{
		  "language": "rst",
		  "code": "==============  ===================\npytest version  min. Python version\n==============  ===================\n8.4+            3.9+\n8.0+            3.8+\n7.1+            3.7+\n6.2 - 7.0       3.6+\n5.0 - 6.1       3.5+\n3.3 - 4.6       2.7, 3.4+\n==============  ==================="
		}
	  ],
	  "relevance": 0.645
	},
	{
	  "codeTitle": "Installing pytest using pip or easy_install in Python",
	  "codeDescription": "Commands to install or upgrade pytest using pip or easy_install package managers. These commands will install the latest version of pytest.",
	  "codeLanguage": "bash",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.0.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 2.0.2 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest # or\neasy_install -U pytest"
		}
	  ],
	  "relevance": 0.64
	},
	{
	  "codeTitle": "Upgrading to pytest 8.0.1 using pip",
	  "codeDescription": "Command to upgrade an existing pytest installation to version 8.0.1 using pip package manager. This is a simple pip install command with the upgrade flag.",
	  "codeLanguage": "bash",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.0.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 8.0.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.64
	},
	{
	  "codeTitle": "MIT License Text for pytest",
	  "codeDescription": "The complete MIT license text that specifies the terms under which pytest is distributed. It grants users rights to use, modify, and distribute the software while including copyright notice and disclaiming warranty.",
	  "codeLanguage": "text",
	  "codeTokens": 273,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/license.rst#2025-04-08_snippet_0",
	  "pageTitle": "MIT License for pytest",
	  "codeList": [
		{
		  "language": "text",
		  "code": "The MIT License (MIT)\n\nCopyright (c) 2004 Holger Krekel and others\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
		}
	  ],
	  "relevance": 0.64
	},
	{
	  "codeTitle": "Configuring Assertion Message Truncation in pytest",
	  "codeDescription": "Controls the maximum number of characters for truncating assertion message contents. Setting this to 0 disables truncation. This affects how much of assertion failure messages are displayed.",
	  "codeLanguage": "ini",
	  "codeTokens": 54,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_46",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\ntruncation_limit_chars = 640"
		}
	  ],
	  "relevance": 0.64
	},
	{
	  "codeTitle": "Installing pytest via pip or easy_install",
	  "codeDescription": "Commands to install or upgrade pytest using either pip or easy_install package managers.",
	  "codeLanguage": "bash",
	  "codeTokens": 43,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.0.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 2.0.1 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest # or\neasy_install -U pytest"
		}
	  ],
	  "relevance": 0.64
	},
	{
	  "codeTitle": "Installing Pytest 4.2.1 Using Pip",
	  "codeDescription": "Command to upgrade pytest to version 4.2.1 using pip package manager. This is a drop-in replacement upgrade command that installs the latest version.",
	  "codeLanguage": "bash",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.2.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 4.2.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.64
	},
	{
	  "codeTitle": "Installing Package in Editable Mode",
	  "codeDescription": "Command to install a Python package in development mode for testing",
	  "codeLanguage": "bash",
	  "codeTokens": 28,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/goodpractices.rst#2025-04-08_snippet_1",
	  "pageTitle": "Python Testing Best Practices with pytest",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -e ."
		}
	  ],
	  "relevance": 0.64
	},
	{
	  "codeTitle": "Installing Pytest via Package Managers",
	  "codeDescription": "Commands for installing or upgrading pytest using pip or easy_install package managers. Shows two alternative installation methods.",
	  "codeLanguage": "bash",
	  "codeTokens": 49,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.0.3.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 2.0.3 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest # or\neasy_install -U pytest"
		}
	  ],
	  "relevance": 0.635
	},
	{
	  "codeTitle": "Upgrading pytest via pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 33,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.1.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 8.1.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.635
	},
	{
	  "codeTitle": "Invoking Pytest from Python Interpreter",
	  "codeDescription": "Command to run pytest as a Python module, available on Python 2.5 and later.",
	  "codeLanguage": "python",
	  "codeTokens": 40,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.0.0.rst#2025-04-08_snippet_1",
	  "pageTitle": "Release Notes for Pytest 2.0.0",
	  "codeList": [
		{
		  "language": "python",
		  "code": "python -m pytest"
		}
	  ],
	  "relevance": 0.635
	},
	{
	  "codeTitle": "Configuring Truncation Limit in Pytest",
	  "codeDescription": "Sets the maximum number of lines for truncating assertion message contents. Default value is 8, and setting to 0 disables truncation.",
	  "codeLanguage": "ini",
	  "codeTokens": 49,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#2025-04-08_snippet_47",
	  "pageTitle": "Pytest API Reference",
	  "codeList": [
		{
		  "language": "ini",
		  "code": "[pytest]\ntruncation_limit_lines = 8"
		}
	  ],
	  "relevance": 0.635
	},
	{
	  "codeTitle": "Upgrading pytest using pip",
	  "codeDescription": "Command to upgrade pytest to the latest version (3.8.2) using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 41,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.8.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "Announcing pytest 3.8.2 Release",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.635
	},
	{
	  "codeTitle": "Upgrading pytest via pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 33,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.5.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 4.5.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.635
	},
	{
	  "codeTitle": "Creating a Toctree for Pytest Explanation Documentation in reStructuredText",
	  "codeDescription": "This snippet creates a toctree directive in reStructuredText to organize the explanation section of Pytest documentation. The toctree includes various topics such as anatomy, fixtures, good practices, Python path, types, CI, and flaky tests with a maximum depth of 1.",
	  "codeLanguage": "restructuredtext",
	  "codeTokens": 118,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/index.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest Documentation Explanation Section",
	  "codeList": [
		{
		  "language": "restructuredtext",
		  "code": ":orphan:\n\n.. _explanation:\n\nExplanation\n================\n\n.. toctree::\n   :maxdepth: 1\n\n   anatomy\n   fixtures\n   goodpractices\n   pythonpath\n   types\n   ci\n   flaky"
		}
	  ],
	  "relevance": 0.635
	},
	{
	  "codeTitle": "Installing pytest via pip/easy_install",
	  "codeDescription": "Commands to install or upgrade pytest using either pip or easy_install package managers.",
	  "codeLanguage": "shell",
	  "codeTokens": 43,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.1.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 2.1.0 Release Documentation",
	  "codeList": [
		{
		  "language": "shell",
		  "code": "pip install -U pytest # or\neasy_install -U pytest"
		}
	  ],
	  "relevance": 0.63
	},
	{
	  "codeTitle": "Upgrading pytest using pip",
	  "codeDescription": "Command for upgrading to the latest version of pytest using pip package manager. This command will install or update pytest to version 3.9.0.",
	  "codeLanguage": "bash",
	  "codeTokens": 50,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.9.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-3.9.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.63
	},
	{
	  "codeTitle": "Setting PDB Trace in Pytest",
	  "codeDescription": "Function to set a PDB trace during test execution for debugging, even when output capturing is active.",
	  "codeLanguage": "python",
	  "codeTokens": 42,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.0.0.rst#2025-04-08_snippet_5",
	  "pageTitle": "Release Notes for Pytest 2.0.0",
	  "codeList": [
		{
		  "language": "python",
		  "code": "py.test.set_trace()"
		}
	  ],
	  "relevance": 0.63
	},
	{
	  "codeTitle": "Running Tests by Marker with Pytest",
	  "codeDescription": "Command to run all tests decorated with a specific marker using the -m option.",
	  "codeLanguage": "bash",
	  "codeTokens": 35,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_7",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pytest -m slow"
		}
	  ],
	  "relevance": 0.63
	},
	{
	  "codeTitle": "Installing pytest 3.7.0 via pip",
	  "codeDescription": "Command to upgrade pytest to version 3.7.0 using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 36,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.7.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 3.7.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.63
	},
	{
	  "codeTitle": "Upgrading pytest to version 4.6.4 using pip",
	  "codeDescription": "Command to upgrade an existing pytest installation to version 4.6.4 using pip package manager. This is a simple pip command that will update pytest to the latest version.",
	  "codeLanguage": "bash",
	  "codeTokens": 55,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.4.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-4.6.4 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.63
	},
	{
	  "codeTitle": "Pytest Code of Conduct Contact Information - Markdown",
	  "codeDescription": "Contact information for the pytest Code of Conduct team members including their GitHub handles and email addresses.",
	  "codeLanguage": "markdown",
	  "codeTokens": 116,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/CODE_OF_CONDUCT.md#2025-04-08_snippet_0",
	  "pageTitle": "Code of Conduct Documentation for pytest Project",
	  "codeList": [
		{
		  "language": "markdown",
		  "code": "- Brianna Laugher ([@pfctdayelise](https://github.com/pfctdayelise)): brianna@laugher.id.au\n- Bruno Oliveira ([@nicoddemus](https://github.com/nicoddemus)): nicoddemus@gmail.com\n- Florian Bruhin ([@the-compiler](https://github.com/the-compiler)): pytest@the-compiler.org"
		}
	  ],
	  "relevance": 0.63
	},
	{
	  "codeTitle": "Installing pytest using pip/easy_install",
	  "codeDescription": "Commands for installing or upgrading pytest using Python package managers pip or easy_install.",
	  "codeLanguage": "bash",
	  "codeTokens": 43,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.2.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 2.2.0 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest # or\neasy_install -U pytest"
		}
	  ],
	  "relevance": 0.625
	},
	{
	  "codeTitle": "Upgrading Pytest to Version 8.3.4 using pip",
	  "codeDescription": "A simple pip command to upgrade an existing pytest installation to version 8.3.4. This is a drop-in replacement for previous versions.",
	  "codeLanguage": "bash",
	  "codeTokens": 50,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.3.4.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 8.3.4 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.625
	},
	{
	  "codeTitle": "Installing or Upgrading pytest using pip or easy_install",
	  "codeDescription": "Commands to install or upgrade pytest to version 2.2.1 using either pip or easy_install package managers.",
	  "codeLanguage": "bash",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.2.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Notes for pytest-2.2.1",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest # or\neasy_install -U pytest"
		}
	  ],
	  "relevance": 0.625
	},
	{
	  "codeTitle": "Example Content of a Pytest Arguments File",
	  "codeDescription": "Example content for a file that contains pytest arguments, with one entry per line including test paths, specific test nodes, and command line options.",
	  "codeLanguage": "text",
	  "codeTokens": 69,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#2025-04-08_snippet_11",
	  "pageTitle": "How to Invoke Pytest Command-line Usage Guide",
	  "codeList": [
		{
		  "language": "text",
		  "code": "tests/test_file.py\ntests/test_mod.py::test_func[x1,y2]\ntests/test_mod.py::TestClass\n-m slow"
		}
	  ],
	  "relevance": 0.625
	},
	{
	  "codeTitle": "Upgrading pytest via pip",
	  "codeDescription": "Command to upgrade pytest package to version 4.6.7 using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 38,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.7.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Announcement - pytest 4.6.7",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.625
	},
	{
	  "codeTitle": "Installing pytest 4.6.5 using pip",
	  "codeDescription": "Command to upgrade pytest to version 4.6.5 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 37,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.5.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 4.6.5 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.625
	},
	{
	  "codeTitle": "Iterating Through Sections and Categories in Pytest Changelog Template",
	  "codeDescription": "This Jinja2 template iterates through predefined sections and categories to generate a structured changelog for pytest. It formats section headers with underlines, creates category sections, and displays either a sorted list of issues with links to GitHub or simple text entries depending on the configuration.",
	  "codeLanguage": "jinja2",
	  "codeTokens": 301,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/changelog/_template.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest Changelog Template",
	  "codeList": [
		{
		  "language": "jinja2",
		  "code": "{% for section in sections %}\n{% set underline = \"-\" %}\n{% if section %}\n{{section}}\n{{ underline * section|length }}{% set underline = \"~\" %}\n\n{% endif %}\n{% if sections[section] %}\n{% for category, val in definitions.items() if category in sections[section] %}\n\n{{ definitions[category]['name'] }}\n{{ underline * definitions[category]['name']|length }}\n\n{% if definitions[category]['showcontent'] %}\n{% for text, values in sections[section][category]|dictsort(by='value') %}\n{% set issue_joiner = joiner(', ') %}\n- {% for value in values|sort %}{{ issue_joiner() }}`{{ value }} <https://github.com/pytest-dev/pytest/issues/{{ value[1:] }}>`_{% endfor %}: {{ text }}\n\n\n{% endfor %}\n{% else %}\n- {{ sections[section][category]['']|sort|join(', ') }}\n\n\n{% endif %}\n{% if sections[section][category]|length == 0 %}\n\nNo significant changes.\n\n\n{% else %}\n{% endif %}\n{% endfor %}\n{% else %}\n\nNo significant changes.\n\n\n{% endif %}\n{% endfor %}"
		}
	  ],
	  "relevance": 0.625
	},
	{
	  "codeTitle": "Installing or upgrading pytest using pip",
	  "codeDescription": "Command to install or upgrade pytest using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 31,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.4.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 2.4.0 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.62
	},
	{
	  "codeTitle": "Upgrading Pytest via pip",
	  "codeDescription": "Command to upgrade Pytest to the latest version using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 37,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.0.0rc1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 8.0.0rc1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.62
	},
	{
	  "codeTitle": "Upgrading pytest via pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 33,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.5.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 2.5.0 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.62
	},
	{
	  "codeTitle": "Linking Pull Requests to Issues in GitHub for Pytest",
	  "codeDescription": "Example syntax for linking a pull request to an issue in GitHub. This shows how to use the 'closes' keyword in PR descriptions or commit messages to automatically close associated issues when the PR is merged.",
	  "codeLanguage": "markdown",
	  "codeTokens": 58,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#2025-04-08_snippet_7",
	  "pageTitle": "Contributing Guide for Pytest Development",
	  "codeList": [
		{
		  "language": "markdown",
		  "code": "closes #XYZW"
		}
	  ],
	  "relevance": 0.62
	},
	{
	  "codeTitle": "Installing pytest 4.6.9 via pip",
	  "codeDescription": "Command to upgrade pytest to version 4.6.9 using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 36,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.9.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 4.6.9 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.62
	},
	{
	  "codeTitle": "Upgrading to pytest 8.2.1 using pip",
	  "codeDescription": "Command to upgrade the pytest package to version 8.2.1 using pip. This is a drop-in replacement for previous versions.",
	  "codeLanguage": "bash",
	  "codeTokens": 47,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.2.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-8.2.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.62
	},
	{
	  "codeTitle": "Upgrading Pytest using pip in Bash",
	  "codeDescription": "This command upgrades pytest to the latest version (3.1.1 in this context) using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 44,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.1.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 3.1.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.615
	},
	{
	  "codeTitle": "Upgrading Pytest via pip",
	  "codeDescription": "Command to upgrade Pytest to the latest version using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 35,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.2.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 7.2.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.615
	},
	{
	  "codeTitle": "Installing pytest via pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 32,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.6.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 2.6.0 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.615
	},
	{
	  "codeTitle": "Git Remote Setup for Pytest",
	  "codeDescription": "Commands for setting up the upstream remote and fetching tags from the main Pytest repository.",
	  "codeLanguage": "bash",
	  "codeTokens": 51,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#2025-04-08_snippet_3",
	  "pageTitle": "Contributing Guide for Pytest Development",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "$ git remote add upstream https://github.com/pytest-dev/pytest\n$ git fetch upstream --tags"
		}
	  ],
	  "relevance": 0.615
	},
	{
	  "codeTitle": "Installing pytest 5.0.0 via pip",
	  "codeDescription": "Command to upgrade pytest to the latest version (5.0.0) using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 41,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.0.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 5.0.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.615
	},
	{
	  "codeTitle": "Installing Pytest 8.0.2 via pip",
	  "codeDescription": "Command to upgrade pytest to version 8.0.2 using pip package manager. This is a drop-in replacement for previous versions.",
	  "codeLanguage": "bash",
	  "codeTokens": 48,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.0.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 8.0.2 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.615
	},
	{
	  "codeTitle": "Installing Pytest 8.0.2 via pip",
	  "codeDescription": "Command to upgrade pytest to version 8.0.2 using pip package manager. This is a drop-in replacement for previous versions.",
	  "codeLanguage": "bash",
	  "codeTokens": 48,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.0.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 8.0.2 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.615
	},
	{
	  "codeTitle": "Upgrading Pytest via pip",
	  "codeDescription": "Command to upgrade Pytest to the latest version using pip package manager. This installs or updates Pytest to version 3.10.0.",
	  "codeLanguage": "bash",
	  "codeTokens": 50,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.10.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 3.10.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.61
	},
	{
	  "codeTitle": "Upgrading pytest Package via pip",
	  "codeDescription": "Command to upgrade pytest to the latest version (6.2.3) using pip package manager. This is a drop-in replacement for previous versions.",
	  "codeLanguage": "bash",
	  "codeTokens": 51,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.2.3.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Announcement for pytest-6.2.3",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.61
	},
	{
	  "codeTitle": "Upgrading Pytest via pip in Python",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 34,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.7.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 2.7.0 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.61
	},
	{
	  "codeTitle": "Upgrading pytest to version 3.9.2 using pip",
	  "codeDescription": "This command upgrades the pytest package to version 3.9.2 using pip, the Python package installer. It ensures that the latest bug-fix release is installed.",
	  "codeLanguage": "bash",
	  "codeTokens": 54,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.9.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "Announcing pytest 3.9.2 Release",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.61
	},
	{
	  "codeTitle": "Upgrading to pytest 5.2.3 using pip",
	  "codeDescription": "A simple command to upgrade an existing pytest installation to version 5.2.3 using pip. This is the recommended method for installing this bug-fix release.",
	  "codeLanguage": "bash",
	  "codeTokens": 52,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.2.3.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-5.2.3 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.61
	},
	{
	  "codeTitle": "Upgrading Pytest via pip",
	  "codeDescription": "Command to upgrade to the latest version of pytest using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 35,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.4.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 7.4.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.61
	},
	{
	  "codeTitle": "Installing Pytest 3.9.1 via pip",
	  "codeDescription": "Command to upgrade pytest to version 3.9.1 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 38,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.9.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 3.9.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.608
	},
	{
	  "codeTitle": "Installing Pytest 8.3.0 Using Pip",
	  "codeDescription": "Command to upgrade to the latest version of pytest (8.3.0) using pip package manager. This will install or update pytest to the newest version from PyPI.",
	  "codeLanguage": "bash",
	  "codeTokens": 56,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.3.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 8.3.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.606
	},
	{
	  "codeTitle": "Installing Pytest 3.3.0 via pip",
	  "codeDescription": "Command to upgrade pytest to version 3.3.0 using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 37,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.3.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 3.3.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.605
	},
	{
	  "codeTitle": "Upgrading pytest to version 5.3.5 using pip",
	  "codeDescription": "This command upgrades the pytest package to version 5.3.5 using pip, the Python package installer. It ensures that the latest bug-fix release is installed.",
	  "codeLanguage": "shell",
	  "codeTokens": 54,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.3.5.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Announcement for pytest 5.3.5",
	  "codeList": [
		{
		  "language": "shell",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.605
	},
	{
	  "codeTitle": "Upgrading pytest using pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 33,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.7.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 2.7.2 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.605
	},
	{
	  "codeTitle": "Installing PyTest 5.4.0 via pip",
	  "codeDescription": "Command to upgrade PyTest to version 5.4.0 using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 38,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.4.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "PyTest 5.4.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.605
	},
	{
	  "codeTitle": "Installing pytest-7.3.0 via pip",
	  "codeDescription": "Command to upgrade to the latest version of pytest (7.3.0) using pip.",
	  "codeLanguage": "bash",
	  "codeTokens": 39,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.3.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-7.3.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.605
	},
	{
	  "codeTitle": "Upgrading pytest to Version 7.4.2 using pip",
	  "codeDescription": "Command to upgrade pytest to the latest version (7.4.2) using pip package manager. This is a straightforward pip command that will replace any existing pytest installation.",
	  "codeLanguage": "bash",
	  "codeTokens": 54,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.4.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-7.4.2 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.604
	},
	{
	  "codeTitle": "Installing pytest 7.2.1 via pip",
	  "codeDescription": "Command to upgrade pytest to version 7.2.1 using pip package manager. This is a drop-in replacement for previous versions.",
	  "codeLanguage": "bash",
	  "codeTokens": 47,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.2.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 7.2.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.602
	},
	{
	  "codeTitle": "Installing pytest 3.6.4 via pip",
	  "codeDescription": "Command to upgrade pytest to version 3.6.4 using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 36,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.6.4.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 3.6.4 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.6
	},
	{
	  "codeTitle": "Installing pytest 5.3.3 via pip",
	  "codeDescription": "Command to upgrade pytest to version 5.3.3 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 38,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.3.3.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Announcement for pytest 5.3.3",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.6
	},
	{
	  "codeTitle": "Installing pytest via pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 32,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.8.6.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 2.8.6 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.6
	},
	{
	  "codeTitle": "Upgrading Pytest using pip",
	  "codeDescription": "This command upgrades Pytest to the latest version (5.3.0 in this context) using pip, the Python package installer.",
	  "codeLanguage": "bash",
	  "codeTokens": 48,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.3.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 5.3.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.6
	},
	{
	  "codeTitle": "Installing pytest 6.0.0 via pip",
	  "codeDescription": "Command to upgrade pytest to version 6.0.0 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 37,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.0.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 6.0.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.6
	},
	{
	  "codeTitle": "Installing pytest-7.1.1 via pip",
	  "codeDescription": "Command to upgrade pytest to version 7.1.1 using pip package manager",
	  "codeLanguage": "shell",
	  "codeTokens": 37,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.1.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Announcement for pytest-7.1.1",
	  "codeList": [
		{
		  "language": "shell",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.6
	},
	{
	  "codeTitle": "Installing pytest 4.6.3 via pip",
	  "codeDescription": "Command to upgrade an existing pytest installation to version 4.6.3 using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 40,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.3.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Announcement for pytest-4.6.3",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.598
	},
	{
	  "codeTitle": "Upgrading pytest Using pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager. This is a standard pip upgrade command that will replace any existing pytest installation.",
	  "codeLanguage": "bash",
	  "codeTokens": 48,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.9.3.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-3.9.3 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.596
	},
	{
	  "codeTitle": "Upgrading pytest using pip",
	  "codeDescription": "This command upgrades pytest to the latest version (3.7.4 in this context) using pip, the Python package installer.",
	  "codeLanguage": "bash",
	  "codeTokens": 47,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.7.4.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Announcement for pytest 3.7.4",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.595
	},
	{
	  "codeTitle": "Upgrading Pytest Package using pip",
	  "codeDescription": "Command to upgrade pytest to the latest version (5.1.1) using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 41,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.1.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 5.1.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.595
	},
	{
	  "codeTitle": "Installing Pytest 3.0.1 via pip",
	  "codeDescription": "Command to upgrade an existing pytest installation to version 3.0.1 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 41,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.0.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 3.0.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.595
	},
	{
	  "codeTitle": "Upgrading pytest to version 7.0.1 using pip",
	  "codeDescription": "This command upgrades the pytest package to the latest version (7.0.1) using pip, the Python package installer.",
	  "codeLanguage": "bash",
	  "codeTokens": 46,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.0.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Announcement for pytest 7.0.1",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.595
	},
	{
	  "codeTitle": "Installing Pytest 7.0.0rc1 Prerelease with pip",
	  "codeDescription": "Command to install the pytest 7.0.0rc1 prerelease version using pip. This allows users to test the upcoming features and improvements before the final release.",
	  "codeLanguage": "bash",
	  "codeTokens": 63,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.0.0rc1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 7.0.0rc1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install pytest==7.0.0rc1"
		}
	  ],
	  "relevance": 0.595
	},
	{
	  "codeTitle": "Installing Pytest 3.8.0 via pip",
	  "codeDescription": "Command to upgrade pytest to version 3.8.0 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 38,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.8.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 3.8.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.594
	},
	{
	  "codeTitle": "Upgrading pytest to version 3.2.5 using pip",
	  "codeDescription": "This command upgrades the pytest package to version 3.2.5 using pip, the Python package installer. It ensures the latest bug-fix release is installed.",
	  "codeLanguage": "bash",
	  "codeTokens": 53,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.2.5.rst#2025-04-08_snippet_0",
	  "pageTitle": "Announcing pytest 3.2.5 Release",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.592
	},
	{
	  "codeTitle": "Installing pytest 3.8.1 via pip",
	  "codeDescription": "Command to upgrade an existing pytest installation to version 3.8.1 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 40,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.8.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 3.8.1 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.59
	},
	{
	  "codeTitle": "Upgrading pytest using pip in Bash",
	  "codeDescription": "This command upgrades pytest to the latest version (4.6.2 in this context) using pip. It's a simple one-line command to update the pytest package.",
	  "codeLanguage": "bash",
	  "codeTokens": 55,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Announcement for pytest 4.6.2",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.59
	},
	{
	  "codeTitle": "Upgrading pytest using pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager.",
	  "codeLanguage": "shell",
	  "codeTokens": 33,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.2.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 3.2.0 Release Announcement",
	  "codeList": [
		{
		  "language": "shell",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.59
	},
	{
	  "codeTitle": "Upgrading pytest using pip in Bash",
	  "codeDescription": "This command upgrades pytest to the latest version (3.0.4 in this context) using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 43,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.0.4.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 3.0.4 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.59
	},
	{
	  "codeTitle": "Installing pytest 7.1.0 via pip",
	  "codeDescription": "Command to upgrade pytest to version 7.1.0 using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 36,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.1.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 7.1.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.59
	},
	{
	  "codeTitle": "Installing pytest 6.2.5 via pip",
	  "codeDescription": "Command to upgrade pytest to version 6.2.5 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 37,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.2.5.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-6.2.5 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.59
	},
	{
	  "codeTitle": "pytest Documentation URL",
	  "codeDescription": "Web address for accessing the complete pytest documentation",
	  "codeLanguage": "text",
	  "codeTokens": 27,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.9.2.rst#2025-04-08_snippet_1",
	  "pageTitle": "pytest 2.9.2 Release Notes",
	  "codeList": [
		{
		  "language": "text",
		  "code": "http://pytest.org"
		}
	  ],
	  "relevance": 0.588
	},
	{
	  "codeTitle": "Upgrading pytest via pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 33,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.9.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 2.9.0 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.586
	},
	{
	  "codeTitle": "Installing Pytest 5.1.0 via pip",
	  "codeDescription": "Command to upgrade pytest to version 5.1.0 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 38,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.1.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 5.1.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.585
	},
	{
	  "codeTitle": "Installing Pytest 3.10.1 via pip",
	  "codeDescription": "Command to upgrade pytest to version 3.10.1 using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 31,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.10.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.585
	},
	{
	  "codeTitle": "Upgrading pytest using pip in Bash",
	  "codeDescription": "This command upgrades pytest to the latest version (3.4.0 in this context) using pip, the Python package installer.",
	  "codeLanguage": "bash",
	  "codeTokens": 46,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.4.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 3.4.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.585
	},
	{
	  "codeTitle": "Installing pytest 7.3.1 via pip",
	  "codeDescription": "Command to upgrade pytest to version 7.3.1 using pip package manager. This is a drop-in replacement upgrade command.",
	  "codeLanguage": "bash",
	  "codeTokens": 47,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.3.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Announcement for pytest 7.3.1",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.585
	},
	{
	  "codeTitle": "Installing or Upgrading pytest 5.3.4 with pip",
	  "codeDescription": "Command to upgrade to pytest 5.3.4 using pip package manager. This is a drop-in replacement for previous versions.",
	  "codeLanguage": "bash",
	  "codeTokens": 46,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.3.4.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 5.3.4 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.585
	},
	{
	  "codeTitle": "Upgrading pytest using pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager. This is the recommended way to install the new 2.7.1 version.",
	  "codeLanguage": "bash",
	  "codeTokens": 50,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.7.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-2.7.1 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.584
	},
	{
	  "codeTitle": "Upgrading pytest via pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 33,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.5.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 2.5.2 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.582
	},
	{
	  "codeTitle": "Installing pytest-5.1.2 via pip",
	  "codeDescription": "Command to upgrade an existing pytest installation to version 5.1.2 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 41,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.1.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Announcement for pytest-5.1.2",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.58
	},
	{
	  "codeTitle": "Upgrading pytest to version 3.3.2 using pip",
	  "codeDescription": "This command upgrades the pytest package to version 3.3.2 using pip, the Python package installer. It's a simple one-line command that can be run in a terminal or command prompt.",
	  "codeLanguage": "bash",
	  "codeTokens": 61,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.3.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Announcement for pytest 3.3.2",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.58
	},
	{
	  "codeTitle": "Installing Pytest 3.6.0 via pip",
	  "codeDescription": "Command to upgrade pytest to version 3.6.0 using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 37,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.6.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 3.6.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.58
	},
	{
	  "codeTitle": "Installing pytest via pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager. This will install or update pytest to version 2.5.1.",
	  "codeLanguage": "bash",
	  "codeTokens": 48,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.5.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 2.5.1 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.58
	},
	{
	  "codeTitle": "Installing Pytest 8.0.0rc2 Prerelease Using pip",
	  "codeDescription": "This command installs the pytest 8.0.0rc2 prerelease version from PyPI using pip. It's intended for testing purposes and not for production use.",
	  "codeLanguage": "bash",
	  "codeTokens": 63,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.0.0rc2.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 8.0.0rc2 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install pytest==8.0.0rc2"
		}
	  ],
	  "relevance": 0.58
	},
	{
	  "codeTitle": "Upgrading pytest using pip",
	  "codeDescription": "Command to upgrade pytest to the latest version using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 33,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.2.0.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 5.2.0 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest"
		}
	  ],
	  "relevance": 0.58
	},
	{
	  "codeTitle": "Unsupported Marker Usage",
	  "codeDescription": "Example of a previously unsupported marker usage that is now detected and handled in this release.",
	  "codeLanguage": "Python",
	  "codeTokens": 44,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.5.0.rst#2025-04-08_snippet_3",
	  "pageTitle": "pytest 2.5.0 Release Notes",
	  "codeList": [
		{
		  "language": "Python",
		  "code": "@pytest.mark.some(lambda arg: ...)\ndef test_function():"
		}
	  ],
	  "relevance": 0.578
	},
	{
	  "codeTitle": "Installing Pytest via Package Managers",
	  "codeDescription": "Commands to install or upgrade pytest using either pip or easy_install package managers.",
	  "codeLanguage": "bash",
	  "codeTokens": 44,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.1.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 2.1.2 Release Notes",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install -U pytest # or\neasy_install -U pytest"
		}
	  ],
	  "relevance": 0.576
	},
	{
	  "codeTitle": "Installing pytest-5.2.4 via pip",
	  "codeDescription": "Command to upgrade an existing pytest installation to version 5.2.4 using pip package manager. This is a drop-in replacement for previous versions.",
	  "codeLanguage": "bash",
	  "codeTokens": 51,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.2.4.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Notes for pytest-5.2.4",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.575
	},
	{
	  "codeTitle": "Upgrading to pytest 3.2.4 using pip",
	  "codeDescription": "Command to upgrade an existing pytest installation to version 3.2.4 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 41,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.2.4.rst#2025-04-08_snippet_0",
	  "pageTitle": "Pytest 3.2.4 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.575
	},
	{
	  "codeTitle": "Upgrading pytest using pip in Bash",
	  "codeDescription": "This command upgrades pytest to the latest version (3.6.2 in this context) using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 43,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.6.2.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 3.6.2 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.575
	},
	{
	  "codeTitle": "Installing pytest 8.1.1 via pip",
	  "codeDescription": "Command to upgrade an existing pytest installation to version 8.1.1 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 41,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.1.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "Release Notes: pytest-8.1.1",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.575
	},
	{
	  "codeTitle": "Upgrading to pytest 4.6.8 using pip",
	  "codeDescription": "Command to upgrade an existing pytest installation to version 4.6.8 using pip package manager.",
	  "codeLanguage": "bash",
	  "codeTokens": 40,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.8.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest-4.6.8 Release Announcement",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.575
	},
	{
	  "codeTitle": "Installing pytest Pre-release Version with pip",
	  "codeDescription": "Command to upgrade pytest to a specific pre-release version using pip package manager",
	  "codeLanguage": "bash",
	  "codeTokens": 31,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/scripts/release.pre.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest Release Announcement Template",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install pytest=={version}"
		}
	  ],
	  "relevance": 0.574
	},
	{
	  "codeTitle": "Installing and Uninstalling pytest Plugins with pip",
	  "codeDescription": "Commands for installing and uninstalling pytest plugins using pip. Simply replace NAME with the specific plugin name you want to install or remove.",
	  "codeLanguage": "bash",
	  "codeTokens": 48,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/plugins.rst#2025-04-08_snippet_0",
	  "pageTitle": "Installing and Using pytest Plugins",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install pytest-NAME\npip uninstall pytest-NAME"
		}
	  ],
	  "relevance": 0.572
	},
	{
	  "codeTitle": "Installing pytest 5.4.1 via pip",
	  "codeDescription": "Command to upgrade pytest to version 5.4.1 using pip package manager. This is a drop-in replacement intended for upgrading existing pytest installations.",
	  "codeLanguage": "bash",
	  "codeTokens": 50,
	  "codeId": "https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.4.1.rst#2025-04-08_snippet_0",
	  "pageTitle": "pytest 5.4.1 Release Documentation",
	  "codeList": [
		{
		  "language": "bash",
		  "code": "pip install --upgrade pytest"
		}
	  ],
	  "relevance": 0.57
	}
  ]